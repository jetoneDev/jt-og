<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AppHelpers</name>
    </assembly>
    <members>
        <member name="T:AppHelpers.ActionHelper">
            <summary>用于动态包装方法和函数的帮助类。注意：方法被包装后，应调用 Invoke 方法才能执行。</summary>
        </member>
        <member name="M:AppHelpers.ActionHelper.GetOrCache``3(System.Func{``0,``1},``2)">
            <summary>指定在 <paramref name="cache"/> 具有与 <typeparamref name="TArg"/> 对应的值时，返回对应的值，否则调用 <paramref name="func"/> 方法，并将获得的值缓存到 <paramref name="cache"/>。</summary>
            <typeparam name="TArg">参数值类型。</typeparam>
            <typeparam name="TResult">结果值类型。</typeparam>
            <typeparam name="TCache">缓存器的类型。此类型应实现 <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)"/> 和<see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)"/> 方法。</typeparam>
            <param name="func">需要执行的动作。</param>
            <param name="cache">保存缓存结果的缓存器。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.CompensateException``3(System.Func{``0,``1},System.Func{``2,``0,``1})">
            <summary>指定 <paramref name="func"/> 在出现异常 <typeparamref name="TException"/> 时使用 <paramref name="errorCompensator"/> 的返回值代替抛出异常。</summary>
            <typeparam name="TException">需要捕获的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要执行的动作。</param>
            <param name="errorCompensator">出现异常时的处理函数。使用此处理函数的返回值作为函数的返回值，不再抛出异常。</param>
            <seealso cref="M:AppHelpers.ActionHelper.HandleException``3(System.Func{``0,``1},System.Func{``2,``0,System.Boolean})"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.FinallyFinishWith(System.Action,System.Action)">
            <summary>指定无论 <paramref name="action"/> 执行过程中是否出现异常，<paramref name="finalAction"/> 应在 <paramref name="action"/> 后执行。</summary>
            <param name="action">需要执行的动作。</param>
            <param name="finalAction">无条件执行的动作。</param>
            <seealso cref="M:AppHelpers.ActionHelper.FinishWith(System.Action,System.Action)"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.FinallyFinishWith``1(System.Action{``0},System.Action{``0})">
            <summary>指定无论 <paramref name="action"/> 执行过程中是否出现异常，<paramref name="finalAction"/> 应在 <paramref name="action"/> 后执行。</summary>
            <param name="action">需要执行的动作。</param>
            <param name="finalAction">无条件执行的动作。</param>
            <seealso cref="M:AppHelpers.ActionHelper.FinallyFinishWith(System.Action,System.Action)"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.FinallyFinishWith``2(System.Func{``0,``1},System.Action{``0})">
            <summary>指定无论 <paramref name="func"/> 执行过程中是否出现异常，<paramref name="finalAction"/> 应在 <paramref name="func"/> 后执行。</summary>
            <param name="func">需要执行的动作。</param>
            <param name="finalAction">无条件执行的动作。</param>
            <seealso cref="M:AppHelpers.ActionHelper.FinallyFinishWith(System.Action,System.Action)"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.FinishWith(System.Action,System.Action)">
            <summary>指定 <paramref name="postAction"/> 应在 <paramref name="action"/> 后执行。与 <see cref="M:AppHelpers.ActionHelper.FinallyFinishWith(System.Action,System.Action)"/> 不同，<paramref name="postAction"/> 在 <paramref name="action"/> 出现异常后不会执行。</summary>
            <param name="action">需要执行的动作。</param>
            <param name="postAction">在 <paramref name="action"/> 后执行的动作。</param>
            <seealso cref="M:AppHelpers.ActionHelper.FinallyFinishWith(System.Action,System.Action)"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.FinishWith``1(System.Action{``0},System.Action{``0})">
            <summary>指定 <paramref name="postAction"/> 应在 <paramref name="action"/> 后执行。与 <see cref="M:AppHelpers.ActionHelper.FinallyFinishWith``1(System.Action{``0},System.Action{``0})"/> 不同，<paramref name="postAction"/> 在 <paramref name="action"/> 出现异常后不会执行。</summary>
            <param name="action">需要执行的动作。</param>
            <param name="postAction">在 <paramref name="action"/> 后执行的动作。</param>
            <seealso cref="M:AppHelpers.ActionHelper.FinallyFinishWith``1(System.Action{``0},System.Action{``0})"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.FinishWith``2(System.Func{``0,``1},System.Action{``0})">
            <summary>指定 <paramref name="postAction"/> 应在 <paramref name="func"/> 后执行。与 <see cref="M:AppHelpers.ActionHelper.FinallyFinishWith``2(System.Func{``0,``1},System.Action{``0})"/> 不同，<paramref name="postAction"/> 在 <paramref name="func"/> 出现异常后不会执行。</summary>
            <param name="func">需要执行的动作。</param>
            <param name="postAction">在 <paramref name="func"/> 后执行的动作。</param>
            <seealso cref="M:AppHelpers.ActionHelper.FinallyFinishWith``2(System.Func{``0,``1},System.Action{``0})"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.HandleException``1(System.Action,System.Predicate{``0})">
            <summary>指定 <paramref name="action"/> 在出现异常 <typeparamref name="TException"/> 时的处理办法。</summary>
            <typeparam name="TException">需要捕获的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="action">需要执行的动作。</param>
            <param name="errorHandler">出现异常时的处理函数。该函数返回 true 时，继续执行；返回 false 时，抛出异常。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.HandleException``2(System.Action{``0},System.Predicate{``1})">
            <summary>指定 <paramref name="action"/> 在出现异常 <typeparamref name="TException"/> 时的处理办法。</summary>
            <typeparam name="TArg"><paramref name="action"/> 委托的参数类型。</typeparam>
            <typeparam name="TException">需要捕获的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="action">需要执行的动作。</param>
            <param name="errorHandler">出现异常时的处理函数。该函数返回 true 时，继续执行；返回 false 时，抛出异常。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.HandleException``3(System.Func{``0,``1},System.Func{``2,``0,System.Boolean})">
            <summary>指定 <paramref name="func"/> 在出现异常 <typeparamref name="TException"/> 时的处理办法。</summary>
            <typeparam name="TException">需要捕获的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要执行的动作。</param>
            <param name="errorHandler">出现异常时的处理函数。该函数返回 true 时，继续执行，返回 <typeparamref name="TResult"/> 的默认值；返回 false 时，抛出异常。</param>
            <seealso cref="M:AppHelpers.ActionHelper.CompensateException``3(System.Func{``0,``1},System.Func{``2,``0,``1})"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.HandleException``3(System.Func{``0,``1},System.Func{``2,System.Boolean})">
            <summary>指定 <paramref name="func"/> 在出现异常 <typeparamref name="TException"/> 时的处理办法。</summary>
            <typeparam name="TException">需要捕获的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要执行的动作。</param>
            <param name="errorHandler">出现异常时的处理函数。该函数返回 true 时，继续执行，返回 <typeparamref name="TResult"/> 的默认值；返回 false 时，抛出异常。</param>
            <seealso cref="M:AppHelpers.ActionHelper.CompensateException``3(System.Func{``0,``1},System.Func{``2,``0,``1})"/>
        </member>
        <member name="M:AppHelpers.ActionHelper.LogException(System.Action,System.String)">
            <summary>指定应将执行 <paramref name="action"/> 时发生的异常记录到 <paramref name="logCategory"/> 对应的记录。</summary>
            <param name="action">需要记录异常的动作。</param>
            <param name="logCategory">日志记录项的 <see cref="P:AppHelpers.LogItem.Category"/>。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.LogException``1(System.Action{``0},System.String)">
            <summary>指定应将执行 <paramref name="action"/> 时发生的异常记录到 <paramref name="logCategory"/> 对应的记录。</summary>
            <param name="action">需要记录异常的动作。</param>
            <param name="logCategory">日志记录项的 <see cref="P:AppHelpers.LogItem.Category"/>。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.LogException``2(System.Func{``0,``1},System.String)">
            <summary>指定应将执行 <paramref name="func"/> 时发生的异常记录到 <paramref name="logCategory"/> 对应的记录。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要记录异常的动作。</param>
            <param name="logCategory">日志记录项的 <see cref="P:AppHelpers.LogItem.Category"/>。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat(System.Action)">
            <summary>指定 <paramref name="action"/> 无条件重复执行。</summary>
            <param name="action">需要重复执行的动作。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat(System.Action,System.Int32)">
            <summary>指定 <paramref name="action"/> 应重复执行 <paramref name="repeatCount"/> 次。</summary>
            <param name="action">需要重复执行的动作。</param>
            <param name="repeatCount">重复执行动作的次数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat(System.Action,System.Func{System.Boolean})">
            <summary>指定 <paramref name="action"/> 在条件 <paramref name="condition"/> 成立时可重复执行。</summary>
            <param name="action">需要重复执行的动作。</param>
            <param name="condition">重复执行动作的条件。条件为空，或执行结果返回 true 时，持续执行动作；返回 false 时，结束执行。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat``1(System.Action{``0})">
            <summary>指定 <paramref name="action"/> 无条件重复执行。</summary>
            <param name="action">需要重复执行的动作。</param>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat``1(System.Action{``0},System.Int32)">
            <summary>指定 <paramref name="action"/> 应重复执行 <paramref name="repeatCount"/> 次。</summary>
            <param name="action">需要重复执行的动作。</param>
            <param name="repeatCount">重复执行动作的次数。</param>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat``1(System.Action{``0},System.Func{System.Boolean})">
            <summary>指定 <paramref name="action"/> 在条件 <paramref name="condition"/> 成立时可重复执行。</summary>
            <param name="action">需要重复执行的动作。</param>
            <param name="condition">重复执行动作的条件。条件为空，或执行结果返回 true 时，持续执行动作；返回 false 时，结束执行。</param>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat``2(System.Func{``0,``1},System.Int32)">
            <summary>指定 <paramref name="func"/> 应重复执行 <paramref name="repeatCount"/> 次，返回最后一次的结果。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要重复执行的动作。</param>
            <param name="repeatCount">重复执行动作的次数。如重复次数非正整数，返回 default( <typeparamref name="TResult"/>)。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Repeat``2(System.Func{``0,``1},System.Func{System.Boolean})">
            <summary>指定 <paramref name="func"/> 在条件 <paramref name="condition"/> 成立时可重复执行，在条件不成立时返回最后执行的结果。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要重复执行的动作。</param>
            <param name="condition">重复执行动作的条件。条件为空，或执行结果返回 true 时，持续执行动作；返回 false 时，结束执行。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Rest(System.Action,System.Int32)">
            <summary>指定 <paramref name="action"/> 在执行后暂停 <paramref name="milliseconds"/>。</summary>
            <param name="action">需要暂停执行的动作。</param>
            <param name="milliseconds">执行后暂停的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Rest``1(System.Action{``0},System.Int32)">
            <summary>指定 <paramref name="action"/> 在执行后暂停 <paramref name="milliseconds"/>。</summary>
            <param name="action">需要暂停执行的动作。</param>
            <param name="milliseconds">执行后暂停的毫秒数。</param>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ActionHelper.Rest``2(System.Func{``0,``1},System.Int32)">
            <summary>指定 <paramref name="func"/> 在执行后暂停 <paramref name="milliseconds"/>。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要暂停执行的动作。</param>
            <param name="milliseconds">执行后暂停的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``1(System.Action,System.Predicate{``0},System.Int32,System.Int32)">
            <summary>允许 <paramref name="action"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TException">允许重试的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="action">需要重试的动作。</param>
            <param name="retryCondition">指定重试条件。此函数本身为 null，或函数返回值为 true 时，允许重试；返回 false 时，不再重试。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``2(System.Action{``0},System.Predicate{``1},System.Int32,System.Int32)">
            <summary>允许 <paramref name="action"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TArg"><paramref name="action"/> 委托的参数类型。</typeparam>
            <typeparam name="TException">允许重试的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="action">需要重试的动作。</param>
            <param name="retryCondition">指定重试条件。此函数本身为 null，或函数返回值为 true 时，允许重试；返回 false 时，不再重试。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``1(System.Action,System.Int32,System.Int32)">
            <summary>允许 <paramref name="action"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TException">允许重试的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="action">需要重试的动作。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``2(System.Action{``0},System.Int32,System.Int32)">
            <summary>允许 <paramref name="action"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TArg"><paramref name="action"/> 委托的参数类型。</typeparam>
            <typeparam name="TException">允许重试的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="action">需要重试的动作。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``1(System.Action{``0},System.Int32,System.Int32)">
            <summary>允许 <paramref name="action"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TArg"><paramref name="action"/> 委托的参数类型。</typeparam>
            <param name="action">需要重试的动作。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``3(System.Func{``0,``1},System.Func{``2,``0,System.Boolean},System.Int32,System.Int32)">
            <summary>允许 <paramref name="func"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <typeparam name="TException">允许重试的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="func">需要重试的函数。</param>
            <param name="retryCondition">指定重试条件。此函数本身为 null，或函数返回值为 true 时，允许重试；返回 false 时，不再重试。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``3(System.Func{``0,``1},System.Int32,System.Int32)">
            <summary>允许 <paramref name="func"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <typeparam name="TException">允许重试的异常。不能干预以下关键异常： <see cref="T:System.StackOverflowException"/>、 <see cref="T:System.OutOfMemoryException"/>，以及 <see cref="T:System.Threading.ThreadAbortException"/>。</typeparam>
            <param name="func">需要重试的函数。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.RetryIfFailed``2(System.Func{``0,``1},System.Int32,System.Int32)">
            <summary>允许 <paramref name="func"/> 最多 <paramref name="maxRetry"/> 次异常重试。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要重试的函数。</param>
            <param name="maxRetry">可重试的次数上限。</param>
            <param name="millisecondsBeforeRetry">在重试前等待的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.ToFunc``2(System.Action{``0},``1)">
            <summary>将带有参数无返回类型的 <see cref="T:System.Action`1"/> 转换为返回 <paramref name="returnValue"/> 的 <see cref="T:System.Func`2"/>。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="action">需要转换的动作。</param>
            <param name="returnValue">函数的返回值。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.ToAction``2(System.Func{``0,``1})">
            <summary>将带有参数的 <see cref="T:System.Func`2"/> 转换为无返回类型的 <see cref="T:System.Action`1"/></summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要转换的函数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.ToAsync(System.Action)">
            <summary>指定 <paramref name="action"/> 应在线程池中异步执行。</summary>
            <param name="action">需要异步执行的动作。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.ToAsync``2(System.Func{``0,``1})">
            <summary>指定 <paramref name="func"/> 应在线程池中异步执行。</summary>
            <param name="func">需要异步执行的动作。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Wait(System.Action,System.Int32)">
            <summary>指定 <paramref name="action"/> 在执行前延迟 <paramref name="milliseconds"/>。</summary>
            <param name="action">需要延迟执行的动作。</param>
            <param name="milliseconds">执行前延迟的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Wait``1(System.Action{``0},System.Int32)">
            <summary>指定 <paramref name="action"/> 在执行前延迟 <paramref name="milliseconds"/>。</summary>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
            <param name="action">需要延迟执行的动作。</param>
            <param name="milliseconds">执行前延迟的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Wait``2(System.Func{``0,``1},System.Int32)">
            <summary>指定 <paramref name="func"/> 在执行前延迟 <paramref name="milliseconds"/>。</summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要延迟执行的动作。</param>
            <param name="milliseconds">执行前延迟的毫秒数。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WaitUntil(System.Action,System.Func{System.Boolean},System.Int32)">
            <summary>指定执行 <paramref name="action"/> 后应循环检测 <paramref name="exitCondition"/>，直到条件成立为止。</summary>
            <param name="action">需要执行的动作。</param>
            <param name="exitCondition">执行动作后循环等待的条件。</param>
            <param name="intervalMilliseconds">检测循环条件之间等待的时间。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WaitUntil(System.Action,System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>指定执行 <paramref name="action"/> 后应循环检测 <paramref name="exitCondition"/>，直到条件成立为止。</summary>
            <param name="action">需要执行的动作。</param>
            <param name="exitCondition">执行动作后循环等待的条件。</param>
            <param name="intervalMilliseconds">检测循环条件之间等待的时间。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WaitUntil``1(System.Action{``0},System.Func{System.Boolean},System.Int32)">
            <summary>指定执行 <paramref name="action"/> 后应循环检测 <paramref name="exitCondition"/>，直到条件成立为止。</summary>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
            <param name="action">需要执行的动作。</param>
            <param name="exitCondition">执行动作后循环等待的条件。</param>
            <param name="intervalMilliseconds">检测循环条件之间等待的时间。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WaitUntil``1(System.Action{``0},System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>指定执行 <paramref name="action"/> 后应循环检测 <paramref name="exitCondition"/>，直到条件成立为止。</summary>
            <typeparam name="TArg">执行动作的参数类型。</typeparam>
            <param name="action">需要执行的动作。</param>
            <param name="exitCondition">执行动作后循环等待的条件。</param>
            <param name="intervalMilliseconds">检测循环条件之间等待的时间。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.With``1(``0,System.Action{``0})">
            <summary>使用 <paramref name="action"/> 处理 <paramref name="item"/> 后返回 <paramref name="item"/>。</summary>
            <typeparam name="TItem">需要被 <paramref name="action"/> 处理的对象类型。</typeparam>
            <param name="item">需要被处理的对象。</param>
            <param name="action">用于修改 <paramref name="item"/> 的委托。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.ReturnWith``2(``0,System.Func{``0,``1})">
            <summary>使用 <paramref name="func"/> 转换 <paramref name="item"/> 后返回 <paramref name="func"/> 的返回值。</summary>
            <typeparam name="TItem">需要被 <paramref name="func"/> 处理的对象类型。</typeparam>
            <typeparam name="TResult">返回的类型。</typeparam>
            <param name="item">需要被处理的对象。</param>
            <param name="func">用于转换 <paramref name="item"/> 的委托。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WithNotNull``1(``0,System.Action{``0})">
            <summary>使用 <paramref name="action"/> 处理非空的对象 <paramref name="item"/>，返回 <paramref name="item"/>。如 <paramref name="item"/> 为空，则直接返回。</summary>
            <typeparam name="TItem">需要被 <paramref name="action"/> 处理的对象类型。</typeparam>
            <param name="item">需要被处理的对象。</param>
            <param name="action">用于修改 <paramref name="item"/> 的委托。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.ReturnWithNotNull``2(``0,System.Func{``0,``1})">
            <summary>使用 <paramref name="func"/> 转换非空的对象 <paramref name="item"/>，返回 <paramref name="func"/> 的返回值。如 <paramref name="item"/> 为空，则直接返回 <typeparamref name="TResult"/> 的默认值。</summary>
            <typeparam name="TItem">需要被 <paramref name="func"/> 处理的对象类型。</typeparam>
            <typeparam name="TResult">返回的结果类型。</typeparam>
            <param name="item">需要被处理的对象。</param>
            <param name="func">用于转换 <paramref name="item"/> 的委托。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WithNotNull``2(``0,System.Action{``1})">
            <summary>使用 <paramref name="action"/> 处理非空的对象 <paramref name="item"/>，返回 <paramref name="item"/>。如 <paramref name="item"/> 为空，则直接返回。</summary>
            <typeparam name="TItem">需要被 <paramref name="action"/> 处理的对象类型。</typeparam>
            <typeparam name="TSubclass">在处理前投射的子类。</typeparam>
            <param name="item">需要被处理的对象。</param>
            <param name="action">用于修改 <paramref name="item"/> 投射为 <typeparamref name="TSubclass"/> 对象的委托。如 <typeparamref name="TItem"/> 不能被转换为 <typeparamref name="TSubclass"/>，则不会调用该委托。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.WithAction``1(``0,System.Action{``0})">
            <summary>返回使用 <paramref name="action"/> 处理 <paramref name="item"/> 的 <see cref="T:System.Action"/>。</summary>
            <typeparam name="TItem">需要被 <paramref name="action"/> 处理的对象类型。</typeparam>
            <param name="item">需要被处理的对象。</param>
            <param name="action">用于修改 <paramref name="item"/> 的委托。</param>
        </member>
        <member name="M:AppHelpers.ActionHelper.Validate``2(System.Func{``0,``1},System.Func{``0,System.String})">
            <summary>
            指定 <paramref name="func"/> 在执行前应通过 <paramref name="validator"/> 的校验。
            </summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <typeparam name="TResult">执行函数的返回结果类型。</typeparam>
            <param name="func">需要校验执行参数的动作。</param>
            <param name="validator">用于校验执行参数的委托。委托返回 null 时，执行 <paramref name="func"/>，否则抛出 <see cref="T:AppHelpers.ValidationException`1"/> 异常，该异常的 <see cref="P:AppHelpers.ValidationException`1.AssociatedValue"/>为传入的参数，消息文本为委托返回的字符串。</param>
            <exception cref="T:AppHelpers.ValidationException`1"><paramref name="validator"/> 返回的内容非空。</exception>
        </member>
        <member name="M:AppHelpers.ActionHelper.Validate``1(System.Action{``0},System.Func{``0,System.String})">
            <summary>
            指定 <paramref name="action"/> 在执行前应通过 <paramref name="validator"/> 的校验。
            </summary>
            <typeparam name="TArg">执行函数的参数类型。</typeparam>
            <param name="action">需要校验执行参数的动作。</param>
            <param name="validator">用于校验执行参数的委托。委托返回 null 时，执行 <paramref name="action"/>，否则抛出 <see cref="T:AppHelpers.ValidationException`1"/> 异常，该异常的 <see cref="P:AppHelpers.ValidationException`1.AssociatedValue"/>为传入的参数，消息文本为委托返回的字符串。</param>
            <exception cref="T:AppHelpers.ValidationException`1"><paramref name="validator"/> 返回的内容非空。</exception>
        </member>
        <member name="M:AppHelpers.ArithmaticHelper.Lerp(System.Single,System.Single,System.Single)">
            <summary>在 <paramref name="start"/> 到 <paramref name="end"/> 之间线性插值，返回两者其间 <paramref name="amount"/> 的值。</summary>
            <param name="start">插值起点。</param>
            <param name="end">插值终点。</param>
            <param name="amount">百分点（值范围应处于 0 到 1 之间）。</param>
        </member>
        <member name="M:AppHelpers.ArithmaticHelper.Lerp(System.Double,System.Double,System.Double)">
            <summary>在 <paramref name="start"/> 到 <paramref name="end"/> 之间线性插值，返回两者其间 <paramref name="amount"/> 的值。</summary>
            <param name="start">插值起点。</param>
            <param name="end">插值终点。</param>
            <param name="amount">百分点（值范围应处于 0 到 1 之间）。</param>
        </member>
        <member name="T:AppHelpers.CollectionHelper">
            <summary>用于帮助处理集合及数组的类。</summary>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Clear``1(System.Collections.Concurrent.ConcurrentQueue{``0})">
            <summary>清空 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>，返回移除的项数。</summary>
            <typeparam name="TItem"><see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> 的项类型。</typeparam>
            <param name="queue">需要清空的 <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/>。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Clear``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>清空 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>，返回移除的项数。</summary>
            <typeparam name="TItem"><see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/> 的项类型。</typeparam>
            <param name="queue">需要清空的 <see cref="T:System.Collections.Concurrent.ConcurrentBag`1"/>。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CreateComparer``1(System.Func{``0,``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>从 <paramref name="equalityComparer"/> 和 <paramref name="hashProvider"/> 委托创建实现 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 接口的实例。</summary>
            <typeparam name="TItem">用于比较的类。</typeparam>
            <param name="equalityComparer">用于实现 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 接口比较实例相等性的委托。该委托无需考虑空值或引用相等的情形，本工具方法返回的实例已处理上述情形。</param>
            <param name="hashProvider">用于实现 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 接口计算散列值的委托。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CreateComparer``1(System.Func{``0,``0,System.Int32})">
            <summary>从 <paramref name="comparer"/> 委托创建实现 <see cref="T:System.Collections.Generic.IComparer`1"/> 接口的实例。</summary>
            <typeparam name="TItem">用于比较的类。</typeparam>
            <param name="comparer">用于实现 <see cref="T:System.Collections.Generic.IComparer`1"/> 接口比较实例相等性的委托。该委托无需考虑引用相等的情形，本工具方法返回的实例已处理上述情形。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CreateKeyedCollection``2(System.Func{``1,``0})">
            <summary>创建集合键嵌入在值中的集合。</summary>
            <typeparam name="TKey">集合中键的类型。</typeparam>
            <typeparam name="TItem">集合项的类型。</typeparam>
            <param name="getKeyForItem">从指定项提取键的委托。</param>
            <returns>实现 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 抽象类的集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CreateKeyedCollection``2(System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>创建集合键嵌入在值中的集合。</summary>
            <typeparam name="TKey">集合中键的类型。</typeparam>
            <typeparam name="TItem">集合项的类型。</typeparam>
            <param name="getKeyForItem">从指定项提取键的委托。</param>
            <param name="keyComparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口的实现，如此值为 null，则使用 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 的默认实现。</param>
            <returns>实现 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 抽象类的集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CreateKeyedCollection``2(System.Collections.Generic.IEnumerable{``1},System.Func{``1,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>从现有的集合创建集合键嵌入在值中的快速索引集合。如集合的项具有重复的键，仅保留先前添加到集合的项，后面的项将被忽略。</summary>
            <typeparam name="TKey">集合中键的类型。</typeparam>
            <typeparam name="TItem">集合项的类型。</typeparam>
            <param name="collection">包含数据的集合。</param>
            <param name="getKeyForItem">从指定项提取键的委托。</param>
            <param name="keyComparer">比较键时要使用的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 泛型接口的实现，如此值为 null，则使用 <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> 的默认实现。</param>
            <returns>实现 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2"/> 抽象类的集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>检查传入的集合是否为 null 或不包含任何内容。</summary>
            <typeparam name="T">项的类型。</typeparam>
            <param name="collection">要检查内容的集合。</param>
            <returns>当集合为空时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetEmptyArray``1">
            <summary>获取 <typeparamref name="TItem"/> 的 0 长度数组。</summary>
        </member>
        <member name="M:AppHelpers.CollectionHelper.HasContent``1(System.Collections.Generic.ICollection{``0})">
            <summary>检查传入的集合是否包含内容。</summary>
            <typeparam name="T">项的类型。</typeparam>
            <param name="collection">要检查内容的集合。</param>
            <returns>当集合不为空且长度非 0 时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.IsInCollection``1(``0,``0[])">
            <summary>检查输入项 <paramref name="input"/> 是否在集合 <paramref name="values"/> 中。</summary>
            <typeparam name="T">需要比较的项类型。</typeparam>
            <param name="input">用于比较的值。</param>
            <param name="values">比较项列表。</param>
            <returns><paramref name="values"/> 包含 <paramref name="input"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.IsInPosition``1(``0[],``0[],System.Int32)">
            <summary>检查 <paramref name="source"/> 是否处于 <paramref name="container"/> 的指定位置。</summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="container">要检查包含关系的数组。</param>
            <param name="source">要检查被包含关系的数组。</param>
            <param name="index">开始检查的位置。</param>
            <returns><paramref name="container"/> 在 <paramref name="index"/> 的位置包含 <paramref name="source"/> 时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray``1(``0[])">
            <summary>浅表复制副本数组。</summary>
            <typeparam name="T">需要复制的数组类型。</typeparam>
            <param name="array">需要复制的数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.Byte[])">
            <summary>复制字节数组副本。</summary>
            <param name="array">需要复制的数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.Byte[],System.Int32,System.Int32)">
            <summary>复制字节数组副本。</summary>
            <param name="array">需要复制的数组。</param>
            <param name="offset">源数组开始复制的位置。</param>
            <param name="count">需要复制的字节数量。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.Int32[])">
            <summary>复制数组副本。</summary>
            <param name="array">需要复制的数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.Int64[])">
            <summary>复制数组副本。</summary>
            <param name="array">需要复制的数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.Single[])">
            <summary>复制数组副本。</summary>
            <param name="array">需要复制的数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.Double[])">
            <summary>复制数组副本。</summary>
            <param name="array">需要复制的数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyArray(System.ArraySegment{System.Byte})">
            <summary>复制字节类型的 <see cref="T:System.ArraySegment`1"/> 中数组内容的副本。</summary>
            <param name="source">需要复制的数组片段。</param>
            <returns><paramref name="source"/> 从 <see cref="P:System.ArraySegment`1.Offset"/> 开始 <see cref="P:System.ArraySegment`1.Count"/> 字节的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.CopyTo(System.ArraySegment{System.Byte},System.Byte[],System.Int32)">
            <summary>复制字节类型的 <see cref="T:System.ArraySegment`1"/> 的数组片段到新的数组。</summary>
            <param name="source">需要复制的数组片段。</param>
            <param name="offset">需复制数组的偏移值。</param>
            <param name="target">复制字节数组的目标数组。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>逐个枚举集合，执行指定的操作，返回原集合。</summary>
            <typeparam name="TItem">集合项的类别。</typeparam>
            <param name="collection">需要枚举的集合。</param>
            <param name="itemHandler">对传入集合项执行操作的委托。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ForEach``1(System.Collections.IEnumerable,System.Action{``0})">
            <summary>逐个枚举集合，执行指定的操作，返回原集合。</summary>
            <typeparam name="TItem">集合项的类别。</typeparam>
            <param name="collection">需要枚举的集合。</param>
            <param name="itemHandler">对传入集合项执行操作的委托。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>逐个枚举集合，执行指定的操作，返回原集合。</summary>
            <typeparam name="TItem">集合项的类别。</typeparam>
            <param name="collection">需要枚举的集合。</param>
            <param name="itemHandler">对传入集合项执行操作的委托。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>逐个枚举集合，执行指定的操作，返回原集合。</summary>
            <typeparam name="TItem">集合项的类别。</typeparam>
            <param name="collection">需要枚举的集合。</param>
            <param name="itemAndIndexHandler">对传入集合项和索引执行操作的委托。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>检查指定键是否在字典中并返回对应的值，否则返回字典值的默认值。</summary>
            <typeparam name="TKey">字典键的类型。</typeparam>
            <typeparam name="TValue">字典值的类型。</typeparam>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则返回 <typeparamref name="TValue"/> 的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>检查指定键是否在字典中并返回对应的值，否则返回默认值。</summary>
            <typeparam name="TKey">字典键的类型。</typeparam>
            <typeparam name="TValue">字典值的类型。</typeparam>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <param name="defaultValue">键不存在时返回的默认值。</param>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault(System.Collections.IDictionary,System.Object,System.Object)">
            <summary>检查指定键 <paramref name="key"/> 是否在字典中，并返回对应的值，否则返回 <paramref name="defaultValue"/>。</summary>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <param name="defaultValue">键不存在时返回的默认值。</param>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>检查指定键是否在字典中并返回对应的值，否则创建 <typeparamref name="TValue"/> 的新实例，添加到字典，并返回该值。</summary>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则创建 <typeparamref name="TValue"/> 的新实例，并返回该值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>检查指定键是否在字典中并返回对应的值，否则将 <paramref name="value"/> 的值添加到字典，并返回该值。</summary>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <param name="value">键不存在时需要添加的值。</param>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则返回 <paramref name="value"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>检查指定键是否在字典中并返回对应的值，否则将 <paramref name="valueFactory"/> 返回的值添加到字典，再返回该值。</summary>
            <param name="dictionary">需要查找键的字典。字典为空时，返回 <paramref name="valueFactory"/> 的调用结果，不抛出异常。</param>
            <param name="key">需要查找的键。</param>
            <param name="valueFactory">用于为键生成值的函数。</param>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则通过使用指定的函数将键/值对添加到字典中。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0)">
            <summary>检查指定键是否在集合中并返回对应的值，否则返回默认值 default( <typeparamref name="TItem"/>)。</summary>
            <param name="collection">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <typeparam name="TKey">字典键的类型。</typeparam>
            <typeparam name="TItem">字典值的类型。</typeparam>
            <returns>返回 <paramref name="collection"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键或键值不为指定的类型，则返回 default( <typeparamref name="TItem"/>)。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault``2(System.Collections.ObjectModel.KeyedCollection{``0,``1},``0,``1)">
            <summary>检查指定键是否在集合中并返回对应的值，否则返回默认值。</summary>
            <param name="collection">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <param name="defaultValue">键不存在时返回的默认值。</param>
            <typeparam name="TKey">字典键的类型。</typeparam>
            <typeparam name="TItem">字典值的类型。</typeparam>
            <returns>返回 <paramref name="collection"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键或键值不为指定的类型，则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault``1(System.Collections.IDictionary,System.Object)">
            <summary>检查指定键是否在字典中并返回对应的值，否则返回默认值。</summary>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <typeparam name="T">强制返回类型为指定的类型。</typeparam>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键或键值不为指定的类型，则返回 <typeparamref name="T"/> 的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault``1(System.Collections.IDictionary,System.Object,``0)">
            <summary>检查指定键是否在字典中并返回对应的值，否则返回默认值。</summary>
            <param name="dictionary">需要查找键的字典。</param>
            <param name="key">需要查找的键。</param>
            <param name="defaultValue">键不存在时返回的默认值。</param>
            <typeparam name="T">强制返回类型为指定的类型。</typeparam>
            <returns>返回 <paramref name="dictionary"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键或键值不为指定的类型，则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>检查指定键是否在集合中并返回对应的值，否则返回默认值。</summary>
            <param name="collection">需要查找键的集合。</param>
            <param name="key">需要查找的键。</param>
            <returns>返回 <paramref name="collection"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则返回 <see cref="F:System.String.Empty"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetOrDefault(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>检查指定键是否在集合中并返回对应的值，否则返回默认值。</summary>
            <param name="collection">需要查找键的集合。</param>
            <param name="key">需要查找的键。</param>
            <param name="defaultValue">键不存在时返回的默认值。</param>
            <returns>返回 <paramref name="collection"/> 中与 <paramref name="key"/> 对应的值，如不存在指定键，则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MapValue``2(``0,``0[],``1[])">
            <summary>映射值。若 <paramref name="fromValues"/> 包含 <paramref name="input"/>，则返回 <paramref name="toValues"/> 中相应位置的值，否则返回 <typeparamref name="TMapped"/> 的默认值。</summary>
            <typeparam name="TValue">比较类型。</typeparam>
            <typeparam name="TMapped">映射类型。</typeparam>
            <param name="input">比较输入项。</param>
            <param name="fromValues">比较项列表。</param>
            <param name="toValues">返回项列表。</param>
            <returns>若 <paramref name="fromValues"/> 包含 <paramref name="input"/>，则返回 <paramref name="toValues"/> 中相应位置的值，否则返回 <typeparamref name="TMapped"/> 的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MapValue``2(``0,``0[],``1[],``1)">
            <summary>映射将一个数组内的值映射到另一个。若 <paramref name="fromValues"/> 包含 <paramref name="input"/>，则返回 <paramref name="toValues"/> 中相应位置的值，否则返回 <paramref name="defaultValue"/>。</summary>
            <typeparam name="TValue">比较类型。</typeparam>
            <typeparam name="TMapped">映射类型。</typeparam>
            <param name="input">比较输入项。</param>
            <param name="fromValues">比较项数组。</param>
            <param name="toValues">返回项数组。</param>
            <param name="defaultValue">当找不到对应比较项时返回的默认值。</param>
            <returns>若 <paramref name="fromValues"/> 包含 <paramref name="input"/>，则返回 <paramref name="toValues"/> 中相应位置的值，否则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MapValue``2(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``1)">
            <summary>映射将一个集合内的值映射到对应位置的另一个。</summary>
            <typeparam name="TValue">比较类型。</typeparam>
            <typeparam name="TMapped">映射类型。</typeparam>
            <param name="input">比较输入项。</param>
            <param name="fromValues">比较项集合。</param>
            <param name="toValues">返回项集合。</param>
            <param name="defaultValue">当找不到对应比较项时返回的默认值。</param>
            <returns>若 <paramref name="fromValues"/> 包含 <paramref name="input"/>，则返回 <paramref name="toValues"/> 中相应位置的值，否则返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTop``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>将指定位置的项移到列表首位。</summary>
            <param name="list">要处理的列表。</param>
            <param name="position">要置顶项所在的索引位置。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveUp``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>将指定位置的项上移。</summary>
            <param name="list">要处理的列表。</param>
            <param name="position">要上移的项。</param>
            <returns>成功上移项时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveDown``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>将指定位置的项下移。</summary>
            <param name="list">要处理的列表。</param>
            <param name="position">要下移的项。</param>
            <returns>成功下移项时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTop``1(System.Collections.Generic.IList{``0},``0)">
            <summary>将指定的项移到列表首位。</summary>
            <param name="list">要处理的列表。</param>
            <param name="item">要置顶的项。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTopOrInsert``1(System.Collections.Generic.IList{``0},``0)">
            <summary>将指定的项移到列表首位，如项不在列表，则插入项。</summary>
            <param name="list">要处理的列表。</param>
            <param name="item">要置顶的项。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTopOrInsert``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>将指定的项移到列表首位，如项不在列表，则插入项。</summary>
            <param name="list">要处理的列表。</param>
            <param name="item">要置顶的项。</param>
            <param name="comparer">用于比较项是否相等的比较器。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.RemoveLastItems``1(``0,System.Int32)">
            <summary>删除列表项中处于第 <paramref name="index"/> 及其后的若干项。</summary>
            <param name="list">要删除项的列表。</param>
            <param name="index">需要删除的项索引。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.RemoveOne``1(``0[],``0)">
            <summary>返回删除了与 <paramref name="item"/> 匹配项的 <paramref name="array"/> 的副本。</summary>
            <typeparam name="T">包含项的类型。</typeparam>
            <param name="array">包含项的数组。</param>
            <param name="item">要删除的项。</param>
            <returns>返回删除了与 <paramref name="item"/> 匹配项的 <paramref name="array"/> 的副本；如不包含匹配项，返回原数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Remove``2(``0,System.Predicate{``1})">
            <summary>删除 <paramref name="list"/> 中符合 <paramref name="predicate"/> 的项，返回 <paramref name="list"/>。</summary>
            <typeparam name="TList">需要删除项的集合类型。</typeparam>
            <typeparam name="TItem">集合项的类型。</typeparam>
            <param name="list">需要删除项的集合。</param>
            <param name="predicate">判定项是否符合删除条件的委托。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.RemoveDefault``1(System.Collections.Generic.IList{``0})">
            <summary>清除 <see cref="T:System.Collections.Generic.IList`1"/> 中的默认项。</summary>
            <typeparam name="T">值类型。</typeparam>
            <param name="list">需要删除默认项的集合。</param>
            <returns>删除了默认项的集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.RemoveNull``1(System.Collections.Generic.IList{``0})">
            <summary>清除 <see cref="T:System.Collections.Generic.IList`1"/> 中为 null 的项。</summary>
            <typeparam name="T">值类型。</typeparam>
            <param name="list">需要删除 null 值的集合。</param>
            <returns>删除了 null 的集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.RemoveDuplicate``1(System.Collections.Generic.IList{``0})">
            <summary>删除列表中的重复项。在 .NET 3.5 后，可考虑使用 Distinct 方法代替此方法。</summary>
            <typeparam name="T">项的类型。</typeparam>
            <param name="list">需要删除重复项的列表。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.RemoveDuplicate``2(``0,System.Collections.Generic.IEqualityComparer{``1})">
            <summary>删除列表中的重复项。在 .NET 3.5 后，可考虑使用 Distinct 方法代替此方法。</summary>
            <typeparam name="TList">集合的类型。</typeparam>
            <typeparam name="TItem">项的类型。</typeparam>
            <param name="list">需要删除重复项的列表。</param>
            <param name="comparer">用于比较项是否重复的比较器。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTop``1(``0,System.Int32)">
            <summary>将指定位置的项移到列表首位。</summary>
            <typeparam name="TList">集合的类型。</typeparam>
            <param name="list">要处理的列表。</param>
            <param name="position">要置顶项所在的索引位置。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveUp``1(``0,System.Int32)">
            <summary>将指定位置的项上移。</summary>
            <typeparam name="TList">集合的类型。</typeparam>
            <param name="list">要处理的列表。</param>
            <param name="position">要上移的项。</param>
            <returns>成功上移项时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveDown``1(``0,System.Int32)">
            <summary>将指定位置的项下移。</summary>
            <typeparam name="TList">集合的类型。</typeparam>
            <param name="list">要处理的列表。</param>
            <param name="position">要下移的项。</param>
            <returns>成功下移项时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTop``1(``0,System.Object)">
            <summary>将指定的项移到列表首位。</summary>
            <typeparam name="TList">集合的类型。</typeparam>
            <param name="list">要处理的列表。</param>
            <param name="item">要置顶的项。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.MoveToTopOrInsert``1(``0,System.Object)">
            <summary>将指定的项移到列表首位，如项不在列表，则插入项。</summary>
            <typeparam name="TList">集合的类型。</typeparam>
            <param name="list">要处理的列表。</param>
            <param name="item">要置顶的项。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>尝试向 <see cref="T:System.Collections.Generic.IDictionary`2"/> 添加值。当值为空或已存在相同键于字典时，返回 false。注意：此方法不是线程安全的，如需保障线程安全，应使用 ConcurrentDictionary。</summary>
            <typeparam name="TKey">字典的键类型。</typeparam>
            <typeparam name="TItem">字典的项类型。</typeparam>
            <param name="collection">需要添加值的字典。</param>
            <param name="key">需要添加到字典的键。</param>
            <param name="item">需要添加到字典的项。</param>
            <returns>添加了新项时，返回 true；当已存在项时，返回 false。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Append``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>将 <paramref name="item"/> 添加到 <paramref name="collection"/> 并返回原集合。如集合为空，则返回空。</summary>
            <typeparam name="T">集合的类型。</typeparam>
            <param name="collection">需要添加项的集合。</param>
            <param name="item">需要添加的项。</param>
            <returns>原集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AppendTo``1(``0,System.Collections.Generic.ICollection{``0})">
            <summary>将 <paramref name="item"/> 添加到 <paramref name="collection"/> 并返回添加的项。如集合为空，直接返回对象，不抛出异常。</summary>
            <typeparam name="T">集合的类型。</typeparam>
            <param name="item">需要添加的项。</param>
            <param name="collection">需要添加项的集合。</param>
            <returns>添加的项。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>将 <paramref name="source"/> 的项添加复制到 <paramref name="target"/>。当源集合或目标集合为空时，不抛出异常，直接返回目标集合。</summary>
            <typeparam name="T">需要复制的项类型。</typeparam>
            <param name="target">需要添加项的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</param>
            <param name="source">需要复制的列表。</param>
            <returns>返回源集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>将 <paramref name="source"/> 的项添加复制到 <paramref name="target"/>。当源集合或目标集合为空时，不抛出异常，直接返回目标集合。</summary>
            <typeparam name="T">需要复制的项类型。</typeparam>
            <param name="target">需要添加项的 <see cref="T:System.Collections.Generic.ICollection`1"/>。</param>
            <param name="source">需要复制的列表。</param>
            <returns>返回源集合。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>如果指定的键尚不存在，则将键/值对添加到 <paramref name="dictionary"/> 中；如果指定的键已存在，则更新 <paramref name="dictionary"/> 中的键/值对。</summary>
            <typeparam name="TKey">键的类型。</typeparam>
            <typeparam name="TValue">值的类型。</typeparam>
            <param name="dictionary">需要添加或更新键的 <see cref="T:System.Collections.Generic.IDictionary`2"/>。</param>
            <param name="key">要添加的键或应更新其值的键。</param>
            <param name="addValueFactory">用于为空缺键生成值的函数。</param>
            <param name="updateValueFactory">用于根据现有键的现有值为键生成新值的函数。</param>
            <returns>键的新值。这将是 <paramref name="addValueFactory"/> 的结果（如果缺少键）或 <paramref name="updateValueFactory"/> 的结果（如果存在键）。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/>、<paramref name="addValueFactory"/> 或 <paramref name="updateValueFactory"/> 为空。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AppendNewItem``1(``0[]@,``0)">
            <summary>将 <paramref name="item"/> 不在 <paramref name="array"/> 的项添加到 <paramref name="array"/>。</summary>
            <typeparam name="T">需要添加的项类型。</typeparam>
            <param name="array">需要添加项的数组。</param>
            <param name="item">需要添加的项。</param>
            <returns>返回修改后的新数组（源数据也随之改变）。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AppendItems``1(``0[]@,``0[])">
            <summary>将 <paramref name="items"/> 的项添加复制到 <paramref name="array"/>。</summary>
            <typeparam name="T">需要添加的项类型。</typeparam>
            <param name="array">需要添加项的数组。</param>
            <param name="items">需要添加的项。</param>
            <returns>返回修改后的新数组（源数据也随之改变）。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AreEqual``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>比较两个 <see cref="T:System.Collections.Generic.IList`1"/> 的数据是否一致。</summary>
            <typeparam name="T">需要比较的数据类型。</typeparam>
            <param name="source">第一组数据。</param>
            <param name="target">另一组数据。</param>
            <returns>两组数据相同时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AreEqual``1(``0[],``0[])">
            <summary>比较两个数组的内容是否一致。</summary>
            <typeparam name="T">需要比较的数据类型。</typeparam>
            <param name="source">第一组数据。</param>
            <param name="target">另一组数据。</param>
            <returns>两组数据相同时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.AreEqual(System.Byte[],System.Byte[])">
            <summary>比较两个字节数组的内容是否一致。</summary>
            <param name="source">第一组数据。</param>
            <param name="target">另一组数据。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.TrimOrPad``1(``0[],System.Int32)">
            <summary>将 <paramref name="source"/> 填充或截取为指定的长度。如长度不足，在末尾补上 default(T)。</summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="source">需要填充或截取的数组。</param>
            <param name="length">目标长度。</param>
            <returns>截取或填充后的新数组。</returns>
            <remarks>此方法总是返回新的数组，即使源数组的长度和 <paramref name="length"/> 相同。</remarks>
        </member>
        <member name="M:AppHelpers.CollectionHelper.TrimOrPad``1(``0[],System.Int32,``0)">
            <summary>将 <paramref name="source"/> 填充或截取为指定的长度。如长度不足，在末尾补上 <paramref name="paddingItem"/>。</summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="source">需要填充或截取的数组。</param>
            <param name="length">目标长度。</param>
            <param name="paddingItem">源数组长度不足时的填充项。</param>
            <returns>截取或填充后的新数组。</returns>
            <remarks>此方法总是返回新的数组，即使源数组的长度和 <paramref name="length"/> 相同。</remarks>
        </member>
        <member name="M:AppHelpers.CollectionHelper.TrimOrPadAhead``1(``0[],System.Int32)">
            <summary>将 <paramref name="source"/> 填充或截取为指定的长度。如长度不足，在前面补上 default(T)。</summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="source">需要填充或截取的数组。</param>
            <param name="length">目标长度。</param>
            <returns>截取或填充后的新数组。</returns>
            <remarks>此方法总是返回新的数组，即使源数组的长度和 <paramref name="length"/> 相同。</remarks>
        </member>
        <member name="M:AppHelpers.CollectionHelper.TrimOrPadAhead``1(``0[],System.Int32,``0)">
            <summary>将 <paramref name="source"/> 填充或截取为指定的长度。如长度不足，在前面补上 <paramref name="paddingItem"/>。如长度超出，将前面的部分截除。</summary>
            <typeparam name="T">数组类型。</typeparam>
            <param name="source">需要填充或截取的数组。</param>
            <param name="length">目标长度。</param>
            <param name="paddingItem">源数组长度不足时的填充项。</param>
            <returns>截取或填充后的新数组。</returns>
            <remarks>此方法总是返回新的数组，即使源数组的长度和 <paramref name="length"/> 相同。</remarks>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetFirst``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回 <paramref name="source"/> 中的第一项。如集合为空，返回默认值。</summary>
            <typeparam name="TItem">返回项的类型。</typeparam>
            <param name="source">包含项的 <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns><paramref name="source"/> 中的第一个项目，如不包含任何项目，则返回该类型的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetFirst``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>返回 <paramref name="source"/> 中的第一项。如集合为空，返回默认值。</summary>
            <typeparam name="TItem">返回项的类型。</typeparam>
            <param name="source">包含项的 <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="predicate">用于测试每个元素是否满足条件的委托。</param>
            <returns><paramref name="source"/> 中的第一个项目，如不包含任何项目，则返回该类型的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>返回 <paramref name="source"/> 中的最后一项。如集合为空，返回默认值。</summary>
            <typeparam name="TItem">返回项的类型。</typeparam>
            <param name="source">包含项的 <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns><paramref name="source"/> 中的最后一个项目，如不包含任何项目，则返回该类型的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetLast``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>返回 <paramref name="source"/> 中的最后一项。如集合为空，返回默认值。</summary>
            <typeparam name="TItem">返回项的类型。</typeparam>
            <param name="source">包含项的 <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="predicate">用于测试每个元素是否满足条件的委托。</param>
            <returns><paramref name="source"/> 中的最后一个项目，如不包含任何项目，则返回该类型的默认值。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetLast``1(``0[],System.Int32)">
            <summary>获取 <paramref name="source"/> 最后 <paramref name="count"/> 个项。</summary>
            <typeparam name="TItem">数组项的类型。</typeparam>
            <param name="source">包含待获取项的数组。</param>
            <param name="count">需要获取项的数量。</param>
            <returns>最后的部分。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Concat``1(``0[][])">
            <summary>将多个数组的内容串联为一个数组。</summary>
            <typeparam name="TItem">数组项的类型。</typeparam>
            <param name="source">需要串联的数组。</param>
            <returns>包含 <paramref name="source"/> 所有项的新数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Concat``1(``0[],``0[])">
            <summary>将数组和多个项的内容串联为一个数组。</summary>
            <typeparam name="TItem">数组项的类型。</typeparam>
            <param name="source">需要串联的数组。</param>
            <param name="items">需要附加的项。</param>
            <returns>
            <para>返回 <paramref name="source"/> 和 <paramref name="items"/> 串联后的新数组副本。</para>
            <para>如 <paramref name="source"/> 不包含任何项，则返回 <paramref name="items"/>，不会复制 <paramref name="items"/> 的副本；如 <paramref name="items"/> 不包含任何项，则返回 <paramref name="source"/>，不会复制 <paramref name="source"/> 的副本。</para>
            <para>如两者都为空，则返回一个 0 长度的 <typeparamref name="TItem"/> 数组。</para>
            </returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Concat``1(System.Collections.Generic.IEnumerable{``0[]})">
            <summary>将多个数组的内容串联为一个数组。</summary>
            <typeparam name="TItem">数组项的类型。</typeparam>
            <param name="source">需要串联的数组。</param>
            <returns>包含 <paramref name="source"/> 所有项的新数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Join``1(``0,``0[][])">
            <summary>将多个数组的内容串联为一个数组，数组之间插入 <paramref name="separator"/>。</summary>
            <typeparam name="TItem">数组项的类型。</typeparam>
            <param name="source">需要串联的数组。</param>
            <param name="separator">在串联数组项中间的分隔项。</param>
            <returns>包含 <paramref name="source"/> 所有项的新数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Join``1(System.Collections.Generic.IEnumerable{``0[]},``0)">
            <summary>将多个数组的内容串联为一个数组，数组之间插入 <paramref name="separator"/>。</summary>
            <typeparam name="TItem">数组项的类型。</typeparam>
            <param name="source">需要串联的数组。</param>
            <param name="separator">在串联数组项中间的分隔项。</param>
            <returns>包含 <paramref name="source"/> 所有项的新数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.FindAll``1(``0[],System.Predicate{``0})">
            <summary>在数组中查找匹配条件的项。</summary>
            <typeparam name="TItem">项类型。</typeparam>
            <param name="source">需要筛选项的数组。</param>
            <param name="match">筛选条件。</param>
            <returns>符合筛选条件的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> 为空引用。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.FindAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
            <summary>在 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 中查找匹配条件的项。</summary>
            <typeparam name="TItem">项类型。</typeparam>
            <param name="source">需要筛选项的源数据。</param>
            <param name="match">筛选条件。</param>
            <returns>符合筛选条件的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="match"/> 为空引用。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Take(System.Byte[],System.Int32,System.Int32)">
            <summary>在 <paramref name="array"/> 中提取第 <paramref name="startIndex"/> 开始的 <paramref name="count"/> 项。</summary>
            <param name="array">包含项的数组。</param>
            <param name="startIndex">开始提取项的位置。</param>
            <param name="count">需提取的项数量。</param>
            <returns>包含指定数量项的数组。如项数量不足，则返回开始提取位置到结尾的所有项。如开始提取的位置位于数组结尾以外，或 <paramref name="count"/> 小于 1，或原始数组不包含内容，则返回 0 长度的空数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Take``1(``0[],System.Int32,System.Int32)">
            <summary>在 <paramref name="array"/> 中提取第 <paramref name="startIndex"/> 开始的 <paramref name="count"/> 项。</summary>
            <typeparam name="TItem">项的类型。</typeparam>
            <param name="array">包含项的数组。</param>
            <param name="startIndex">开始提取项的位置。</param>
            <param name="count">需提取的项数量。</param>
            <returns>包含指定数量项的数组。如项数量不足，则返回开始提取位置到结尾的所有项。如开始提取的位置位于数组结尾以外，或 <paramref name="count"/> 小于 1，或原始数组不包含内容，则返回 0 长度的空数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Take``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32)">
            <summary>在 <paramref name="collection"/> 中提取第 <paramref name="startIndex"/> 开始的 <paramref name="count"/> 项。</summary>
            <typeparam name="TItem">项的类型。</typeparam>
            <param name="collection">包含项的集合。</param>
            <param name="startIndex">开始提取项的位置。</param>
            <param name="count">需提取的项数量。</param>
            <returns>包含指定数量项的数组。如项数量不足，则返回开始提取位置到结尾的所有项。如开始提取的位置位于数组结尾以外，或 <paramref name="count"/> 小于 1，或原始数组不包含内容，则返回 0 长度的空数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>将数组转换为另一个类型构成的数组。</summary>
            <typeparam name="TInput">输入项类型。</typeparam>
            <typeparam name="TOutput">输出项类型。</typeparam>
            <param name="source">需要转换项的数组。</param>
            <param name="converter">转换委托。</param>
            <returns>转换类型后的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> 为空引用。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>将可枚举类型转换为另一种类型。与 <see cref="M:AppHelpers.CollectionHelper.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})"/> 不同，此方法只有在实际枚举时才执行转换。</summary>
            <typeparam name="TInput">原始枚举的类型。</typeparam>
            <typeparam name="TOutput">新枚举的类型。</typeparam>
            <param name="source">源数据集合。</param>
            <param name="converter">用于转换数据项的转换委托。</param>
            <returns>每次迭代调用 <paramref name="converter"/> 转换原始数据的可枚举类型。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> 为空引用。</exception>
            <seealso cref="M:AppHelpers.CollectionHelper.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})"/>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 转换为另一个类型构成的列表。</summary>
            <typeparam name="TInput">输入项类型。</typeparam>
            <typeparam name="TOutput">输出项类型。</typeparam>
            <param name="source">需要转换项的数组。</param>
            <param name="converter">转换委托。</param>
            <returns>转换类型后的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> 为空引用。</exception>
            <seealso cref="M:AppHelpers.CollectionHelper.Convert``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})"/>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ConvertAll``2(System.Collections.IList,System.Converter{``0,``1})">
            <summary>将 <see cref="T:System.Collections.IList"/> 转换为另一个类型构成的强类型列表。</summary>
            <typeparam name="TInput">输入项类型。</typeparam>
            <typeparam name="TOutput">输出项类型。</typeparam>
            <param name="source">需要转换项的数组。</param>
            <param name="converter">转换委托。</param>
            <returns>转换类型后的列表。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> 为空引用。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ConvertAll``2(``0[],System.Func{``0,System.Int32,``1})">
            <summary>将数组转换为另一个类型构成的数组。</summary>
            <typeparam name="TInput">输入项类型。</typeparam>
            <typeparam name="TOutput">输出项类型。</typeparam>
            <param name="source">需要转换项的数组。</param>
            <param name="converter">转换委托，第 1 个参数是输入项，第 2 个参数是项在源数组的位置（首项为 0），返回输出项。</param>
            <returns>转换类型后的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> 为空引用。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>将数组转换为另一个类型构成的数组。</summary>
            <typeparam name="TInput">输入项类型。</typeparam>
            <typeparam name="TOutput">输出项类型。</typeparam>
            <param name="source">需要转换项的数组。</param>
            <param name="converter">转换委托，第 1 个参数是输入项，第 2 个参数是项在源数组的位置（首项为 0），返回输出项。</param>
            <returns>转换类型后的数组。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="converter"/> 为空引用。</exception>
        </member>
        <member name="M:AppHelpers.CollectionHelper.PeekOrDefault``1(System.Collections.Generic.Stack{``0})">
            <summary>尝试返回堆栈顶部的对象但不将其移除。在堆栈为空时，返回默认值。</summary>
            <typeparam name="TItem">堆栈项的类型。</typeparam>
            <param name="stack">包含对象的堆栈。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.PopOrDefault``1(System.Collections.Generic.Stack{``0})">
            <summary>尝试弹出堆栈顶部的对象。在堆栈为空时，返回默认值。</summary>
            <typeparam name="TItem">堆栈项的类型。</typeparam>
            <param name="stack">包含对象的堆栈。</param>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ReverseSort``1(``0[])">
            <summary>反向排序数组。</summary>
            <typeparam name="T">支持 <see cref="T:System.Collections.Generic.IComparer`1"/> 的类型。</typeparam>
            <param name="array">需要排序的数组。</param>
            <returns>返回排序后的源数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ReverseSort``1(System.Collections.Generic.List{``0})">
            <summary>反向排序数组。</summary>
            <typeparam name="TItem">支持 <see cref="T:System.Collections.Generic.IComparer`1"/> 的类型。</typeparam>
            <param name="array">需要排序的数组。</param>
            <returns>返回排序后的源数组。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetArrayComparer``1">
            <summary>获取用于比较数组里各项目是否相等的 <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> 实例。</summary>
            <typeparam name="TItem">数组的项目类型。</typeparam>
            <returns>返回用于比较数组里各项是否相等的比较器。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.GetReverseComparer``1">
            <summary>获取反向排序的 <see cref="T:System.Collections.Generic.IComparer`1"/>。</summary>
            <typeparam name="TItem">支持 <see cref="T:System.Collections.Generic.IComparer`1"/> 的类型。</typeparam>
            <returns>反向排序的 <see cref="T:System.Collections.Generic.IComparer`1"/>。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 串联成字符串。</summary>
            <typeparam name="TItem">需串联的值类型。</typeparam>
            <param name="values">需串联的值集合。</param>
            <param name="separator">串联分隔符。</param>
            <returns>串联后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 串联成字符串。</summary>
            <typeparam name="TItem">需串联的值类型。</typeparam>
            <param name="values">需串联的值集合。</param>
            <param name="separator">串联分隔符。</param>
            <param name="ignoreEmpty">是否忽略空字符串。</param>
            <returns>串联后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ToString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean,System.Converter{``0,System.String})">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 串联成字符串。</summary>
            <typeparam name="TItem">需串联的值类型。</typeparam>
            <param name="values">需串联的值集合。</param>
            <param name="separator">串联分隔符。</param>
            <param name="ignoreEmpty">是否忽略空字符串。</param>
            <param name="toStringConverter">将对象转换为字符串的委托。</param>
            <returns>串联后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ToString(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 串联成字符串。</summary>
            <param name="values">需串联的值集合。</param>
            <param name="separator">串联分隔符。</param>
            <returns>串联后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.CollectionHelper.ToString(System.Collections.Generic.IEnumerable{System.String},System.String,System.Boolean)">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 串联成字符串。</summary>
            <param name="values">需串联的值集合。</param>
            <param name="separator">串联分隔符。</param>
            <param name="ignoreEmpty">是否忽略空字符串。</param>
            <returns>串联后的字符串。</returns>
        </member>
        <member name="T:AppHelpers.DiagnosticsHelper">
            <summary>帮助进行诊断调试的帮助类。</summary>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.Annotate``1(``0,System.Object)">
            <summary>
            向 <see cref="P:System.Exception.Data"/> 附加名称为 "@" 的数据。
            </summary>
            <param name="exception">需要附加数据的 <see cref="T:System.Exception"/>。</param>
            <param name="value">数据的值。</param>
            <returns>返回原 <paramref name="exception"/>。</returns>
            <seealso cref="M:AppHelpers.DiagnosticsHelper.SetData``1(``0,System.Object,System.Object)"/>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.BreakIf(System.Boolean)">
            <summary>当 <paramref name="condition"/> 的条件成立时，中断调试器。</summary>
            <param name="condition">中断调试器的条件。</param>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.GetCompleteMessage(System.Exception)">
            <summary>获取传入异常及其内部异常的所有消息。</summary>
            <param name="exception">需要获取消息的异常。</param>
            <returns>将传入异常及其内部异常的所有消息串联在一起的字符串。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.GetCompleteMessage(System.Exception,System.Boolean)">
            <summary>获取传入异常及其内部异常的所有消息。</summary>
            <param name="exception">需要获取消息的异常。</param>
            <param name="additionalData">是否包含异常 <see cref="P:System.Exception.Data"/> 和常见运行时异常附加的信息。</param>
            <returns>将传入异常及其内部异常的所有消息串联在一起的字符串。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.GetMethodCaller(System.Boolean)">
            <summary>获取调用当前方法的方法名称。注意：此方法对性能可能造成影响。</summary>
            <param name="withArguments">是否包含方法参数。</param>
            <returns>调用当前方法的全名。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.GetStackTrace(System.Boolean,System.Boolean,System.Boolean)">
            <summary>获取调用方法的堆栈跟踪。注意：此方法对性能可能造成影响。</summary>
            <param name="withFileInfo">是否包含源代码文件名、行号和列号。</param>
            <param name="withArguments">是否包含方法参数。</param>
            <param name="withSystemStack">是否包含系统名称空间（System、Microsoft）的堆栈消息。</param>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.IsCritical(System.Exception)">
            <summary>返回异常是否为 <see cref="T:System.OutOfMemoryException"/>、<see cref="T:System.StackOverflowException"/> 或 <see cref="T:System.Threading.ThreadAbortException"/> 这三种不宜吞食的异常。</summary>
            <param name="exception">需检查的异常。</param>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.Print(System.Exception,System.Boolean,System.Boolean,System.Boolean)">
            <summary>详细输出异常的消息和堆栈，可选剔除系统名称空间的方法调用。</summary>
            <param name="exception">需要输出消息和堆栈的异常。</param>
            <param name="withMethodCalls">是否包含方法调用名称。</param>
            <param name="withFileInfo">是否包含出错代码的名称、行数。</param>
            <param name="withSystemStack">是否包含系统名称空间（System、Microsoft）的堆栈消息。</param>
            <returns>简化的异常文本表示形式。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.Print(System.Exception)">
            <summary>详细输出异常的消息和堆栈，剔除系统名称空间的方法调用。</summary>
            <param name="exception">需要输出消息和堆栈的异常。</param>
            <returns>简化的异常文本表示形式。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.PrintThreads">
            <summary>输出当前的线程信息，包含线程 ID、启动时间、占用处理器时间、线程状态、等待原因。</summary>
            <returns>线程的文本表示形式。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.PrintThreads(System.Diagnostics.Process)">
            <summary>输出进程的线程信息，包含线程 ID、启动时间、占用处理器时间、线程状态、等待原因。</summary>
            <param name="process">需要输出信息的进程。</param>
            <returns>线程的文本表示形式。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.SetData``1(``0,System.Object,System.Object)">
            <summary>
            向 <see cref="P:System.Exception.Data"/> 设置数据。
            </summary>
            <param name="exception">需要设置数据的 <see cref="T:System.Exception"/>。</param>
            <param name="name">数据的名称。</param>
            <param name="value">数据的值。</param>
            <returns>返回原 <paramref name="exception"/>。</returns>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.SetInstanceNameAsProcess(System.Diagnostics.PerformanceCounter)">
            <summary>将 <see cref="T:System.Diagnostics.PerformanceCounter"/> 的 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName"/> 设置为与当前进程匹配。</summary>
            <param name="counter">需设置 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName"/> 的 <see cref="T:System.Diagnostics.PerformanceCounter"/>。</param>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.SetInstanceNameAsProcess(System.Diagnostics.PerformanceCounter,System.Int32)">
            <summary>将 <see cref="T:System.Diagnostics.PerformanceCounter"/> 的 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName"/> 设置为与指定进程 <paramref name="processId"/> 匹配。</summary>
            <param name="counter">需设置 <see cref="P:System.Diagnostics.PerformanceCounter.InstanceName"/> 的 <see cref="T:System.Diagnostics.PerformanceCounter"/>。</param>
            <param name="processId">系统的进程 ID。</param>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.Time(System.Action,System.Int32)">
            <summary>
            标记指定的动作重复执行 <paramref name="iteration"/> 次并在控制台输出耗用的时间。
            </summary>
            <param name="iteration">动作的执行次数。</param>
            <param name="action">需要执行的动作。</param>
            <exception cref="T:System.ArgumentNullException">动作为空。</exception>
        </member>
        <member name="M:AppHelpers.DiagnosticsHelper.Time(System.Action,System.Int32,System.String)">
            <summary>
            重复执行指定的动作并在控制台输出耗用的时间。
            </summary>
            <param name="iteration">动作的执行次数。</param>
            <param name="action">需要执行的动作。</param>
            <param name="name">动作的名称。</param>
            <exception cref="T:System.ArgumentNullException">动作为空。</exception>
        </member>
        <member name="M:AppHelpers.Emit.EmitHelper.Box(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>将堆栈上的值装箱。如原始类型已是 <see cref="T:System.Object"/> 类型或是引用类型，则不生成任何代码。</summary>
            <param name="il"><see cref="T:System.Reflection.Emit.ILGenerator"/> 实例。</param>
            <param name="type">装箱前的值类型。</param>
        </member>
        <member name="M:AppHelpers.Emit.EmitHelper.Unbox(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>将堆栈上的对象拆箱。如目标类型是 <see cref="T:System.Object"/> 类型，则不生成任何代码。</summary>
            <param name="il"><see cref="T:System.Reflection.Emit.ILGenerator"/> 实例。</param>
            <param name="type">拆箱后的类型。</param>
        </member>
        <member name="M:AppHelpers.Emit.EmitHelper.IsSettable(System.Reflection.MemberInfo)">
            <summary>返回成员是否可设置的。字段：非只读或常量；属性：具有公共的 set 访问器；方法：具有 1 个参数，无返回类型。</summary>
            <param name="member">需检查是否可设置的成员。</param>
            <returns>对于符合上述条件的成员返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.Emit.EmitPatternHelper.ForEach(System.Reflection.Emit.ILGenerator,System.Type,System.Action{System.Reflection.Emit.ILGenerator},System.Action{System.Reflection.Emit.ILGenerator,System.Action{System.Reflection.Emit.ILGenerator}})">
            <summary>生成 foreach (var item in IEnumerable{enumerableType}) 的代码。</summary>
            <param name="il"><see cref="T:System.Reflection.Emit.ILGenerator"/> 实例。</param>
            <param name="enumerableType">枚举项的类型。</param>
            <param name="loadEnumerable">加载枚举项。</param>
            <param name="loopAction">循环过程委托，在循环内调用 <paramref name="loopAction"/> 的第二个参数(委托)可生成读取枚举值的代码。</param>
        </member>
        <member name="M:AppHelpers.Emit.EmitPatternHelper.Convert``2(System.Reflection.Emit.ILGenerator)">
            <summary>生成转换 <typeparamref name="TSource"/> 到 <typeparamref name="TTarget"/> 类型的代码。</summary>
            <typeparam name="TSource">需转换的原始类型。</typeparam>
            <typeparam name="TTarget">转换的目标类型。</typeparam>
            <param name="il"><see cref="T:System.Reflection.Emit.ILGenerator"/> 实例。</param>
            <seealso cref="M:AppHelpers.Emit.EmitPatternHelper.Convert(System.Reflection.Emit.ILGenerator,System.Type,System.Type)"/>
        </member>
        <member name="M:AppHelpers.Emit.EmitPatternHelper.Convert(System.Reflection.Emit.ILGenerator,System.Type,System.Type)">
            <summary>生成转换 <paramref name="source"/> 到 <paramref name="target"/> 类型的代码。调用此代码前，IL 计算堆栈上应放置 <paramref name="source"/> 类的实例对象。此方法支持各种数值之间转换、支持实现 <see cref="T:System.IConvertible"/> 接口的类转换、<see cref="T:System.Nullable`1"/> 泛型类转换。当目标为集合类，而源为与集合类元素类型相通的类型时，可生成新集合类并添加源对象到该集合类的代码。</summary>
            <param name="il"><see cref="T:System.Reflection.Emit.ILGenerator"/> 实例。</param>
            <param name="source">需转换的原始类型。</param>
            <param name="target">转换的目标类型。</param>
        </member>
        <member name="M:AppHelpers.Emit.EmitPatternHelper.GetSize(System.Type)">
            <summary>获取值类型占用的字节数（不计填充）；对于引用类型，返回引用指针的字节数。</summary>
            <param name="type">需要获取字节计数的值类型。</param>
            <returns>类型占用的字节数。</returns>
        </member>
        <member name="M:AppHelpers.Emit.EmitPatternHelper.AddInstanceToCollection(System.Reflection.Emit.ILGenerator,System.Type,System.Type,System.Type,AppHelpers.MethodContext)">
            <summary>Creates a new collection and adds an instance on the evaluation stack to it.</summary>
        </member>
        <member name="T:AppHelpers.AccessorHelper">
            <summary>
            <para>用于生成以字段映射方式读取属性数据的访问器帮助类。</para>
            <para>可使用 <see cref="T:AppHelpers.DbNameAttribute"/>、<see cref="T:AppHelpers.DbPropertyAttribute"/> 特性控制生成的访问器字段名称，使用 <see cref="T:AppHelpers.DbIgnoreAttribute"/> 特性忽略标记的属性。</para>
            <para>枚举字段类型将转换为对应的数值类型。</para>
            </summary>
            <seealso cref="T:AppHelpers.DbHelper"/>
        </member>
        <member name="M:AppHelpers.AccessorHelper.GetAccessor``1">
            <summary>获取按字段位置读取数据的 <see cref="T:AppHelpers.EntityAccessor`1"/> 实例。</summary>
            <typeparam name="TEntity">数据类型。</typeparam>
            <returns>可读取字段的 <see cref="T:AppHelpers.EntityAccessor`1"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.AccessorHelper.GetAccessor``1(``0)">
            <summary>获取按字段位置读取数据的 <see cref="T:AppHelpers.EntityAccessor`1"/> 实例。</summary>
            <typeparam name="TEntity">数据类型。</typeparam>
            <param name="entity">初始化读取器所用的数据实例。</param>
            <returns>可读取字段的 <see cref="T:AppHelpers.EntityAccessor`1"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.AccessorHelper.AsDataReader``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>获取以 <see cref="T:System.Data.Common.DbDataReader"/> 方式读取 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 集合实例的读取器。</summary>
            <typeparam name="TEntity">集合的数据类型。</typeparam>
            <param name="entities">需要读取的集合。</param>
            <returns>用于读取集合的 <see cref="T:System.Data.Common.DbDataReader"/> 实例。</returns>
            <remarks>返回 <see cref="T:System.Data.Common.DbDataReader"/> 的列顺序可由 <typeparamref name="TEntity"/> 上的 <see cref="T:AppHelpers.DbFieldAttribute"/> 或 <see cref="T:AppHelpers.DbPropertyAttribute"/> 指定。</remarks>
        </member>
        <member name="M:AppHelpers.AccessorHelper.AsDataReader``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action)">
            <summary>获取以 <see cref="T:System.Data.Common.DbDataReader"/> 方式读取 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 集合实例的读取器。</summary>
            <typeparam name="TEntity">集合的数据类型。</typeparam>
            <param name="entities">需要读取的集合。</param>
            <param name="beforeReadItemProcessor">在读取数据项之前执行的处理程序。</param>
            <param name="afterReadProcessor">在关闭数据集前执行的处理程序。</param>
            <returns>用于读取集合的 <see cref="T:System.Data.Common.DbDataReader"/> 实例。</returns>
            <remarks>返回 <see cref="T:System.Data.Common.DbDataReader"/> 的列顺序可由 <typeparamref name="TEntity"/> 上的 <see cref="T:AppHelpers.DbFieldAttribute"/> 或 <see cref="T:AppHelpers.DbPropertyAttribute"/> 指定。</remarks>
        </member>
        <member name="M:AppHelpers.AccessorHelper.SaveAssembly(System.Type[])">
            <summary>生成并保存指定类型的序列器程序集。此方法可用于预生成序列器程序集，或检查所生成的程序集是否符合要求。此方法不保证在多线程环境下能正常工作，应避免在生产环境中调用此方法。</summary>
            <param name="types">需要生成序列器的类型。此参数为空时，生成一个包含所有已序列化类型的程序集。</param>
        </member>
        <member name="M:AppHelpers.AccessorHelper.SaveAssembly(System.String,System.Reflection.StrongNameKeyPair,System.Type[])">
            <summary>生成并保存指定类型的序列器程序集。此方法可用于预生成序列器程序集，或检查所生成的程序集是否符合要求。此方法不保证在多线程环境下能正常工作，应避免在生产环境中调用此方法。</summary>
            <param name="assemblyName">
            指定动态程序集的名称。在引用此程序集的程序集中，可使用 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 特性和本参数指定的程序集名称来标记该程序集，使序列器生成的方法可访问该程序集的内部类型。
            </param>
            <param name="keyPair">用于签名动态程序集的 <see cref="T:System.Reflection.StrongNameKeyPair"/>。</param>
            <param name="types">需要生成序列器的类型。此参数为空时，生成一个包含所有已序列化类型的程序集。</param>
        </member>
        <member name="M:AppHelpers.AccessorHelper.ToJsonString``1(AppHelpers.EntityAccessor{``0})">
            <summary>返回当前 <see cref="T:AppHelpers.EntityAccessor`1"/> 的 JSON 对象形式。</summary>
        </member>
        <member name="M:AppHelpers.AccessorHelper.AccessTargetField(System.Reflection.Emit.ILGenerator,AppHelpers.AccessPath,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>根据访问路径定位路径指向的成员；如路径中出现空引用，则返回执行 <paramref name="nomadAction"/>。</summary>
            <param name="il">生成代码所用的 <see cref="T:System.Reflection.Emit.ILGenerator"/>。</param>
            <param name="path">访问路径。</param>
            <param name="nomadAction">访问路径中遇到空引用时的动作。</param>
            <exception cref="T:System.NotSupportedException">访问路径中出现值类型。</exception>
        </member>
        <member name="M:AppHelpers.AccessorHelper.BuildTargetField(System.Reflection.Emit.ILGenerator,AppHelpers.MethodContext,AppHelpers.AccessPath,System.Action{System.Reflection.Emit.ILGenerator})">
            <summary>根据访问路径定位路径指向的成员；如路径中出现空引用，则尝试生成对应的值，否则执行 <paramref name="nomadAction"/>。</summary>
            <param name="il">生成代码所用的 <see cref="T:System.Reflection.Emit.ILGenerator"/>。</param>
            <param name="context">装载共用变量的 <see cref="T:AppHelpers.MethodContext"/>。</param>
            <param name="path">访问路径。</param>
            <param name="nomadAction">访问路径中遇到空引用时的动作。</param>
            <exception cref="T:System.NotSupportedException">访问路径中出现值类型。</exception>
        </member>
        <member name="M:AppHelpers.AccessorHelper.LoadEntityField(System.Reflection.Emit.ILGenerator,System.Reflection.Emit.FieldBuilder)">
            <summary>Loads the entity field, for both dynamic assembly and dynamic methods</summary>
            <param name="il">The il generator.</param>
            <param name="entityField">The entity field.</param>
        </member>
        <member name="F:AppHelpers.AccessPath.FieldOrder">
            <summary>访问路径的列顺序号。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.BaseMember">
            <summary>访问路径指向的第一个成员。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.TargetMember">
            <summary>访问路径指向的最后一个成员。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.FieldName">
            <summary>访问路径生成的字段名。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.PathMembers">
            <summary>访问路径经历的各个成员。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.IsPublic">
            <summary>访问路径经历的各个成员是否均为公共可访问。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.IsWritable">
            <summary>访问路径指向的成员是否可写入。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.IsEnumerable">
            <summary>访问路径指向的成员是否为枚举实例。</summary>
        </member>
        <member name="F:AppHelpers.AccessPath.GetterConverter">
            <summary>访问的数据转换程序。</summary>
        </member>
        <member name="T:AppHelpers.DbTypeOptions">
            <summary>在 <see cref="T:AppHelpers.DbHelper"/> 绑定 SQL 参数数据时，将 .NET 类型映射为 SQL 参数类型的选项。选项可按位组合。</summary>
            <seealso cref="M:AppHelpers.DbHelper.SetOptions``1(AppHelpers.DbTypeOptions)"/>
        </member>
        <member name="F:AppHelpers.DbTypeOptions.None">
            <summary>采用默认设置。</summary>
        </member>
        <member name="F:AppHelpers.DbTypeOptions.PreferDateTimeOverDateTime2">
            <summary>使用 <see cref="F:System.Data.DbType.DateTime"/> 而不是范围更广的 <see cref="F:System.Data.DbType.DateTime2"/> 作为 <see cref="T:System.DateTime"/> 结构的绑定类型（通常用于兼容 SQL Server 2005 及之前的版本）。</summary>
        </member>
        <member name="F:AppHelpers.DbTypeOptions.UseTimeForTimeSpan">
            <summary>使用 <see cref="F:System.Data.DbType.Time"/> 表示 <see cref="T:System.TimeSpan"/> 类型的数据。在 SQL Server Client 实现中，<see cref="F:System.Data.DbType.Time"/> 被错误地映射成 <see cref="T:System.DateTime"/> 类型，如需传入 SQL 的时间类型，需使用 <see cref="F:System.Data.SqlDbType.Time"/>。默认情况下 <see cref="T:AppHelpers.DbHelper"/> 生成检测代码绕过此错误。如所使用的客户端不存在上述错误，可启用此选项忽略检测代码以轻微提高性能。</summary>
        </member>
        <member name="T:AppHelpers.DbHelper">
            <summary>
            <para>用于数据库连接及执行数据库命令、映射为实体数据的类。</para>
            <para>可使用 <see cref="T:AppHelpers.DbNameAttribute"/>、<see cref="T:AppHelpers.DbPropertyAttribute"/> 特性控制生成的访问器字段名称，使用 <see cref="T:AppHelpers.DbIgnoreAttribute"/> 特性忽略标记的属性。</para>
            <para>枚举字段类型将转换为对应的数值类型。</para>
            </summary>
            <seealso cref="T:AppHelpers.SqlHelper"/>
            <seealso cref="T:AppHelpers.AccessorHelper"/>
        </member>
        <member name="M:AppHelpers.DbHelper.SetOptions``1(AppHelpers.DbTypeOptions)">
            <summary>为特定类型 <typeparamref name="TEntity"/> 指定 SQL 参数的类型映射选项。</summary>
            <typeparam name="TEntity">需设置数据类型映射方式的类。</typeparam>
            <param name="options">数据类型映射选项。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Connect``1(``0)">
            <summary>尝试打开指定的数据库连接。如数据库连接状态为关闭，则尝试将其打开；否则不执行任何操作。</summary>
            <typeparam name="TConnection">数据库连接类型。</typeparam>
            <param name="connection">需要打开的数据库连接。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.GetConnection(System.String)">
            <summary>从应用程序配置文件的 connectionStrings/add 或 app/db 元素获取指定名称的数据库连接。如找不到指定配置，返回 null。</summary>
            <param name="configName">配置中的键名称。</param>
            <returns>使用配置中 connectionString 和 providerName 创建的数据库连接。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.GetConnection(System.String,System.Converter{System.String,System.String})">
            <summary>从应用程序配置文件的 connectionStrings/add 或 app/db 元素获取指定名称的数据库连接。如找不到指定配置，返回 null。</summary>
            <param name="configName">配置中的键名称。</param>
            <param name="decoder">用于解密配置中已加密连接字符串的方法。</param>
            <returns>使用配置中 connectionString 和 providerName 创建的数据库连接。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.GetConnection``1(System.String)">
            <summary>从应用程序配置文件的 connectionStrings/add 或 app/db 元素获取指定名称的强类型数据库连接。如找不到指定配置，返回 null。</summary>
            <param name="configName">配置中的键名称。</param>
            <typeparam name="TConnection">数据库连接的类型。</typeparam>
            <returns>使用配置中 connectionString 创建的数据库连接。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.GetConnection``1(System.String,System.Converter{System.String,System.String})">
            <summary>从应用程序配置文件的 connectionStrings/add 或 app/db 元素获取指定名称的强类型数据库连接。如找不到指定配置，返回 null。</summary>
            <param name="configName">配置中的键名称。</param>
            <param name="decoder">用于解密配置中已加密连接字符串的方法。</param>
            <typeparam name="TConnection">数据库连接的类型。</typeparam>
            <returns>使用配置中 connectionString 创建的数据库连接。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.GetConnection(System.String,System.String)">
            <summary>创建指定连接字符串的数据库连接。</summary>
            <param name="connectionString">连接字符串。</param>
            <param name="providerName">用于创建字符串的数据库客户端提供器名称。值为 null 时，默认为 SQL Server。</param>
            <returns>创建的数据库连接。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.OpenTransaction``1(``0)">
            <summary>为连接开始事务，如连接已关闭，则先打开连接。</summary>
            <typeparam name="TConnection">连接类型。</typeparam>
            <param name="connection">需要开始事务的连接。</param>
            <returns>开始的事务。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.OpenTransaction``1(``0,System.Data.IsolationLevel)">
            <summary>为连接开始事务，如连接已关闭，则先打开连接。</summary>
            <typeparam name="TConnection">连接类型。</typeparam>
            <param name="connection">需要开始事务的连接。</param>
            <param name="isolationLevel">事务的隔离级别。</param>
            <returns>开始的事务。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand(System.Data.IDbConnection,System.String)">
            <summary>从 <see cref="T:System.Data.IDbConnection"/> 创建具有指定命令文本的 <see cref="T:System.Data.IDbCommand"/>。</summary>
            <param name="connection">用于创建 <see cref="T:System.Data.IDbCommand"/> 的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">命令文本。</param>
            <returns>新建的 <see cref="T:System.Data.IDbCommand"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand(System.Data.IDbConnection,System.String,System.Boolean)">
            <summary>从 <see cref="T:System.Data.IDbConnection"/> 创建具有指定命令文本的 <see cref="T:System.Data.IDbCommand"/>。</summary>
            <param name="connection">用于创建 <see cref="T:System.Data.IDbCommand"/> 的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">命令文本。</param>
            <param name="isStoredProcedure">指定命令是否为存储过程。</param>
            <returns>新建的 <see cref="T:System.Data.IDbCommand"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand(System.Data.IDbTransaction,System.String)">
            <summary>从 <see cref="T:System.Data.IDbTransaction"/> 创建具有指定命令文本的 <see cref="T:System.Data.IDbCommand"/>。</summary>
            <param name="transaction">用于创建 <see cref="T:System.Data.IDbCommand"/> 的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">命令文本。</param>
            <returns>新建的 <see cref="T:System.Data.IDbCommand"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand(System.Data.IDbTransaction,System.String,System.Boolean)">
            <summary>从 <see cref="T:System.Data.IDbTransaction"/> 创建具有指定命令文本的 <see cref="T:System.Data.IDbCommand"/>。</summary>
            <param name="transaction">用于创建 <see cref="T:System.Data.IDbCommand"/> 的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">命令文本。</param>
            <param name="isStoredProcedure">指定命令是否为存储过程。</param>
            <returns>新建的 <see cref="T:System.Data.IDbCommand"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.UseDatabase``1(``0,System.String)">
            <summary>连接数据库，将 <paramref name="connection"/> 切换到指定的数据库。</summary>
            <typeparam name="TConnection">连接类型。</typeparam>
            <param name="connection">需要切换数据库的数据库连接。</param>
            <param name="databaseName">数据库的名称。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Skip``1(``0,System.Int32)">
            <summary>丢弃 <paramref name="dataReader"/> 前面 <paramref name="recordCount"/> 条记录。</summary>
            <typeparam name="TDataReader">数据读取器的类型。</typeparam>
            <param name="dataReader">需要丢弃记录的 <see cref="T:System.Data.IDataReader"/> 实例。</param>
            <param name="recordCount">需要丢弃的记录数量。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.NewMsSqlSequentialId">
            <summary>创建用于 Microsoft SQL Server 的顺序 GUID。</summary>
            <returns>新的 GUID。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.NewMySqlSequentialId">
            <summary>创建用于 MySQL 的顺序 GUID。</summary>
            <returns>新的 GUID。</returns>
        </member>
        <member name="T:AppHelpers.DbHelper.SequentialGuidGenerator">
            <summary>顺序GUID生成器。</summary>
            <remarks>http://www.codeproject.com/Articles/388157/GUIDs-as-fast-primary-keys-under-multiple-database</remarks>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand(System.Data.IDbConnection,System.String,System.Object)">
            <summary>从 SQL 文本创建数据库命令，并附加参数。</summary>
            <param name="connection">用于创建 <see cref="T:System.Data.IDbCommand"/> 的连接。</param>
            <param name="commandText">数据库命令。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <returns>返回 <see cref="T:System.Data.IDbCommand"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand(System.Data.IDbTransaction,System.String,System.Object)">
            <summary>从 SQL 文本创建数据库命令，并附加参数。</summary>
            <param name="transaction">用于创建 <see cref="T:System.Data.IDbCommand"/> 的事务。</param>
            <param name="commandText">数据库命令。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <returns>返回 <see cref="T:System.Data.IDbCommand"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``1(System.Data.IDbConnection,System.String)">
            <summary>执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TResult">集合元素的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``2(System.Data.IDbConnection,System.String,``0)">
            <summary>添加 <typeparamref name="TParameter" /> 类型的参数，执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TParameter">参数的类型。</typeparam>
            <typeparam name="TResult">返回集合元素的类型。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>添加参数，执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TResult">返回集合元素的类型。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectJson``1(System.Data.IDbConnection,System.String,``0)">
            <summary>添加参数，执行指定的 SQL 命令，返回结果的 JSON 文本。</summary>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <typeparam name="TParameter">参数的类型。</typeparam>
            <returns>查询结果集对应的 JSON 文本。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectJson``1(System.Data.IDbConnection,System.String,``0,System.Text.StringBuilder)">
            <summary>添加参数，执行指定的 SQL 命令，将结果的 JSON 文本写入 <paramref name="target"/>。</summary>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <typeparam name="TParameter">参数的类型。</typeparam>
            <param name="target">存放 JSON 文本的 <see cref="T:System.Text.StringBuilder"/>。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectScalar``1(System.Data.IDbConnection,System.String,System.Object)">
            <summary>添加参数，执行指定的 SQL 命令，将查询结果第一行数据的第一个值转换为 <typeparamref name="TResult"/> 的实例并返回。</summary>
            <typeparam name="TResult">返回集合元素的类型。</typeparam>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``1(System.Data.IDbTransaction,System.String)">
            <summary>执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TResult">集合元素的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``2(System.Data.IDbTransaction,System.String,``0)">
            <summary>添加 <typeparamref name="TParameter" /> 类型的参数，执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TParameter">参数的类型。</typeparam>
            <typeparam name="TResult">返回集合元素的类型。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``1(System.Data.IDbTransaction,System.String,System.Object)">
            <summary>添加参数，执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TResult">返回集合元素的类型。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectJson``1(System.Data.IDbTransaction,System.String,``0)">
            <summary>添加参数，执行指定的 SQL 命令，返回结果的 JSON 文本。</summary>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <typeparam name="TParameter">参数的类型。</typeparam>
            <returns>查询结果集对应的 JSON 文本。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectJson``1(System.Data.IDbTransaction,System.String,``0,System.Text.StringBuilder)">
            <summary>添加参数，执行指定的 SQL 命令，将结果的 JSON 文本写入 <paramref name="target"/>。</summary>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <typeparam name="TParameter">参数的类型。</typeparam>
            <param name="target">存放 JSON 文本的 <see cref="T:System.Text.StringBuilder"/>。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectScalar``1(System.Data.IDbTransaction,System.String,System.Object)">
            <summary>添加参数，执行指定的 SQL 命令，将查询结果第一行数据的第一个值转换为 <typeparamref name="TResult"/> 的实例并返回。</summary>
            <typeparam name="TResult">返回集合元素的类型。</typeparam>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update(System.Data.IDbConnection,System.String)">
            <summary>执行指定的 SQL 命令，返回受影响的记录数量。</summary>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update``1(System.Data.IDbConnection,System.String,``0)">
            <summary>添加 <typeparamref name="TParameter" /> 类型的参数，执行指定的 SQL 命令，返回受影响的记录数量。</summary>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update``2(System.Data.IDbConnection,System.String,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>添加 <typeparamref name="TSharedParameter" /> 类型的参数，以及类型为 <typeparamref name="TParameter" /> 的多个参数，批量执行指定的 SQL 命令，返回受影响的记录总数。</summary>
            <param name="connection">用于访问数据库的 <see cref="T:System.Data.IDbConnection"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">多次执行过程的公共参数。</param>
            <param name="parameters">需要逐个传送到数据库执行更新的参数集合。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update(System.Data.IDbTransaction,System.String)">
            <summary>执行指定的 SQL 命令，返回受影响的记录数量。</summary>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update``1(System.Data.IDbTransaction,System.String,``0)">
            <summary>执行指定的 SQL 命令，返回受影响的记录数量。</summary>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update``2(System.Data.IDbTransaction,System.String,``0,System.Collections.Generic.IEnumerable{``1})">
            <summary>添加 <typeparamref name="TSharedParameter" /> 类型的参数，以及类型为 <typeparamref name="TParameter" /> 的多个参数，批量执行指定的 SQL 命令，返回受影响的记录总数。</summary>
            <param name="transaction">用于访问数据库的 <see cref="T:System.Data.IDbTransaction"/>。</param>
            <param name="commandText">需要执行的 SQL 语句。</param>
            <param name="parameter">多次执行过程的公共参数。</param>
            <param name="entities">需要逐个传送到数据库执行更新的参数集合。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，并返回动态类型的集合。注意：动态类型的性能比具体类型的要低，在注重性能的场合下应避免使用此重载方法。</summary>
            <param name="command">需要执行的 SQL 命令。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的动态类型实体集合。</returns>
            <remarks>
            <para>动态类型性能比静态类型的要低，来自于几个方面：</para>
            <para>①访问属性时需要检索属性名称，这比静态类型的属性访问要慢得多；</para>
            <para>②所有值在返回前都需要执行检查，将 DBNull 转换为 null。</para>
            </remarks>
        </member>
        <member name="M:AppHelpers.DbHelper.AddDictionaryParameter``2(``0,System.Collections.Generic.IDictionary{System.String,``1})">
            <summary>将字典项添加为参数。</summary>
            <typeparam name="TDbCommand">实现 <see cref="T:System.Data.IDbCommand"/> 接口的类型。。</typeparam>
            <typeparam name="TParameter">字典项目的值类型。</typeparam>
            <param name="command">需要添加参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="dictionary">包含参数的字典。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.AddOutputParameter``1(``0,System.String,System.Data.DbType)">
            <summary>向 <see cref="T:System.Data.IDbCommand"/> 添加输出参数。</summary>
            <param name="command">需要添加命令参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.AddOutputParameter``1(``0,System.String,System.Data.DbType,System.Int32)">
            <summary>向 <see cref="T:System.Data.IDbCommand"/> 添加输出参数。</summary>
            <param name="command">需要添加命令参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="name">参数名称。</param>
            <param name="dbType">参数类型。</param>
            <param name="size">参数大小。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.AddParameter``1(``0,System.String,System.Object)">
            <summary>向 <see cref="T:System.Data.IDbCommand"/> 添加参数。</summary>
            <param name="command">需要添加命令参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.AddParameter``1(``0,System.String,System.Object,System.Data.ParameterDirection)">
            <summary>向 <see cref="T:System.Data.IDbCommand"/> 添加参数。</summary>
            <param name="command">需要添加命令参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="direction">参数方向。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.AddParameter``1(``0,System.String,System.Object,System.Data.ParameterDirection,System.Data.DbType,System.Int32)">
            <summary>向 <see cref="T:System.Data.IDbCommand"/> 添加参数。</summary>
            <param name="command">需要添加命令参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="name">参数名称。</param>
            <param name="value">参数值。</param>
            <param name="direction">参数方向。</param>
            <param name="dbType">参数类型。</param>
            <param name="size">参数大小。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.AddParameter``2(``0,``1)">
            <summary>向 <see cref="T:System.Data.IDbCommand"/> 添加参数。</summary>
            <param name="command">需要添加参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <typeparam name="TDbCommand"><see cref="T:System.Data.IDbCommand"/> 的类型。</typeparam>
            <typeparam name="TParameter">包含参数项的数据实体。</typeparam>
            <returns>返回 <paramref name="command"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.AddParameter``1(System.Data.SqlClient.SqlCommand,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>向 <see cref="T:System.Data.SqlClient.SqlCommand"/> 添加表值参数。</summary>
            <typeparam name="TParameter">表值参数项的数据实体。</typeparam>
            <param name="command">需要添加表值参数的 <see cref="T:System.Data.SqlClient.SqlCommand"/>。</param>
            <param name="source">包含表值参数值的数据源。注意：数据源的列顺序必须与表参数定义的列顺序一致。如类成员的顺序与表参数列顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定列顺序。</param>
            <param name="parameterName">表值参数的名称。</param>
            <param name="typeName">表值参数的类型名称。</param>
            <returns>返回 <paramref name="command"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.GetParameterValue``1(System.Data.IDbCommand,System.String)">
            <summary>从 <see cref="T:System.Data.IDbCommand"/> 获取强类型参数值。</summary>
            <typeparam name="TParameter">参数的值类型。</typeparam>
            <param name="command">包含命令参数的 <see cref="T:System.Data.IDbCommand"/>。</param>
            <param name="name">参数的名称。</param>
            <returns>返回参数转换为强类型后的值。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.JoinEntities``3(System.Data.IDataReader,System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.ICollection{``1}},System.Func{``0,``2},System.String)">
            <summary>将从表的数据附加到主表对应主键项的集合。</summary>
            <typeparam name="TMaster">主表的数据类型。</typeparam>
            <typeparam name="TDetail">从表的数据类型。</typeparam>
            <typeparam name="TKey">主表主键的值类型。主键不应出现空引用。</typeparam>
            <param name="dataReader">包含从表数据的 <see cref="T:System.Data.IDataReader"/>。</param>
            <param name="master">包含主表数据的集合。</param>
            <param name="detailsLocator">返回主表项内从表集合的委托，不应返回空引用。</param>
            <param name="masterKeyGetter">返回主表项主键的委托，不应返回空引用。</param>
            <param name="masterKeyColumn">从表数据中关联到主表主键的列名。</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">从表的关联键在主表集合中没有对应的项。</exception>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="masterKeyColumn"/> 在 <paramref name="dataReader"/> 中不存在。</exception>
            <exception cref="T:System.NullReferenceException"><paramref name="detailsLocator"/>、<paramref name="masterKeyGetter"/>、<paramref name="masterKeyColumn"/> 为空。</exception>
            <exception cref="T:System.ArgumentException">主表集合中出现重复主键的项。</exception>
            <example>
            <para>以下语句将 dataReader 中 MasterID 字段与 master 集合中 Id 相同的项（m）匹配，将匹配的项转换后附加到 m 的 Details 集合内。</para>
            <code><![CDATA[
            class Master {
            	public int Id { get; set; }
            	public string Name { get; set; }
            	public List<Detail> Details { get; set; } = new List<Detail>();
            }
            class Detail {
            	public int SubId { get; set; }
            	public string Name { get; set; }
            }
            var master = connection.Select<Master>("SELECT Id, Name FROM MasterTable");
            using (var cmd = connection.SetupCommand("SELECT MasterID, SubID, Name FROM ChildTable"))
            using (var dataReader = cmd.ExecuteReader()) {
            	dataReader.JoinEntities(master, m => m.Details, m => m.Id, "MasterID");
            }]]>
            </code>
            </example>
        </member>
        <member name="M:AppHelpers.DbHelper.Read``1(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，以非缓存的方式读取数据，返回 <see cref="T:System.Collections.Generic.IEnumerable`1"/>，并销毁 <paramref name="command"/>。注意：枚举集合生成的迭代器不支持 <see cref="M:System.Collections.IEnumerator.Reset"/> 操作。</summary>
            <typeparam name="TResult">集合元素的类。</typeparam>
            <param name="command">需要执行的 SQL 命令。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的 <see cref="T:System.Collections.Generic.IEnumerable`1"/>。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.Read(System.Data.IDbCommand,System.Action{System.Data.IDataReader}[])">
            <summary>执行指定的 SQL 指令，使用 <paramref name="readActions"/> 读取执行结果的各个数据结果集，并销毁 <paramref name="command"/>。</summary>
            <param name="command">需要执行的 SQL 命令。</param>
            <param name="readActions">用于读取数据的委托。如结果集有多个，则每一个委托用于读取一个结果集。如委托为空，则跳过该结果集。每个委托最多仅被调用一次。在进入委托时，<see cref="T:System.Data.IDataReader"/> 参数处于数据结果集的开头。委托内需使用循环以读取结果集的各项。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Select``1(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的集合，并销毁 <paramref name="command"/>。</summary>
            <typeparam name="TResult">集合元素的类型。当 <typeparamref name="TResult"/> 为 object[] 时，返回集合的项目为仅包含值的数组；为 object 时，返回集合的项目为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="command">需要执行的 SQL 命令。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的实体集合。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectJson(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，返回结果的 JSON 文本，并销毁 <paramref name="command"/>。</summary>
            <param name="command">需要执行的 SQL 命令。</param>
            <returns>从 <see cref="T:System.Data.IDataReader"/> 生成的 JSON 文本。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectJson(System.Data.IDbCommand,System.Text.StringBuilder)">
            <summary>执行指定的 SQL 命令，将结果的 JSON 文本写入 <paramref name="target"/>，并销毁 <paramref name="command"/>。</summary>
            <param name="command">需要执行的 SQL 命令。</param>
            <param name="target">存放 JSON 文本的 <see cref="T:System.Text.StringBuilder"/>。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectScalar``1(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，将查询结果第一行数据的第一个值转换为 <typeparamref name="TResult"/> 的实例，并销毁 <paramref name="command"/>。</summary>
            <typeparam name="TResult">结果实例的类型。</typeparam>
            <param name="command">需要执行的 SQL 命令。</param>
            <returns>执行查询命令后返回的第一个值。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SelectSingle``1(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，返回对应 <typeparamref name="TResult"/> 的实例，并销毁 <paramref name="command"/>。</summary>
            <typeparam name="TResult">结果实例的类型。</typeparam>
            <param name="command">需要执行的 SQL 命令。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的实体集合。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand``1(System.Data.IDbConnection,System.String,``0)">
            <summary>从 SQL 文本创建数据库命令，并附加参数。</summary>
            <typeparam name="TParameter">包含参数项的数据实体。</typeparam>
            <param name="connection">用于创建 <see cref="T:System.Data.IDbCommand"/> 的连接。</param>
            <param name="commandText">数据库命令。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <returns>返回 <see cref="T:System.Data.IDbCommand"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand``1(System.Data.IDbConnection,System.String,System.Boolean,``0)">
            <summary>从 SQL 文本或存储过程创建数据库命令，并附加参数。</summary>
            <typeparam name="TParameter">包含参数项的数据实体。</typeparam>
            <param name="connection">用于创建 <see cref="T:System.Data.IDbCommand"/> 的连接。</param>
            <param name="commandText">数据库命令。</param>
            <param name="isStoredProcedure">指定数据库命令是否为存储过程。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <returns>返回 <see cref="T:System.Data.IDbCommand"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand``1(System.Data.IDbTransaction,System.String,``0)">
            <summary>从 SQL 文本创建数据库命令，并附加参数。</summary>
            <typeparam name="TParameter">包含参数项的数据实体。</typeparam>
            <param name="transaction">用于创建 <see cref="T:System.Data.IDbCommand"/> 的事务。</param>
            <param name="commandText">数据库命令。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <returns>返回 <see cref="T:System.Data.IDbCommand"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.SetupCommand``1(System.Data.IDbTransaction,System.String,System.Boolean,``0)">
            <summary>从 SQL 文本或存储过程创建数据库命令，并附加参数。</summary>
            <typeparam name="TParameter">包含参数项的数据实体。</typeparam>
            <param name="transaction">用于创建 <see cref="T:System.Data.IDbCommand"/> 的事务。</param>
            <param name="commandText">数据库命令。</param>
            <param name="isStoredProcedure">指定数据库命令是否为存储过程。</param>
            <param name="parameter">包含参数值的数据源。注意：如成员的顺序与参数顺序不一致，可在类成员中使用 <see cref="T:AppHelpers.DbFieldAttribute"/> 特性指定顺序。</param>
            <returns>返回 <see cref="T:System.Data.IDbCommand"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.ReadEntity``1(System.Data.IDataReader)">
            <summary>读取 <see cref="T:System.Data.IDataReader"/> 实例的所有内容，生成对应 <typeparamref name="TResult"/> 的可枚举对象。</summary>
            <typeparam name="TResult">实例的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="dataReader">包含需要反序列化数据的 <see cref="T:System.Data.IDataReader"/>。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的可枚举实体集合。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.NextResultToEntities``1(System.Data.IDataReader)">
            <summary>调用 <see cref="M:System.Data.IDataReader.NextResult"/> 方法前进到下一个结果集，将该结果集的数据填充到 <see cref="T:System.Collections.Generic.IList`1"/> 集合。</summary>
            <typeparam name="TResult">实例的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="dataReader">包含需要反序列化数据的 <see cref="T:System.Data.IDataReader"/>。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的实体集合。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.ToEntities``1(System.Data.IDataReader)">
            <summary>读取 <see cref="T:System.Data.IDataReader"/> 实例的所有内容，生成对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TResult">集合元素的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="dataReader">包含需要反序列化数据的 <see cref="T:System.Data.IDataReader"/>。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的实体集合。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.ToEntities``1(System.Data.IDataReader,System.Int32)">
            <summary>读取 <see cref="T:System.Data.IDataReader"/> 实例的前 <paramref name="recordCount"/> 条记录内容，生成对应 <typeparamref name="TResult"/> 的集合。</summary>
            <typeparam name="TResult">集合元素的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="dataReader">包含需要反序列化数据的 <see cref="T:System.Data.IDataReader"/>。</param>
            <param name="recordCount">需要读取记录的数量上限。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的实体集合。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.ToEntity``1(System.Data.IDataReader)">
            <summary>读取 <see cref="T:System.Data.IDataReader"/> 实例的单个记录，生成对应的 <typeparamref name="TResult"/> 实例。</summary>
            <typeparam name="TResult">实例的类。当 <typeparamref name="TResult"/> 为 object[] 时，返回对象为仅包含值的数组；为 object 时，返回对象为 <see cref="T:AppHelpers.IEntityAccessor"/> 实例。</typeparam>
            <param name="dataReader">包含需要反序列化数据的 <see cref="T:System.Data.IDataReader"/>。</param>
            <returns>反序列化 <see cref="T:System.Data.IDataReader"/> 后生成的实体。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.ToJson(System.Data.IDataReader)">
            <summary>将 <see cref="T:System.Data.IDataReader"/> 的第一个结果集转换为 JSON 文本。</summary>
            <param name="dataReader">需要转换结果为 JSON 文本的 <see cref="T:System.Data.IDataReader"/>。</param>
            <returns>从 <see cref="T:System.Data.IDataReader"/> 生成的 JSON 文本。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.ToJson(System.Data.IDataReader,System.Text.StringBuilder)">
            <summary>将 <see cref="T:System.Data.IDataReader"/> 的第一个结果集转换为 JSON 文本，输出到 <see cref="T:System.Text.StringBuilder"/>。</summary>
            <param name="dataReader">需要转换结果为 JSON 文本的 <see cref="T:System.Data.IDataReader"/>。</param>
            <param name="target">存放 JSON 文本的 <see cref="T:System.Text.StringBuilder"/>。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update(System.Data.IDbCommand)">
            <summary>执行指定的 SQL 命令，并销毁 <paramref name="command"/>。</summary>
            <param name="command">需要执行的 SQL 命令。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.Update``1(System.Data.IDbCommand,System.Collections.Generic.IEnumerable{``0})">
            <summary>批量执行指定的 SQL 命令，并销毁 <paramref name="command"/>。</summary>
            <typeparam name="TParameter">包含参数项的数据实体。</typeparam>
            <param name="command">需要执行的 SQL 命令。</param>
            <param name="parameters">需要逐个传送到数据库执行更新的参数集合。</param>
            <returns>返回更新操作影响的记录数量。</returns>
        </member>
        <member name="M:AppHelpers.DbHelper.GetObjectId(System.Data.SqlClient.SqlConnection,System.String,AppHelpers.DbObjectType)">
            <summary>获取指定对象在 SQL Server 数据库中的编号。如对象不存在，或当前连接的用户不具有特定对象的访问权限，返回 0。</summary>
            <param name="connection">当前的连接。</param>
            <param name="name">对象的名称，可为限定名或非限定名。</param>
            <seealso cref="M:AppHelpers.DbHelper.HasObject(System.Data.SqlClient.SqlConnection,System.String,AppHelpers.DbObjectType)"/>
        </member>
        <member name="M:AppHelpers.DbHelper.GetObjectId(System.Data.SqlClient.SqlTransaction,System.String,AppHelpers.DbObjectType)">
            <summary>获取指定对象在 SQL Server 数据库中的编号。如对象不存在，或当前连接的用户不具有特定对象的访问权限，返回 0。</summary>
            <param name="transaction">当前的事务。</param>
            <param name="name">对象的名称，可为限定名或非限定名。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.GetSystemTime(System.Data.SqlClient.SqlConnection)">
            <summary>获取数据库服务器的系统时间。</summary>
            <param name="connection">当前的连接。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.GetSystemTime(System.Data.SqlClient.SqlTransaction)">
            <summary>获取数据库服务器的系统时间。</summary>
            <param name="transaction">当前的事务。</param>
        </member>
        <member name="M:AppHelpers.DbHelper.HasObject(System.Data.SqlClient.SqlConnection,System.String,AppHelpers.DbObjectType)">
            <summary>检查数据库中是否存在指定的对象。</summary>
            <param name="connection">当前的连接。</param>
            <param name="name">需要检查存在性的对象名称，可为限定名或非限定名。</param>
            <param name="objectType">对象的类型。</param>
            <seealso cref="M:AppHelpers.DbHelper.GetObjectId(System.Data.SqlClient.SqlConnection,System.String,AppHelpers.DbObjectType)"/>
        </member>
        <member name="T:AppHelpers.IEntityAccessor">
            <summary>简单实体类的接口。</summary>
        </member>
        <member name="P:AppHelpers.IEntityAccessor.FieldCount">
            <summary>获取访问器可读取的字段数量。</summary>
        </member>
        <member name="M:AppHelpers.IEntityAccessor.GetField(System.Int32)">
            <summary>获取指定位置的字段名称。</summary>
            <param name="ordinal">字段的位置。</param>
        </member>
        <member name="M:AppHelpers.IEntityAccessor.GetFieldType(System.Int32)">
            <summary>获取指定列的数据类型。</summary>
            <param name="ordinal">从零开始的列序号。</param>
            <returns>指定列的数据类型。</returns>
        </member>
        <member name="M:AppHelpers.IEntityAccessor.GetValue(System.Int32)">
            <summary>获取指定位置的字段值。</summary>
            <param name="ordinal">字段的位置。</param>
        </member>
        <member name="M:AppHelpers.IEntityAccessor.SetValue(System.Int32,System.Object)">
            <summary>设置指定位置的字段值。</summary>
            <param name="ordinal">字段的位置。</param>
            <param name="value">字段的值。</param>
        </member>
        <member name="T:AppHelpers.EntityAccessor`1">
            <summary>使用字段名称或字段位置访问实例数据的访问器。注意：访问器并不是多线程安全的，如果多个线程竞争修改 <see cref="P:AppHelpers.EntityAccessor`1.Entity"/> 的值，将返回不可预料的结果。</summary>
            <typeparam name="TEntity">需要访问的数据类型。</typeparam>
        </member>
        <member name="P:AppHelpers.EntityAccessor`1.Entity">
            <summary>获取或设置需要访问的数据实例。</summary>
        </member>
        <member name="P:AppHelpers.EntityAccessor`1.FieldCount">
            <summary>获取访问器可读取的字段数量。</summary>
        </member>
        <member name="P:AppHelpers.EntityAccessor`1.Fields">
            <summary>获取访问器可读取的字段。</summary>
        </member>
        <member name="P:AppHelpers.EntityAccessor`1.Item(System.Int32)">
            <summary>获取指定位置的字段值。</summary>
            <param name="index">字段的位置。</param>
            <seealso cref="M:AppHelpers.EntityAccessor`1.GetValue(System.Int32)"/>
        </member>
        <member name="P:AppHelpers.EntityAccessor`1.Item(System.String)">
            <summary>获取指定名称的字段值。如需要重复访问指定名称的字段值，建议先使用 <see cref="M:AppHelpers.EntityAccessor`1.GetOrdinal(System.String)"/> 方法获取字段的位置，然后在后续代码使用 <see cref="M:AppHelpers.EntityAccessor`1.GetValue(System.Int32)"/> 方法获取字段的值。</summary>
            <param name="fieldName">字段的名称。</param>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.CanSetValue(System.Int32)">
            <summary>检查指定位置的字段是否可写入。</summary>
            <param name="ordinal">字段的位置。</param>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.GetField(System.Int32)">
            <summary>获取指定位置的字段名称。</summary>
            <param name="ordinal">字段的位置。</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> 不处于 0 到 <see cref="P:AppHelpers.EntityAccessor`1.FieldCount"/> 范围。</exception>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.GetFieldType(System.Int32)">
            <summary>获取指定列的数据类型。</summary>
            <param name="ordinal">从零开始的列序号。</param>
            <returns>指定列的数据类型。</returns>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.GetFieldTypeCode(System.Int32)">
            <summary>获取指定位置字段的 <see cref="T:System.TypeCode"/>。</summary>
            <param name="ordinal">字段的位置。</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> 不处于 0 到 <see cref="P:AppHelpers.EntityAccessor`1.FieldCount"/> 范围。</exception>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.GetOrdinal(System.String)">
            <summary>获取指定名称的字段位置。如无法找到匹配的字段，返回 -1。</summary>
            <param name="name">字段的名称。</param>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.GetValue(System.Int32)">
            <summary>获取指定位置的字段值。</summary>
            <param name="ordinal">字段的位置。</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> 不处于 0 到 <see cref="P:AppHelpers.EntityAccessor`1.FieldCount"/> 范围。</exception>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.SetValue(System.Int32,System.Object)">
            <summary>设置指定位置的字段值。</summary>
            <param name="ordinal">字段的位置。</param>
            <param name="value">字段的值。</param>
            <exception cref="T:System.IndexOutOfRangeException"><paramref name="ordinal"/> 不处于 0 到 <see cref="P:AppHelpers.EntityAccessor`1.FieldCount"/> 范围。</exception>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.GetValue(System.String)">
            <summary>获取指定名称的字段值。如需要重复访问指定名称的字段值，建议先使用 <see cref="M:AppHelpers.EntityAccessor`1.GetOrdinal(System.String)"/> 方法获取字段的位置，然后在后续代码使用 <see cref="M:AppHelpers.EntityAccessor`1.GetValue(System.Int32)"/> 方法获取字段的值。</summary>
            <param name="name">字段的名称。</param>
            <exception cref="T:System.IndexOutOfRangeException">无法在 <see cref="P:AppHelpers.EntityAccessor`1.Fields"/> 找到与 <paramref name="name"/> 匹配的字段。</exception>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.SetValue(System.String,System.Object)">
            <summary>设置指定名称的字段值。如需要重复设置指定名称的字段值，建议先使用 <see cref="M:AppHelpers.EntityAccessor`1.GetOrdinal(System.String)"/> 方法获取字段的位置，然后在后续代码使用 <see cref="M:AppHelpers.EntityAccessor`1.SetValue(System.Int32,System.Object)"/> 方法设置字段的值。</summary>
            <param name="name">字段的名称。</param>
            <param name="value">字段的值。</param>
            <exception cref="T:System.IndexOutOfRangeException">无法在 <see cref="P:AppHelpers.EntityAccessor`1.Fields"/> 找到与 <paramref name="name"/> 匹配的字段。</exception>
        </member>
        <member name="M:AppHelpers.EntityAccessor`1.InternalGetOrdinal(System.Collections.Generic.Dictionary{System.String,System.Int32},System.String)">
            <summary>此方法由访问器内部调用，不宜在代码中使用。</summary>
        </member>
        <member name="T:AppHelpers.EnumerableDataReader`1">
            <summary>将 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 实例转换为 <see cref="T:System.Data.Common.DbDataReader"/> 的读取器。此读取器可作为 SqlClient 的表值参数。</summary>
            <typeparam name="TEntity">读取器中包含的数据。</typeparam>
            <seealso cref="T:System.Data.Common.DbDataReader" />
        </member>
        <member name="P:AppHelpers.EnumerableDataReader`1.Depth">
            <summary>
            获取一个值，该值指示当前行的嵌套深度。
            </summary>
        </member>
        <member name="P:AppHelpers.EnumerableDataReader`1.FieldCount">
            <summary>
            获取当前行中的列数。
            </summary>
        </member>
        <member name="P:AppHelpers.EnumerableDataReader`1.IsClosed">
            <summary>
            获取一个值，该值指示 <see cref="T:System.Data.Common.DbDataReader" /> 是否已关闭。
            </summary>
        </member>
        <member name="P:AppHelpers.EnumerableDataReader`1.RecordsAffected">
            <summary>
            通过执行 SQL 语句获取更改、插入或删除的行数。
            </summary>
        </member>
        <member name="P:AppHelpers.EnumerableDataReader`1.HasRows">
            <summary>
            获取一个值，它指示此 <see cref="T:System.Data.Common.DbDataReader" /> 是否包含一个或多个行。
            </summary>
        </member>
        <member name="T:AppHelpers.SqlBulkCopyHelper">
            <summary>用于批量导入数据到数据库的帮助类。</summary>
        </member>
        <member name="M:AppHelpers.SqlBulkCopyHelper.BulkCopy``1(System.Data.SqlClient.SqlConnection,System.Collections.Generic.IEnumerable{``0},System.String,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>使用批量加载的方式将 <paramref name="dataSource"/> 的数据导入 SQL Server 数据库。</summary>
            <typeparam name="TEntity">需要加载的数据类型。</typeparam>
            <param name="connection">连接数据库的 <see cref="T:System.Data.SqlClient.SqlConnection"/> 实例。</param>
            <param name="dataSource">包含待导入数据的集合。</param>
            <param name="destTableName">导入到数据库的目标表名。</param>
            <param name="options">导入选项。</param>
        </member>
        <member name="M:AppHelpers.SqlBulkCopyHelper.BulkCopy``1(System.Data.SqlClient.SqlConnection,System.Collections.Generic.IEnumerable{``0},AppHelpers.SqlBulkCopySettings{``0})">
            <summary>使用批量加载的方式将 <paramref name="dataSource"/> 的数据导入 SQL Server 数据库。</summary>
            <typeparam name="TEntity">需要加载的数据类型。</typeparam>
            <param name="connection">连接数据库的 <see cref="T:System.Data.SqlClient.SqlConnection"/> 实例。</param>
            <param name="dataSource">包含待导入数据的集合。</param>
            <param name="options">导入选项。</param>
        </member>
        <member name="M:AppHelpers.SqlBulkCopyHelper.BulkCopy``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0},System.String,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>使用批量加载的方式将 <paramref name="dataSource"/> 的数据导入 SQL Server 数据库。</summary>
            <typeparam name="TEntity">需要加载的数据类型。</typeparam>
            <param name="transaction">连接数据库的 <see cref="T:System.Data.SqlClient.SqlTransaction"/> 实例。</param>
            <param name="dataSource">包含待导入数据的集合。</param>
            <param name="destTableName">导入到数据库的目标表名。</param>
            <param name="options">导入选项。</param>
        </member>
        <member name="M:AppHelpers.SqlBulkCopyHelper.BulkCopy``1(System.Data.SqlClient.SqlTransaction,System.Collections.Generic.IEnumerable{``0},AppHelpers.SqlBulkCopySettings{``0})">
            <summary>使用批量加载的方式将 <paramref name="dataSource"/> 的数据导入 SQL Server 数据库。</summary>
            <typeparam name="TEntity">需要加载的数据类型。</typeparam>
            <param name="transaction">连接数据库的 <see cref="T:System.Data.SqlClient.SqlTransaction"/> 实例。</param>
            <param name="dataSource">包含待导入数据的集合。</param>
            <param name="options">导入选项。</param>
        </member>
        <member name="T:AppHelpers.SqlBulkCopySettings`1">
            <summary>用于配置大批量加载数据的配置。</summary>
            <typeparam name="TEntity">实体的类型。</typeparam>
        </member>
        <member name="M:AppHelpers.SqlBulkCopySettings`1.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)">
            <summary>创建 <see cref="T:AppHelpers.SqlBulkCopySettings`1"/> 类的新实例。</summary>
            <param name="destinationTableName">大批量加载数据目标表的名称。</param>
            <param name="options">大批量加载数据选项。</param>
        </member>
        <member name="P:AppHelpers.SqlBulkCopySettings`1.DestinationTableName">
            <summary>获取大批量加载数据目标表的名称。</summary>
        </member>
        <member name="P:AppHelpers.SqlBulkCopySettings`1.Options">
            <summary>获取大批量加载数据操作的选项。</summary>
        </member>
        <member name="P:AppHelpers.SqlBulkCopySettings`1.BeforeReadItemHandler">
            <summary>获取或指定将数据项写入数据库前的委托。</summary>
        </member>
        <member name="P:AppHelpers.SqlBulkCopySettings`1.AfterReadHandler">
            <summary>获取或指定完成写入数据库操作后的委托。</summary>
        </member>
        <member name="T:AppHelpers.ConstraintAttribute">
            <summary>表示用于检查值是否符合指定约束的特性。对于 <see cref="T:AppHelpers.AccessorHelper"/>，在获取值时检查约束；对于 <see cref="T:AppHelpers.DbHelper"/>，在设置参数值时检查约束。</summary>
            <seealso cref="T:System.Attribute" />
        </member>
        <member name="P:AppHelpers.ConstraintAttribute.Action">
            <summary>获取或设置被验证值不符合约束时执行的动作。</summary>
        </member>
        <member name="P:AppHelpers.ConstraintAttribute.ErrorMessage">
            <summary>获取或设置在值不符合约束时，需要抛出异常的异常文本。文本可包括一个以“{0}”表示的占位符。</summary>
        </member>
        <member name="P:AppHelpers.ConstraintAttribute.DefaultValue">
            <summary>获取或设置在值不符合约束时，需要返回默认值时所返回的值。</summary>
        </member>
        <member name="T:AppHelpers.ConstraintAction">
            <summary>表示值不符合约束时执行的动作。</summary>
        </member>
        <member name="F:AppHelpers.ConstraintAction.ThrowException">
            <summary>值不符合约束时抛出 <see cref="T:AppHelpers.ValidationException"/> 异常。</summary>
        </member>
        <member name="F:AppHelpers.ConstraintAction.Santinize">
            <summary>值不符合约束时将数据截取为取值的有效范围。</summary>
        </member>
        <member name="F:AppHelpers.ConstraintAction.ReturnDefault">
            <summary>值不符合约束时将数据返回默认值。</summary>
        </member>
        <member name="T:AppHelpers.ConstrainLengthAttribute">
            <summary>
            <para>用于约束字符串和集合类型长度的特性。</para>
            <para>此特性在遇到空引用时不执行任何动作。如需约束空引用，应使用 <see cref="T:AppHelpers.ConstrainNullAttribute"/>。</para>
            <para><see cref="P:AppHelpers.ConstraintAttribute.Action"/> 为 <see cref="F:AppHelpers.ConstraintAction.Santinize"/> 时，如长度大于 <see cref="P:AppHelpers.ConstrainLengthAttribute.MaximumLength"/>，截断至该长度；小于 <see cref="P:AppHelpers.ConstrainLengthAttribute.MinimumLength"/> 时，不执行任何动作。</para>
            </summary>
            <seealso cref="T:AppHelpers.ConstraintAttribute" />
        </member>
        <member name="P:AppHelpers.ConstrainLengthAttribute.MaximumLength">
            <summary>获取字符串或集合类型的最大长度。</summary>
        </member>
        <member name="P:AppHelpers.ConstrainLengthAttribute.MinimumLength">
            <summary>获取字符串或集合类型的最小长度。</summary>
        </member>
        <member name="P:AppHelpers.ConstrainLengthAttribute.Trim">
            <summary>获取或设置是否截去字符串头尾的空白。</summary>
        </member>
        <member name="M:AppHelpers.ConstrainLengthAttribute.#ctor(System.Int32)">
            <summary>创建 <see cref="T:AppHelpers.ConstrainLengthAttribute"/> 的实例，指定 <see cref="P:AppHelpers.ConstrainLengthAttribute.MaximumLength"/>。</summary>
            <param name="maximumLength">指定字符串或集合类型的最大长度。</param>
        </member>
        <member name="M:AppHelpers.ConstrainLengthAttribute.#ctor(System.Int32,System.Int32)">
            <summary>创建 <see cref="T:AppHelpers.ConstrainLengthAttribute"/> 的实例，指定 <see cref="P:AppHelpers.ConstrainLengthAttribute.MaximumLength"/> 和 <see cref="P:AppHelpers.ConstrainLengthAttribute.MinimumLength"/>。</summary>
            <param name="maximumLength">指定字符串或集合类型的最大长度。</param>
            <param name="minimumLength">指定字符串或集合类型的最小长度。</param>
        </member>
        <member name="T:AppHelpers.ConstrainNullAttribute">
            <summary>
            <para>用于约束引用类型或 <see cref="T:System.Nullable`1"/> 类型不能为空引用的特性。</para>
            <para><see cref="P:AppHelpers.ConstraintAttribute.Action"/> 为 <see cref="F:AppHelpers.ConstraintAction.Santinize"/> 时，字符串和字节数组将转换为 0 长度对象，<see cref="T:System.Nullable`1"/> 将转换为其参数类型的默认值。</para>
            <para><see cref="P:AppHelpers.ConstraintAttribute.Action"/> 为 <see cref="F:AppHelpers.ConstraintAction.ReturnDefault"/> 时，上述各类型将返回 <see cref="P:AppHelpers.ConstraintAttribute.DefaultValue"/>，在未指定该值时，返回 null 或 <see cref="T:System.DBNull"/>。</para>
            </summary>
            <seealso cref="T:AppHelpers.ConstraintAttribute"/>
        </member>
        <member name="T:AppHelpers.FileHelper">
            <summary>提供帮助处理文件的方法。</summary>
        </member>
        <member name="P:AppHelpers.FileHelper.AppBasePath">
            <summary>获取应用的基础目录。</summary>
        </member>
        <member name="M:AppHelpers.FileHelper.ArePathsEqual(AppHelpers.FilePath,AppHelpers.FilePath)">
            <summary>比对两个路径是否一致。</summary>
            <param name="path1">路径1。</param>
            <param name="path2">路径2。</param>
            <returns>返回比对结果。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.AttachExtensionName(AppHelpers.FilePath,System.String)">
            <summary>为不具有指定扩展名的文件名添加指定的扩展名。</summary>
            <param name="fileName">文件名。</param>
            <param name="extension">扩展名。</param>
            <returns>带有指定扩展名的文件名。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.CombinePath(System.String,System.String)">
            <summary>将合并两部分路径。 说明：此方法与 <see cref="M:System.IO.Path.Combine(System.String,System.String)"/> 类似，但不检查路径中是否包含无效字符（如“&lt;”、“&gt;”等），可用于处理包含以这些字符作为自定义替换符的路径。</summary>
            <param name="path1">根路径。</param>
            <param name="path2">子路径。</param>
            <returns>合并后的路径。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.ComparePath(AppHelpers.FilePath,AppHelpers.FilePath)">
            <summary>比较两个文件路径是否一致（不区分大小写）。</summary>
            <param name="path1">第一个文件路径。</param>
            <param name="path2">第二个文件路径。</param>
            <returns>两个路径一致时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.NumericAwareComparePath(System.String,System.String)">
            <summary>以不区分大小写、本地排序规则的文本和忽略前导 0 的数值规则排序两个路径。若两路径可视为相等，返回 0；<paramref name="path1"/> 在 <paramref name="path2"/> 前面时，返回负数；否则返回正数。</summary>
            <param name="path1">需要比较的第 1 条路径。</param>
            <param name="path2">需要比较的第 2 条路径。</param>
        </member>
        <member name="M:AppHelpers.FileHelper.CreateDirectoryForFile(AppHelpers.FilePath)">
            <summary>为文件创建目录并返回该目录路径。如文件所属的目录不存在，则创建新的目录。</summary>
            <param name="fileName">要创建目录的文件。</param>
            <returns>返回已创建的目录路径。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.DumpBytes(System.Byte[],AppHelpers.FilePath)">
            <summary>将字节数组的内容写入到文件。</summary>
            <param name="source">需要写入的字节数组。</param>
            <param name="path">写入的文件路径。</param>
            <returns>返回原字节数组。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.DumpHexBinBytes(System.Byte[],AppHelpers.FilePath)">
            <summary>将字节数组的内容写入为 HexBin 编码的文本文件。</summary>
            <param name="source">需要写入的字节数组。</param>
            <param name="path">写入的文件路径。</param>
            <returns>返回原字节数组。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.DumpStream(System.IO.Stream)">
            <summary>将 <see cref="T:System.IO.Stream"/> 的内容导出为字节数组。</summary>
            <param name="stream">需要导出内容的流。</param>
        </member>
        <member name="M:AppHelpers.FileHelper.DumpStream(System.IO.Stream,AppHelpers.FilePath)">
            <summary>将 <see cref="T:System.IO.Stream"/> 的内容写入到 <paramref name="path"/> 指定的位置。</summary>
            <param name="stream">需要导出内容的流。</param>
            <param name="path">导出内容的目标路径。</param>
        </member>
        <member name="M:AppHelpers.FileHelper.GetDirectoryPath(AppHelpers.FilePath)">
            <summary>获取文件的目录。如文件为相对路径，则先将其转换为绝对路径，再返回目录部分。</summary>
            <param name="fileName">要获取目录的文件。</param>
            <returns>文件的目录。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.GetEllipticPath(System.String,System.Int32)">
            <summary>获取将路径缩略为指定长度的字符串（一般用于菜单展示）。过长的路径字符串将在中间使用“...”代替。此方法不检查路径是否包含无效字符。</summary>
            <param name="path">需要缩略的字符串。</param>
            <param name="length">字符串的最大长度。</param>
            <returns>缩略后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.GetValidFileName(AppHelpers.FilePath)">
            <summary>获取将文件名无效字符替换为下划线后的文件名。</summary>
            <param name="fileName">要替换的文件名。</param>
            <returns>替换无效字符后的文件名；如文件名不包含无效字符，则返回原文件名。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.HasExtension(AppHelpers.FilePath,System.String)">
            <summary>返回文件名是否以指定的扩展名结尾（不区分大小写）。</summary>
            <param name="fileName">文件名。</param>
            <param name="extension">扩展名。</param>
            <returns>文件名以指定的扩展名结束时，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.IsFileLocked(System.IO.IOException)">
            <summary>检查 <see cref="T:System.IO.IOException"/> 是否由于文件锁定引起的。</summary>
            <param name="exception">打开文件时抛出的 <see cref="T:System.IO.IOException"/>。</param>
            <returns>文件由于被锁定而产生异常时，返回 true。</returns>
            <remarks>参见：http://stackoverflow.com/questions/876473/is-there-a-way-to-check-if-a-file-is-in-use?lq=1</remarks>
        </member>
        <member name="M:AppHelpers.FileHelper.IsFileNameValid(System.String)">
            <summary>检查文件名是否有效。</summary>
            <param name="fileName">要检查的文件名。</param>
            <returns>文件名非空且有效时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.IsPathValid(System.String)">
            <summary>检查路径是否有效。</summary>
            <param name="filePath">要检查的路径。</param>
            <returns>路径有效时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FileHelper.MonitorFiles(AppHelpers.FilePath,System.Boolean,System.IO.FileSystemEventHandler)">
            <summary>监视的文件创建、更改、删除和重命名事件。在事件发生时，调用 <paramref name="eventHandler"/> 处理更改。</summary>
            <param name="filter">文件名过滤模式，如“*.config”。如为绝对路径，则以该绝对路径的目录为监视目录，文件名部分为过滤模式。</param>
            <param name="invokeHandler">是否在添加监视后立即执行事件处理委托。</param>
            <param name="eventHandler">在文件发生变动时的委托。</param>
            <returns><see cref="T:System.IO.FileSystemWatcher"/> 实例。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventHandler"/> 为空。</exception>
        </member>
        <member name="M:AppHelpers.FileHelper.MonitorFiles(AppHelpers.FilePath,AppHelpers.FilePath,System.Boolean,System.Boolean,System.IO.FileSystemEventHandler)">
            <summary>监视文件的创建、更改、删除和重命名事件。在事件发生时，调用 <paramref name="eventHandler"/> 处理更改。</summary>
            <param name="path">需要监视的文件目录。</param>
            <param name="filter">文件名过滤模式，如“*.config”。</param>
            <param name="includeSubdir">是否监视子目录。</param>
            <param name="invokeHandler">是否在添加监视后立即执行事件处理委托。</param>
            <param name="eventHandler">在文件发生变动时的委托。</param>
            <returns><see cref="T:System.IO.FileSystemWatcher"/> 实例。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="eventHandler"/> 为空或 <paramref name="filter"/> 为空。</exception>
        </member>
        <member name="M:AppHelpers.FileHelper.NormalizePath(AppHelpers.FilePath)">
            <summary>将传入的路径转换为完整路径，并删除目录名中的前后空白字符。</summary>
            <param name="path">需要规范化的路径。</param>
            <returns>返回规范化的路径。</returns>
        </member>
        <member name="T:AppHelpers.FilePath">
            <summary>表示文件路径的结构。此结构可隐式转换为字符串、<see cref="T:System.IO.FileInfo"/>、<see cref="T:System.IO.DirectoryInfo"/> 和 <see cref="T:System.Uri"/>。</summary>
        </member>
        <member name="F:AppHelpers.FilePath.Wildcard">
            <summary>表示匹配任何文件的通配符。</summary>
        </member>
        <member name="F:AppHelpers.FilePath.RecursiveWildchard">
            <summary>表示匹配当前目录、递归子目录和任何文件的通配符。</summary>
        </member>
        <member name="F:AppHelpers.FilePath.Empty">
            <summary>表示没有任何内容的路径。</summary>
        </member>
        <member name="F:AppHelpers.FilePath.AppRoot">
            <summary>获取应用程序所在的目录路径。</summary>
        </member>
        <member name="F:AppHelpers.FilePath.AppPath">
            <summary>获取应用程序的文件路径（对于 Web 应用程序，返回 <see cref="F:AppHelpers.FilePath.Empty"/>）。</summary>
        </member>
        <member name="M:AppHelpers.FilePath.#ctor(System.String)">
            <summary>传入文件路径的字符串形式，创建新的 <see cref="T:AppHelpers.FilePath"/> 实例。在创建实例时，删除传入字符串内所有的前导和尾随空白。</summary>
            <param name="path">文件路径的字符串形式。</param>
        </member>
        <member name="P:AppHelpers.FilePath.Directory">
            <summary>返回当前路径的目录部分。如目录为相对路径，则先转换为以当前程序所在目录路径为基准的绝对路径。</summary>
            <returns>当前路径的目录部分。</returns>
        </member>
        <member name="P:AppHelpers.FilePath.ExistsFile">
            <summary>检查当前路径对应的文件是否存在。</summary>
        </member>
        <member name="P:AppHelpers.FilePath.ExistsDirectory">
            <summary>检查当前路径对应的目录是否存在。</summary>
        </member>
        <member name="P:AppHelpers.FilePath.FileName">
            <summary>获取文件路径的文件名部分。</summary>
        </member>
        <member name="P:AppHelpers.FilePath.FileNameWithoutExtension">
            <summary>获取文件路径的文件名（不包含扩展名）部分。</summary>
        </member>
        <member name="P:AppHelpers.FilePath.FileExtension">
            <summary>获取文件路径的文件扩展名部分。</summary>
        </member>
        <member name="P:AppHelpers.FilePath.IsEmpty">
            <summary>返回当前路径是否为空。</summary>
        </member>
        <member name="P:AppHelpers.FilePath.IsValidPath">
            <summary>返回当前文件路径是否有效。</summary>
        </member>
        <member name="M:AppHelpers.FilePath.AppendPathSeparator">
            <summary>在路径后附加“\”字符。</summary>
            <returns>附加了“\”字符的路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ChangeExtension(System.String)">
            <summary>替换文件路径的扩展名为新的扩展名。</summary>
            <param name="extension">新的扩展名。</param>
            <returns>替换扩展名后的路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.Combine(AppHelpers.FilePath)">
            <summary>合并两个文件路径。如 <paramref name="path"/> 为绝对路径，则返回该路径。</summary>
            <param name="path">子路径。</param>
            <returns>合并后的路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.CreateContainingDirectory">
            <summary>为当前文件路径创建其所属的目录。如文件路径为空，则不创建路径。</summary>
            <returns>所创建目录的路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.EnsureExtension(System.String)">
            <summary>返回附加指定扩展名的实例。如当前路径已包含指定的扩展名，则返回当前路径，否则返回附加扩展名的实例。</summary>
            <param name="extension">需要附加的文件扩展名。</param>
            <returns>附加指定扩展名的实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.FromRoot(System.String)">
            <summary>创建以应用程序所在目录为基准的路径。</summary>
            <param name="path">相对路径。</param>
            <returns>返回以应用程序所在目录为基准的路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.GetFiles(System.String)">
            <summary>获取当前 <see cref="T:AppHelpers.FilePath"/> 下符合匹配模式的文件。在执行匹配前，先将当前实例转换为完整路径。当前用户无权访问的目录将被忽略。</summary>
            <param name="pattern">匹配文件用的模式。模式中的“\”用于分隔目录，“**”表示当前目录及其包含的所有目录，“*”匹配 0 到多个字符，“?”匹配 1 个字符。</param>
            <returns>返回匹配模式的所有文件。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.GetFiles(System.String,System.Predicate{System.String})">
            <summary>获取当前 <see cref="T:AppHelpers.FilePath"/> 下符合匹配模式和筛选条件的文件。在执行匹配前，先将当前实例转换为完整路径。当前用户无权访问的目录将被忽略。</summary>
            <param name="pattern">匹配文件用的模式。模式中的“\”用于分隔目录，“**”表示当前目录及其包含的所有目录，“*”匹配 0 到多个字符，“?”匹配 1 个字符。</param>
            <param name="filter">用于筛选文件名的委托。</param>
            <returns>返回匹配模式的所有文件。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.GetParts">
            <summary>将路径按目录拆分为多个部分，并删除其中的无效部分。</summary>
            <returns>目录的各个部分。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.GetParts(System.Boolean)">
            <summary>将路径按目录拆分为多个部分。</summary>
            <param name="removeInvalidParts">是否删除无效的部分。</param>
            <returns>目录的各个部分。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.GetRelativePath(AppHelpers.FilePath)">
            <summary>
            <para>
            以当前路径的绝对路径为基准，返回 <paramref name="path"/> 相对于当前路径的相对路径。 如果 <paramref name="path"/>
            与当前路径盘符不一致，返回 <paramref name="path"/>。 在计算相对路径前，将把当前路径和 <paramref name="path"/> 使用 <see
            cref="M:AppHelpers.FilePath.ToFullPath"/> 方法转换为绝对路径。
            </para>
            <note type="note">如当前路径为目录，但不以 <see cref="F:System.IO.Path.DirectorySeparatorChar"/> 结束，应先调用 <see
            cref="M:AppHelpers.FilePath.AppendPathSeparator"/> 方法将目录结束符附加到路径末尾。</note>
            </summary>
            <param name="path">要计算相对路径的路径。</param>
            <returns><paramref name="path"/> 对于当前路径的相对路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.HasExtension(System.String)">
            <summary>检查当前路径是否以指定的扩展名结束（不区分大小写）。</summary>
            <param name="extension">文件扩展名。</param>
        </member>
        <member name="M:AppHelpers.FilePath.HasExtension(System.String[])">
            <summary>返回文件名是否以指定的任意一个扩展名结尾（不区分大小写）。</summary>
            <param name="extensions">扩展名列表。</param>
        </member>
        <member name="M:AppHelpers.FilePath.Normalize">
            <summary>将文件路径转换为绝对定位路径，并删除目录名称中的空白。同时将 <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/> 转换为 <see cref="F:System.IO.Path.DirectorySeparatorChar"/>。</summary>
            <returns>标准的绝对定位路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.OpenTextReader(System.Text.Encoding)">
            <summary>创建以指定编码读取文件的 <see cref="T:System.IO.StreamReader"/> 实例。</summary>
            <param name="encoding">用于读取文件的编码。编码为 null 时采用 UTF-8 编码。</param>
            <returns>读取文件的 <see cref="T:System.IO.StreamReader"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.OpenTextWriter(System.Boolean,System.Text.Encoding)">
            <summary>创建以指定编码写入文件的 <see cref="T:System.IO.StreamWriter"/> 实例。</summary>
            <param name="append">是否追加到文件结尾。</param>
            <param name="encoding">用于写入文件的编码。编码为 null 时采用 UTF-8 编码。</param>
            <returns>写入文件的 <see cref="T:System.IO.StreamWriter"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ReadAllBytes">
            <summary>打开当前路径对应的文件并读取所有内容为字节数组。如文件不存在，返回 0 长度的字节数组。此方法使用 FileStream 读取文件，打开或读取文件过程中可能返回异常。</summary>
            <returns>文件的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ReadAllBytes(System.Int32)">
            <summary>打开当前路径对应的文件并读取所有内容为字节数组。如文件不存在，返回 0 长度的字节数组。此方法使用 FileStream 读取文件，打开或读取文件过程中可能返回异常。</summary>
            <param name="maxBytes">允许读取的最大字节数。如此值非正整数，则按读取文件的大小读取最多 <see cref="F:System.Int32.MaxValue"/> 个字节。</param>
            <returns>文件的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ReadAllText(System.Text.Encoding)">
            <summary>打开当前路径对应的文件，并以指定编码逐行读取所有内容为字符串集合。如文件不存在，返回 0 长度的字符串数组。</summary>
            <param name="encoding">用于读取文件的编码。编码为 null 时采用 UTF-8 编码。</param>
            <returns>文件中每行对应一个字符串所构成的集合。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.WriteAllBytes(System.Boolean,System.Byte[])">
            <summary>将 <paramref name="bytes"/>写入文件。</summary>
            <param name="append">是否追加到文件结尾。</param>
            <param name="bytes">需要写入的字节数组。此参数为空时，不写入文件内容。</param>
        </member>
        <member name="M:AppHelpers.FilePath.WriteAllText(System.Boolean,System.Text.Encoding,System.String)">
            <summary>将 <paramref name="text"/> 以指定编码写入文件。</summary>
            <param name="append">是否追加到文件结尾。</param>
            <param name="encoding">用于写入文件的编码。编码为 null 时采用 UTF-8 编码。</param>
            <param name="text">需要写入的文本。此参数为空时，不写入文件内容。</param>
        </member>
        <member name="M:AppHelpers.FilePath.WriteAllLines(System.Boolean,System.Text.Encoding,System.Collections.Generic.IEnumerable{System.String})">
            <summary>将 <paramref name="lines"/> 的每项内容后附加换行，以指定编码写入文件。</summary>
            <param name="append">是否追加到文件结尾。</param>
            <param name="encoding">用于写入文件的编码。编码为 null 时采用 UTF-8 编码。</param>
            <param name="lines">需要写入的文本。此参数为空时，不写入文件内容。此参数的项目为空时，写入对应的空行。</param>
        </member>
        <member name="M:AppHelpers.FilePath.WriteAllLines(System.Boolean,System.Text.Encoding,System.String[])">
            <summary>将 <paramref name="lines"/> 的每项内容后附加换行，以指定编码写入文件。</summary>
            <param name="append">是否追加到文件结尾。</param>
            <param name="encoding">用于写入文件的编码。编码为 null 时采用 UTF-8 编码。</param>
            <param name="lines">需要写入的文本。此参数为空时，不写入文件内容。此参数的项目为空时，写入对应的空行。</param>
        </member>
        <member name="M:AppHelpers.FilePath.StartProcess(System.String)">
            <summary>使用关联的程序打开当前路径对应的文件或目录，返回对应的进程。</summary>
            <param name="arguments">要传递的额外参数。</param>
            <returns><see cref="T:System.Diagnostics.Process"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.StartProcess">
            <summary>使用关联的程序打开当前路径对应的文件或目录，返回对应的进程。</summary>
            <returns><see cref="T:System.Diagnostics.Process"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.SubstituteInvalidChars(System.Char)">
            <summary>将路径中的无效字符替换为 <paramref name="substitution"/>。</summary>
            <param name="substitution">用于替换无效字符的字符。</param>
            <returns>替换了无效字符的路径。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ToFullPath">
            <summary>将路径转换为绝对定位的路径。路径的基准位置为 <see cref="F:AppHelpers.FilePath.AppRoot"/>。执行此方法前，必须确保路径中不包含无效字符，否则将抛出异常。</summary>
            <returns>采用绝对定位路径的实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ToFileInfo">
            <summary>
            <para>将 <see cref="T:AppHelpers.FilePath"/> 实例转换为完全路径，再隐式转换为 <see cref="T:System.IO.FileInfo"/> 实例。路径的基准位置为 <see cref="F:AppHelpers.FilePath.AppRoot"/>。</para>
            <note type="note">事实上，<see cref="T:AppHelpers.FilePath"/> 实例可隐式转换为 <see cref="T:System.IO.FileInfo"/> 实例。</note>
            </summary>
            <returns>将当前路径转换为完全路径后对应的 <see cref="T:System.IO.FileInfo"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ToDirectoryInfo">
            <summary>
            将 <see cref="T:AppHelpers.FilePath"/> 实例转换为完全路径，再隐式转换为 <see cref="T:System.IO.DirectoryInfo"/> 实例。路径的基准位置为 <see cref="F:AppHelpers.FilePath.AppRoot"/>。
            <note type="note">事实上，<see cref="T:AppHelpers.FilePath"/> 实例可隐式转换为 <see cref="T:System.IO.DirectoryInfo"/> 实例。</note>
            </summary>
            <returns>将当前路径转换为完全路径后对应的 <see cref="T:System.IO.DirectoryInfo"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ToUri">
            <summary>
            将 <see cref="T:AppHelpers.FilePath"/> 实例转换为 <see cref="T:System.Uri"/> 实例。
            <note type="note">事实上，<see cref="T:AppHelpers.FilePath"/> 实例可隐式转换为 <see cref="T:System.Uri"/> 实例。</note>
            </summary>
            <returns>与当前路径对应的 <see cref="T:System.Uri"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.op_Implicit(System.String)~AppHelpers.FilePath">
            <summary>将字符串隐式转换为 <see cref="T:AppHelpers.FilePath"/> 实例。</summary>
            <param name="path">需要转换的路径字符串。</param>
            <returns><see cref="T:AppHelpers.FilePath"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.op_Implicit(AppHelpers.FilePath)~System.String">
            <summary>将 <see cref="T:AppHelpers.FilePath"/> 实例隐式转换为字符串。</summary>
            <param name="path">需要转换的路径。</param>
            <returns>以字符串形式表示的实例。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.op_Explicit(System.IO.FileInfo)~AppHelpers.FilePath">
            <summary>将 <see cref="T:System.IO.FileInfo"/> 显式转换为 <see cref="T:AppHelpers.FilePath"/> 实例。</summary>
            <param name="file">需要转换的路径。</param>
        </member>
        <member name="M:AppHelpers.FilePath.op_Implicit(AppHelpers.FilePath)~System.IO.FileInfo">
            <summary>
            将 <see cref="T:AppHelpers.FilePath"/> 实例转换为完全路径，再隐式转换为 <see cref="T:System.IO.FileInfo"/> 实例。路径的基准位置为 <see cref="F:AppHelpers.FilePath.AppRoot"/>。
            </summary>
            <param name="path">需要转换的路径。</param>
            <returns>将当前路径转换为完全路径后对应的 <see cref="T:System.IO.FileInfo"/> 实例。</returns>
            <seealso cref="M:AppHelpers.FilePath.ToFullPath"/>
        </member>
        <member name="M:AppHelpers.FilePath.op_Explicit(System.IO.DirectoryInfo)~AppHelpers.FilePath">
            <summary>将 <see cref="T:System.IO.DirectoryInfo"/> 显式转换为 <see cref="T:AppHelpers.FilePath"/> 实例。</summary>
            <param name="directory">需要转换的路径。</param>
        </member>
        <member name="M:AppHelpers.FilePath.op_Implicit(AppHelpers.FilePath)~System.IO.DirectoryInfo">
            <summary>
            将 <see cref="T:AppHelpers.FilePath"/> 实例转换为完全路径，再隐式转换为 <see cref="T:System.IO.DirectoryInfo"/> 实例。路径的基准位置为 <see cref="F:AppHelpers.FilePath.AppRoot"/>。
            </summary>
            <param name="path">需要转换的路径。</param>
            <returns>将当前路径转换为完全路径后对应的 <see cref="T:System.IO.DirectoryInfo"/> 实例。</returns>
            <seealso cref="M:AppHelpers.FilePath.ToFullPath"/>
        </member>
        <member name="M:AppHelpers.FilePath.op_Implicit(AppHelpers.FilePath)~System.Uri">
            <summary>将 <see cref="T:AppHelpers.FilePath"/> 实例隐式转换为 <see cref="T:System.Uri"/> 实例。</summary>
            <param name="path">需要转换的路径。</param>
        </member>
        <member name="M:AppHelpers.FilePath.op_Equality(AppHelpers.FilePath,AppHelpers.FilePath)">
            <summary>比较两个文件路径是否相同。</summary>
            <param name="path1">需要比较的第一个路径。</param>
            <param name="path2">需要比较的第二个路径。</param>
            <returns>相同时，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.op_Inequality(AppHelpers.FilePath,AppHelpers.FilePath)">
            <summary>比较两个文件路径是否不相同。</summary>
            <param name="path1">需要比较的第一个路径。</param>
            <param name="path2">需要比较的第二个路径。</param>
            <returns>不相同时，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.Equals(AppHelpers.FilePath)">
            <summary>指示当前文件路径是否等于同一类型的另一个文件路径。</summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>如果当前对象等于 <paramref name="other"/> 参数，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.Equals(System.Object)">
            <summary>确定当前文件路径是否与另一个实例相等。</summary>
            <param name="obj">需要与当前实例比较的对象。</param>
            <returns>在两个文件路径相等时，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.GetHashCode">
            <summary>返回路径字符串的散列值。</summary>
            <returns>路径字符串的散列值。</returns>
        </member>
        <member name="M:AppHelpers.FilePath.ToString">
            <summary>返回表示当前文件路径的 <see cref="T:System.String"/> 实例。</summary>
            <returns>表示当前文件路径的 <see cref="T:System.String"/> 实例。</returns>
        </member>
        <member name="T:AppHelpers.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:AppHelpers.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:AppHelpers.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:AppHelpers.Properties.Resources.MsSqlFeaturesDbKeywords">
            <summary>
              查找类似 ABSOLUTE,ACTION,ADD,ADMIN,AFTER,AGGREGATE,ALIAS,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY,AS,ASC,ASENSITIVE,ASSERTION,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION,BACKUP,BEFORE,BEGIN,BETWEEN,BINARY,BIT,BLOB,BOOLEAN,BOTH,BREADTH,BREAK,BROWSE,BULK,BY,CALL,CALLED,CARDINALITY,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHARACTER,CHECK,CHECKPOINT,CLASS,CLOB,CLOSE,CLUSTERED,COALESCE,COLLATE,COLLATION,COLLECT,COLUMN,COMMIT,COMPLETION,COMPUTE,CONDITION,CONNECT,CONNECTION,CONSTRAINT,CONSTRAINTS,CONSTRUCTOR,CONTAINS,CONTAINSTABLE,CONTI [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="P:AppHelpers.Properties.Resources.MySqlFeaturesDbKeywords">
            <summary>
              查找类似 ACCESSIBLE,ADD,ALL,ALTER,ANALYZE,AND,AS,ASC,ASENSITIVE,BEFORE,BETWEEN,BIGINT,BINARY,BLOB,BOTH,BY,CALL,CASCADE,CASE,CHANGE,CHAR,CHARACTER,CHECK,COLLATE,COLUMN,CONDITION,CONSTRAINT,CONTINUE,CONVERT,CREATE,CROSS,CURRENT_DATE,CURRENT_TIME,CURRENT_TIMESTAMP,CURRENT_USER,CURSOR,DATABASE,DATABASES,DAY_HOUR,DAY_MICROSECOND,DAY_MINUTE,DAY_SECOND,DEC,DECIMAL,DECLARE,DEFAULT,DELAYED,DELETE,DESC,DESCRIBE,DETERMINISTIC,DISTINCT,DISTINCTROW,DIV,DOUBLE,DROP,DUAL,EACH,ELSE,ELSEIF,ENCLOSED,ESCAPED,EXISTS,EXIT,EXPLAIN,FALSE, [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="P:AppHelpers.Properties.Resources.OracleFeaturesDbKeywords">
            <summary>
              查找类似 ACCESS,ACCOUNT,ACTIVATE,ADD,ADMIN,ADVISE,AFTER,ALL,ALL_ROWS,ALLOCATE,ALTER,ANALYZE,AND,ANY,ARCHIVE,ARCHIVELOG,ARRAY,AS,ASC,AT,AUDIT,AUTHENTICATED,AUTHORIZATION,AUTOEXTEND,AUTOMATIC,BACKUP,BECOME,BEFORE,BEGIN,BETWEEN,BFILE,BITMAP,BLOB,BLOCK,BODY,BY,CACHE,CACHE_INSTANCES,CANCEL,CASCADE,CAST,CFILE,CHAINED,CHANGE,CHAR,CHAR_CS,CHARACTER,CHECK,CHECKPOINT,CHOOSE,CHUNK,CLEAR,CLOB,CLONE,CLOSE,CLOSE_CACHED_OPEN_CURSORS,CLUSTER,COALESCE,COLUMN,COLUMNS,COMMENT,COMMIT,COMMITTED,COMPATIBILITY,COMPILE,COMPLETE,COMPOSITE_L [字符串的其余部分被截断]&quot;; 的本地化字符串。
            </summary>
        </member>
        <member name="T:AppHelpers.ProtocolSerializer`1">
            <summary>协议序列器抽象类。此类型由序列器使用。</summary>
            <typeparam name="TData">序列化的类型。</typeparam>
        </member>
        <member name="P:AppHelpers.ProtocolSerializer`1.FieldCount">
            <summary>获取 <typeparamref name="TData"/> 可被序列化的公共访问属性数量。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolSerializer`1.FieldNames">
            <summary>获取 <typeparamref name="TData"/> 可被序列化的公共访问属性名称列表。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolSerializer`1.IsSerializable">
            <summary>获取 <typeparamref name="TData"/> 是否可被序列化为字节数组。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolSerializer`1.IsDeserializable">
            <summary>获取 <typeparamref name="TData"/> 是否可从字节数组反序列化成类实例。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolSerializer`1.IsFixedLength">
            <summary>获取 <typeparamref name="TData"/> 序列化后的数组是否固定长度。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolSerializer`1.MinimalLength">
            <summary>获取 <typeparamref name="TData"/> 序列化后最小字节数组的长度。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolSerializer`1.Deserialize(System.Byte[],System.Int32@,System.Int32)">
            <summary>将字节数组从指定的位置开始反序列化成 <typeparamref name="TData"/> 的实例。</summary>
            <param name="value">需要反序列化的字节数组。</param>
            <param name="offset">字节数组开始反序列化的位置。</param>
            <param name="count">字节数组可读取的长度。若此值小于字节数组长度，则反序列化时只能读取此值规定的长度。</param>
            <returns><typeparamref name="TData"/> 的实例。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolSerializer`1.Serialize(`0,System.Byte[]@,System.Int32@)">
            <summary>将从指定的位置开始序列化 <typeparamref name="TData"/> 的实例到字节数组。</summary>
            <param name="value">需要序列化的数据。</param>
            <param name="buffer">用于存放序列化结果的字节数组。</param>
            <param name="offset">在 <paramref name="buffer"/> 中开始写入序列化结果的位置。</param>
        </member>
        <member name="T:AppHelpers.ProtocolHelper">
            <summary>用于进行二进制序列化的帮助类。此帮助类生成动态的程序集以执行高速的二进制序列化操作。</summary>
            <remarks>
            <para>此类可序列化公共可访问（或 internal 可见，在程序集中应使用 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 标记其对 <see cref="F:AppHelpers.ProtocolHelper.SerializerAssemblyName"/> 程序集可见）的类的公共可读（不要求可写）属性。</para>
            </remarks>
        </member>
        <member name="F:AppHelpers.ProtocolHelper.SerializerAssemblyName">
            <summary>序列器程序集的名称。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolHelper.Debug">
            <summary>获取或设置 <see cref="T:AppHelpers.ProtocolHelper"/> 是否应生成输出 Debug 消息的序列器。修改此属性值不会影响已经生成的序列器。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolHelper.Internal">
            <summary>包含用于 <see cref="T:AppHelpers.ProtocolHelper"/> 方法的类。该类的方法由序列器内部使用，不宜在代码中调用。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Internal.AreBytesInPosition(System.Byte[],System.Int32,System.Byte[])">
            <summary>检查指定的字节数组是否在 <paramref name="value"/> 的指定位置。</summary>
            <param name="value">应在指定位置包含指定字节的数组。</param>
            <param name="index">包含关系的位置。</param>
            <param name="bytes">被包含的字节数组。</param>
            <exception cref="T:AppHelpers.ProtocolException">字节数组不处于指定位置。</exception>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Internal.AreBytesInPosition(System.Byte*,System.Int32,System.Byte[])">
            <summary>检查指定的字节数组是否在 <paramref name="value"/> 的指定位置。</summary>
            <param name="value">应在指定位置包含指定字节的数组。</param>
            <param name="index">包含关系的位置。</param>
            <param name="bytes">被包含的字节数组。</param>
            <exception cref="T:AppHelpers.ProtocolException">字节数组不处于指定位置。</exception>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Internal.EnsureSize(System.Byte[]@,System.Int32,System.Int32)">
            <summary>此方法由序列器内部使用，不宜在代码中使用此方法。检查 <paramref name="buffer"/> 在 <paramref name="offset"/> 位置是否有 <paramref name="requiredBytes"/> 个字节的空间。如果没有，则将字节数组扩张至足以容纳所需的字节数。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Internal.GetString(System.Text.Encoding,System.Byte*@,System.Int32)">
            <summary>此方法由序列器内部使用，不宜在代码中使用此方法。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Deserialize``1(System.Byte[])">
            <summary>将 <paramref name="value"/> 反序列化成 <typeparamref name="TData"/> 的实例。</summary>
            <typeparam name="TData">反序列化后生成的实例。</typeparam>
            <param name="value">需要反序列化的二进制数组。</param>
            <returns><typeparamref name="TData"/> 的实例。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Deserialize``1(System.ArraySegment{System.Byte})">
            <summary>将 <paramref name="arraySegment"/> 反序列化成 <typeparamref name="TData"/> 的实例。</summary>
            <typeparam name="TData">反序列化后生成的实例。</typeparam>
            <param name="arraySegment">需要反序列化的二进制数组片段。</param>
            <returns><typeparamref name="TData"/> 的实例。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Deserialize``1(System.Byte[],System.Int32,System.Int32)">
            <summary>从 <paramref name="offset"/> 的位置开始，将 <paramref name="value"/> 反序列化成 <typeparamref name="TData"/> 的实例。</summary>
            <typeparam name="TData">反序列化后生成的实例。</typeparam>
            <param name="value">需要反序列化的二进制数组。</param>
            <param name="offset">反序列器开始读取二进制数组的位置。</param>
            <param name="count">字节数组可读取的长度。若此值小于字节数组长度，则反序列化时只能读取此值规定的长度。</param>
            <returns><typeparamref name="TData"/> 的实例。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Deserialize``1(System.Byte[],System.Int32@,System.Int32)">
            <summary>从 <paramref name="offset"/> 的位置开始，将 <paramref name="value"/> 反序列化成 <typeparamref name="TData"/> 的实例。</summary>
            <typeparam name="TData">反序列化后生成的实例。</typeparam>
            <param name="value">需要反序列化的二进制数组。</param>
            <param name="offset">反序列器开始读取二进制数组的位置。</param>
            <param name="count">字节数组可读取的长度。若此值小于字节数组长度，则反序列化时只能读取此值规定的长度。</param>
            <returns><typeparamref name="TData"/> 的实例。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Serialize``1(``0)">
            <summary>将 <paramref name="value"/> 序列化字节数组。</summary>
            <typeparam name="TData">需序列化序列化的数据实例类型。</typeparam>
            <param name="value">需要序列化的数据。</param>
            <returns>序列化生成的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Serialize``1(``0,System.Byte[]@,System.Int32@)">
            <summary>将 <paramref name="value"/> 序列化字节数组。</summary>
            <typeparam name="TData">需序列化序列化的数据实例类型。</typeparam>
            <param name="value">需要序列化的数据。</param>
            <param name="buffer">用于存放序列化结果的字节数组。</param>
            <param name="offset">在 <paramref name="buffer"/> 中开始写入序列化结果的位置。</param>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.CanDeserialize``1">
            <summary>检查是否可反序列化指定的类。</summary>
            <typeparam name="TData">需检查反序列化可行性的类。</typeparam>
            <returns>类可被反序列化时，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.CanSerialize``1">
            <summary>检查是否可序列化指定的类。</summary>
            <typeparam name="TData">需检查序列化可行性的类。</typeparam>
            <returns>类可被序列化时，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.Serialize(System.Object)">
            <summary>将 <paramref name="value"/> 序列化字节数组。</summary>
            <param name="value">需要序列化的数据。</param>
            <returns>序列化生成的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.GetSerializer``1">
            <summary>获取指定类型的序列器。</summary>
            <typeparam name="TData">需序列化或反序列化的类。</typeparam>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.SaveAssembly(System.Type[])">
            <summary>生成并保存指定类型的序列器程序集。此方法可用于预生成序列器程序集，或检查所生成的程序集是否符合要求。此方法不保证在多线程环境下能正常工作，应避免在生产环境中调用此方法。</summary>
            <param name="types">需要生成序列器的类型。此参数为空时，生成一个包含所有已序列化类型的程序集。</param>
        </member>
        <member name="M:AppHelpers.ProtocolHelper.SaveAssembly(System.String,System.Reflection.StrongNameKeyPair,System.Type[])">
            <summary>生成并保存指定类型的序列器程序集。此方法可用于预生成序列器程序集，或检查所生成的程序集是否符合要求。此方法不保证在多线程环境下能正常工作，应避免在生产环境中调用此方法。</summary>
            <param name="assemblyName">
            指定动态程序集的名称。在引用此程序集的程序集中，可使用 <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute"/> 特性和本参数指定的程序集名称来标记该程序集，使序列器生成的方法可访问该程序集的内部类型。
            </param>
            <param name="keyPair">用于签名动态程序集的 <see cref="T:System.Reflection.StrongNameKeyPair"/>。</param>
            <param name="types">需要生成序列器的类型。此参数为空时，生成一个包含所有已序列化类型的程序集。</param>
        </member>
        <member name="P:AppHelpers.ProtocolHelper.PropertySettings.SerializedPropertyType">
            <summary>获取自定义协议 <see cref="P:AppHelpers.ProtocolFieldAttribute.ProtocolDataType"/> 对应的类型、枚举的基础类型或可空类型的泛型参数类型。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolFieldAttribute">
            <summary>用于标记二进制协议字段的特性。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolFieldAttribute.#ctor(System.Int32)">
            <summary>设置当前字段的序列化顺序，以及其它序列化相关设置。字段按顺序值从小到大序列化。</summary>
            <param name="order">设置当前字段的序列化顺序。</param>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.Encoding">
            <summary>获取或设置字符串字段的编码。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.IsLittleEndian">
            <summary>标记当前数值是否为小尾序（默认为大尾序，即高位在前）。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.Order">
            <summary>获取当前字段的序列化顺序。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.Prefix">
            <summary>标记当前字段前面必须具备的前缀字节。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.ProtocolDataType">
            <summary>标记当前字段序列化后的二进制类型。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.Size">
            <summary>标记可变长字段类型（byte[] 、string）所需的字节数。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.SizeMode">
            <summary>标记可变长字段的长度标识方式。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolFieldAttribute.Suffix">
            <summary>标记当前字段前面必须具备的后缀字节。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolIncludeAttribute">
            <summary>标记指定的属性或类是否可被序列化或反序列化的特性。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolIncludeAttribute.Serialize">
            <summary>标记指定的属性或类是否可被序列化。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolIncludeAttribute.Deserialize">
            <summary>标记指定的属性或类是否可被反序列化。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolIncludeAttribute.#ctor(System.Boolean)">
            <summary>标记指定的属性或类是否可被序列化或反序列化。</summary>
            <param name="include">标记指定的属性或类是否可被序列化或反序列化。</param>
        </member>
        <member name="M:AppHelpers.ProtocolIncludeAttribute.#ctor(System.Boolean,System.Boolean)">
            <summary>标记指定的属性或类是否可被序列化或反序列化。</summary>
            <param name="serialize">标记指定的属性或类是否可被序列化。</param>
            <param name="deserialize">标记指定的属性或类是否可被反序列化。</param>
        </member>
        <member name="T:AppHelpers.ProtocolPrefixAttribute">
            <summary>用于标记二进制协议字段或类的前缀二进制数据的特性。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolPrefixAttribute.#ctor(System.Byte[])">
            <summary>指定所标记的类或字段应具有指定的二进制数组前缀。</summary>
            <param name="bytes">前缀的字节数组。</param>
        </member>
        <member name="M:AppHelpers.ProtocolPrefixAttribute.#ctor(System.String)">
            <summary>指定所标记的类或字段应具有指定的二进制数组前缀，此前缀使用 HexBin 编码。</summary>
            <param name="hexBin">前缀的字节数组（HexBin 编码的字符串形式）。</param>
        </member>
        <member name="M:AppHelpers.ProtocolPrefixAttribute.#ctor(System.String,System.String)">
            <summary>指定所标记的类或字段应具有指定的文本前缀，此前缀使用 <paramref name="encoding"/> 指定的编码转换为字节数组。</summary>
            <param name="text">前缀的文本。</param>
            <param name="encoding">前缀文本的编码。</param>
        </member>
        <member name="P:AppHelpers.ProtocolPrefixAttribute.Bytes">
            <summary>获取代表前缀的字段。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolSuffixAttribute">
            <summary>用于标记二进制协议字段或类的后缀二进制数据的特性。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolSuffixAttribute.#ctor(System.Byte[])">
            <summary>指定所标记的类或字段应具有指定的二进制数组后缀。</summary>
            <param name="bytes">后缀的字节数组。</param>
        </member>
        <member name="M:AppHelpers.ProtocolSuffixAttribute.#ctor(System.String)">
            <summary>指定所标记的类或字段应具有指定的二进制数组后缀，此后缀使用 HexBin 编码。</summary>
            <param name="hexBin">后缀的字节数组（HexBin 编码的字符串形式）。</param>
        </member>
        <member name="M:AppHelpers.ProtocolSuffixAttribute.#ctor(System.String,System.String)">
            <summary>指定所标记的类或字段应具有指定的文本后缀，此后缀使用 <paramref name="encoding"/> 指定的编码转换为字节数组。</summary>
            <param name="text">后缀的文本。</param>
            <param name="encoding">后缀文本的编码。</param>
        </member>
        <member name="P:AppHelpers.ProtocolSuffixAttribute.Bytes">
            <summary>获取代表后缀的字段。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolSubclassAttribute">
            <summary>用于标记序列化过程中类多态实例可能出现的类型及其标识符的特性。此特性与 <see cref="T:AppHelpers.ProtocolSubclassIdentifierAttribute"/> 联合使用。 <see cref="P:AppHelpers.ProtocolSubclassAttribute.Id"/> 属性的类型应与 <see cref="P:AppHelpers.ProtocolSubclassIdentifierAttribute.IdentifierSizeType"/> 指定的类型一致。</summary>
            <seealso cref="T:System.Attribute"/>
        </member>
        <member name="P:AppHelpers.ProtocolSubclassAttribute.Id">
            <summary>
            表示子类 <see cref="P:AppHelpers.ProtocolSubclassAttribute.Type"/> 对应的类型标识符。
            </summary>
        </member>
        <member name="P:AppHelpers.ProtocolSubclassAttribute.Type">
            <summary>
            表示此特性所标记的类可序列化为此属性对应的类型。
            </summary>
        </member>
        <member name="M:AppHelpers.ProtocolSubclassAttribute.#ctor(System.Type)">
            <summary>创建 <see cref="T:AppHelpers.ProtocolSubclassAttribute"/> 的新实例，指定子类的类型。所有不匹配已知标识符的数据均被映射到此特性所标识的类。</summary>
            <param name="type">表示此特性所标记的类可序列化为此属性对应的类型。</param>
        </member>
        <member name="M:AppHelpers.ProtocolSubclassAttribute.#ctor(System.Type,System.Int64)">
            <summary>创建 <see cref="T:AppHelpers.ProtocolSubclassAttribute"/> 的新实例，指定子类的类型和标识符。</summary>
            <param name="type">表示此特性所标记的类可序列化为此属性对应的类型。</param>
            <param name="id">表示子类对应的类型标识符。</param>
        </member>
        <member name="T:AppHelpers.ProtocolSubclassIdentifierAttribute">
            <summary>用于标记序列化过程中类多态实例切换的特性。此特性与 <see cref="T:AppHelpers.ProtocolSubclassAttribute"/> 联合使用。序列化时，先序列化标识符，再序列化子类的实例数据。反序列化时，先读取标识符，根据其值反序列化生成对应的子类。</summary>
            <seealso cref="T:AppHelpers.ProtocolSubclassAttribute"/>
        </member>
        <member name="P:AppHelpers.ProtocolSubclassIdentifierAttribute.IdentifierSizeType">
            <summary>子类标识符的数值长度。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolSubclassIdentifierAttribute.IsLittleEndian">
            <summary>标记 <see cref="P:AppHelpers.ProtocolSubclassAttribute.Id"/> 的字节顺序是否为小尾序（默认为大尾序，即高位在前）。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolSubclassIdentifierAttribute.#ctor(AppHelpers.ProtocolFieldSizeType)">
            <summary>创建 <see cref="T:AppHelpers.ProtocolSubclassIdentifierAttribute"/> 的新实例，指示子类标识符的数据类型。</summary>
            <param name="identifierSizeType">子类标识符的数值长度。</param>
        </member>
        <member name="T:AppHelpers.ProtocolProcessorAttribute">
            <summary>用于标记序列化和反序列化过程中用于处理数据的扩展方法的特性。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.Processor">
            <summary>用于处理序列化和反序列化的类。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.SerializationConverter">
            <summary>用于在序列化前转换属性的方法。该方法为 <see cref="P:AppHelpers.ProtocolProcessorAttribute.Processor"/> 类的静态公共方法，应具有 1 个类型为当前序列化字段类型的参数；否则该方法应为当前正在序列化的类的无参数实例方法。方法可不返回值；如返回值，则应返回与字段 <see cref="P:AppHelpers.ProtocolFieldAttribute.ProtocolDataType"/> 类型（如已指定，否则仍为字段类型）匹配的值。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.DeserializationConverter">
            <summary>用于在完成反序列化后转换属性的方法。该方法为 <see cref="P:AppHelpers.ProtocolProcessorAttribute.Processor"/> 类的静态公共方法，应具有 1 个类型与字段 <see cref="P:AppHelpers.ProtocolFieldAttribute.ProtocolDataType"/>类型（如已指定，否则仍为字段类型）匹配的参数；否则该方法应为当前正在序列化的类的无参数实例方法。方法应返回当前序列化字段类型的值。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.SerializationSizer">
            <summary>用于序列化时确定字段长度的方法名称。该方法为 <see cref="P:AppHelpers.ProtocolProcessorAttribute.Processor"/> 类的静态公共方法，应具有 1 个类型为当前序列化类的参数；否则该方法应为当前正在序列化的类的无参数实例方法。方法应返回可变长字段长度的非负整数值。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.DeserializationSizer">
            <summary>用于反序列化时确定字段长度的的方法名称。该方法为 <see cref="P:AppHelpers.ProtocolProcessorAttribute.Processor"/> 类的静态公共方法，应具有 1 个类型为当前序列化类的参数；否则该方法应为当前正在序列化的类的无参数实例方法。方法应返回可变长字段长度的的非负整数值。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.SizeDeterminant">
            <summary>用于计算确定字段长度的的方法名称。该方法为 <see cref="P:AppHelpers.ProtocolProcessorAttribute.Processor"/> 类的静态公共方法，应具有 1 个类型为当前序列化类的参数；否则该方法应为当前正在序列化的类的无参数实例方法。方法应返回可变长字段长度的的非负整数值。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolProcessorAttribute.UsageHandler">
            <summary>用于确定属性是否必须出现的方法。该方法为 <see cref="P:AppHelpers.ProtocolProcessorAttribute.Processor"/> 类的静态公共方法，应具有 1 个类型为当前序列化类的参数；否则该方法应为当前正在序列化的类的无参数实例方法。方法应返回布尔值。当布尔值为 false 时，忽略当前特性所标记的属性。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolProcessorAttribute.#ctor(System.Type)">
            <summary>创建 <see cref="T:AppHelpers.ProtocolProcessorAttribute"/> 特性实例。</summary>
            <param name="processor">用于处理序列化和反序列化的类。</param>
        </member>
        <member name="M:AppHelpers.ProtocolProcessorAttribute.#ctor">
            <summary>创建 <see cref="T:AppHelpers.ProtocolProcessorAttribute"/> 特性实例。处理器的类为当前正在序列化的类实例。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolProcessorAttribute.GetMethod(System.String,System.Type)">
            <summary>获取处理器所用的方法。</summary>
            <param name="methodName">方法的名称。</param>
            <param name="inputType">正在序列化的类型。</param>
            <exception cref="T:System.MissingMemberException">在 Processor 中没有找到签名为：methodName (inputType.Name) 的静态方法或 inputType 中没有找到签名为：methodName() 的实例方法。</exception>
        </member>
        <member name="T:AppHelpers.ProtocolDataType">
            <summary>标记协议字段序列化后的二进制类型。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Empty">
            <summary>空引用。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.SByte">
            <summary>整型，表示值介于 -128 到 127 之间的有符号 8 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Byte">
            <summary>整型，表示值介于 0 到 255 之间的无符号 8 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Int16">
            <summary>整型，表示值介于 -32768 到 32767 之间的有符号 16 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.UInt16">
            <summary>整型，表示值介于 0 到 65535 之间的无符号 16 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Int32">
            <summary>整型，表示值介于 -2147483648 到 2147483647 之间的有符号 32 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.UInt32">
            <summary>整型，表示值介于 0 到 4294967295 之间的无符号 32 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Int64">
            <summary>整型，表示值介于 -9223372036854775808 到 9223372036854775807 之间的有符号 64 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.UInt64">
            <summary>整型，表示值介于 0 到 18446744073709551615 之间的无符号 64 位整数。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Single">
            <summary>浮点型，表示从大约 1.5 x 10 -45 到 3.4 x 10 38 且精度为 7 位的值。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.Double">
            <summary>浮点型，表示从大约 5.0 x 10 -324 到 1.7 x 10 308 且精度为 15 到 16 位的值。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.String">
            <summary>密封类类型，表示 Unicode 字符串。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolDataType.ByteArray">
            <summary>表示字节数组。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolFieldSizeType">
            <summary>协议中变长字段的长度标定规则。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolFieldSizeType.FixedSize">
            <summary>字段为固定长度，应在 <see cref="P:AppHelpers.ProtocolFieldAttribute.Size"/> 属性标定字段长度。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolFieldSizeType.LeadingByte">
            <summary>字段为可变长度，在字段内容前以 1个字节标记字段长度。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolFieldSizeType.LeadingUInt16">
            <summary>字段为可变长度，在字段内容前以 2 个字节标记字段长度。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolFieldSizeType.LeadingUInt32">
            <summary>字段为可变长度，在字段内容前以 4 个字节标记字段长度。</summary>
        </member>
        <member name="F:AppHelpers.ProtocolFieldSizeType.LeadingUInt64">
            <summary>字段为可变长度，在字段内容前以 8 个字节标记字段长度。</summary>
        </member>
        <member name="T:AppHelpers.ProtocolInsufficientBytesException">
            <summary>表示反序列化协议时字节数量不足的异常。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolInsufficientBytesException.#ctor">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolInsufficientBytesException"/> 实例。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolInsufficientBytesException.#ctor(System.String)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolInsufficientBytesException"/> 实例。</summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:AppHelpers.ProtocolInsufficientBytesException.#ctor(System.Int32,System.String)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolInsufficientBytesException"/> 实例。</summary>
            <param name="index">抛出异常时指针在源字节数组中的位置。</param>
            <param name="fieldName">正在序列化的上下文。</param>
        </member>
        <member name="M:AppHelpers.ProtocolInsufficientBytesException.#ctor(System.String,System.Exception)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolInsufficientBytesException"/> 实例。</summary>
            <param name="message">描述错误的消息.</param>
            <param name="inner">与协议错误相关的内部错误。</param>
        </member>
        <member name="M:AppHelpers.ProtocolInsufficientBytesException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>用序列化数据初始化 <see cref="T:AppHelpers.ProtocolInsufficientBytesException"/> 类的新实例。</summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="T:AppHelpers.ProtocolException">
            <summary>表示在序列化或反序列化协议数据包时出现的异常。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolException.FieldName">
            <summary>获取抛出异常时正在序列化的属性名称。</summary>
        </member>
        <member name="P:AppHelpers.ProtocolException.Index">
            <summary>获取抛出异常时指针在源字节数组中的位置。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolException.#ctor">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolException"/> 实例。</summary>
        </member>
        <member name="M:AppHelpers.ProtocolException.#ctor(System.String)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolException"/> 实例。</summary>
            <param name="message">描述错误的消息。</param>
        </member>
        <member name="M:AppHelpers.ProtocolException.#ctor(System.String,System.Int32,System.String)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolException"/> 实例，包含出错时指针的位置及相关字段名称。</summary>
            <param name="message">描述错误的消息。</param>
            <param name="index">抛出异常时指针在源字节数组中的位置。</param>
            <param name="fieldName">正在序列化的上下文。</param>
        </member>
        <member name="M:AppHelpers.ProtocolException.#ctor(System.String,System.Int32,System.String,System.Exception)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolException"/> 实例，包含出错时指针的位置及相关字段名称，以及导致此错误的内部错误。</summary>
            <param name="message">描述错误的消息。</param>
            <param name="index">抛出异常时指针在源字节数组中的位置。</param>
            <param name="fieldName">正在序列化的上下文。</param>
            <param name="inner">与协议错误相关的内部错误。</param>
        </member>
        <member name="M:AppHelpers.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>创建新的 <see cref="T:AppHelpers.ProtocolException"/> 实例。</summary>
            <param name="message">描述错误的消息.</param>
            <param name="inner">与协议错误相关的内部错误。</param>
        </member>
        <member name="M:AppHelpers.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>用序列化数据初始化 <see cref="T:AppHelpers.ProtocolException"/> 类的新实例。</summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/>，它存有有关所引发异常的序列化的对象数据。</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/>，它包含有关源或目标的上下文信息。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="info"/> 参数为 null。</exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">类名为 null 或 <see cref="P:System.Exception.HResult"/> 为零 (0)。</exception>
        </member>
        <member name="M:AppHelpers.ProtocolSerializer.CopyBuffer(System.Reflection.Emit.ILGenerator,AppHelpers.ProtocolHelper.SerializerContext)">
            <summary>Copies a byte array on the evaluation stack to the buffer. The number of bytes assumed to be copied shall be calculated and stored into <see cref="F:AppHelpers.ProtocolHelper.SerializerContext.ArrayOrStringLength"/> beforehand.</summary>
        </member>
        <member name="T:AppHelpers.ReflectionReferredAttribute">
            <summary>将类型或成员标记为被反射引用。</summary>
        </member>
        <member name="M:AppHelpers.ReflectionReferredAttribute.#ctor">
            <summary>将类型或成员标记为被反射引用。</summary>
        </member>
        <member name="M:AppHelpers.ReflectionReferredAttribute.#ctor(System.String)">
            <summary>将类型或成员标记为被 <paramref name="referrer"/> 反射引用。</summary>
            <param name="referrer">指定引用本特性所标记类型或成员的说明（通常为该成员的完全限定名）。</param>
        </member>
        <member name="P:AppHelpers.ReflectionReferredAttribute.Referrer">
            <summary>获取引用本特性所标记类型或成员的说明（通常为该成员的完全限定名）。</summary>
        </member>
        <member name="P:AppHelpers.ReflectionReferredAttribute.ReferredProperties">
            <summary>获取或设置是否引用本特性所标记类型的属性。</summary>
        </member>
        <member name="P:AppHelpers.ReflectionReferredAttribute.ReferredMethods">
            <summary>获取或设置是否引用本特性所标记类型的方法。</summary>
        </member>
        <member name="P:AppHelpers.ReflectionReferredAttribute.ReferredEvents">
            <summary>获取或设置是否引用本特性所标记类型的事件。</summary>
        </member>
        <member name="P:AppHelpers.ReflectionReferredAttribute.ReferredFields">
            <summary>获取或设置是否引用本特性所标记类型的字段。</summary>
        </member>
        <member name="P:AppHelpers.ReflectionReferredAttribute.MemberTypes">
            <summary>获取被反射引用的成员类型。此属性仅在 <see cref="T:AppHelpers.ReflectionReferredAttribute"/> 作用于类型时有意义。</summary>
        </member>
        <member name="T:AppHelpers.IInitializeJobRunner">
            <summary>表示被 <see cref="T:AppHelpers.JobScheduler"/> 调用的、需要初始化的任务。</summary>
            <seealso cref="T:AppHelpers.IJobRunner" />
        </member>
        <member name="P:AppHelpers.IInitializeJobRunner.IsInitialized">
            <summary>获取任务执行器是否已初始化。</summary>
        </member>
        <member name="M:AppHelpers.IInitializeJobRunner.Initialize(AppHelpers.JobContext)">
            <summary>此方法被 <see cref="T:AppHelpers.JobScheduler"/> 调用，使用传入的 <see cref="T:AppHelpers.JobContext"/> 初始化 <see cref="T:AppHelpers.IJobRunner"/>。</summary>
            <param name="context">任务上下文。</param>
        </member>
        <member name="T:AppHelpers.IInitializableJobRunner">
            <summary>表示被 <see cref="T:AppHelpers.JobScheduler"/> 调用的、需要接收初始化和终止事件通知的任务。</summary>
        </member>
        <member name="M:AppHelpers.IInitializableJobRunner.Initialize(AppHelpers.JobContext)">
            <summary>此方法被 <see cref="T:AppHelpers.JobScheduler"/> 在初次执行<see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法前调用，使用传入的 <see cref="T:AppHelpers.JobContext"/> 初始化 <see cref="T:AppHelpers.IJobRunner"/>。方法返回 true 时，表示初始化成功，将开始调用 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法；方法返回 false 时，表示初始化失败，不会调用 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/>，并将继续调用此方法。</summary>
            <param name="context">用于初始化 <see cref="T:AppHelpers.IInitializableJobRunner"/> 的任务上下文。</param>
        </member>
        <member name="M:AppHelpers.IInitializableJobRunner.Uninitialize(AppHelpers.JobContext)">
            <summary>此方法被 <see cref="T:AppHelpers.JobScheduler"/> 在执行器结束执行时调用，一般用于释放 <see cref="T:AppHelpers.IJobRunner"/> 所占用的资源。</summary>
            <param name="context">用于结束 <see cref="T:AppHelpers.IInitializableJobRunner"/> 的任务上下文。</param>
        </member>
        <member name="T:AppHelpers.IJobRunner">
            <summary>表示被 <see cref="T:AppHelpers.JobScheduler"/> 调用的任务。</summary>
        </member>
        <member name="P:AppHelpers.IJobRunner.Name">
            <summary>获取任务执行器的名称。</summary>
        </member>
        <member name="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)">
            <summary>此方法被 <see cref="T:AppHelpers.JobScheduler"/> 调用，用于执行任务。如果任务长时间运行，应在运行过程中检查 <paramref name="context"/> 的 <see cref="P:AppHelpers.JobContext.CancellationPending"/> 属性，并在检测到该属性为 true 时退出任务的执行过程。</summary>
            <param name="context">任务上下文。</param>
        </member>
        <member name="M:AppHelpers.IJobRunner.Recover(System.Exception,AppHelpers.JobContext)">
            <summary>此方法在 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 抛出异常时被 <see cref="T:AppHelpers.JobScheduler"/> 调用。用于确定是否应在出现异常后执行下一次任务。当此方法调用结果返回 <see cref="F:AppHelpers.RunResult.Continue"/> 时，将继续执行，否则将终止任务。</summary>
            <param name="exception">执行任务过程中未捕获的异常。</param>
            <param name="context">执行上下文。</param>
            <returns>是否应继续执行。</returns>
        </member>
        <member name="T:AppHelpers.SimpleJobRunner">
            <summary>简单任务执行器。</summary>
            <seealso cref="T:AppHelpers.IJobRunner"/>
        </member>
        <member name="M:AppHelpers.SimpleJobRunner.#ctor(System.String,System.Action{AppHelpers.JobContext})">
            <summary>构造新的 <see cref="T:AppHelpers.SimpleJobRunner"/> 实例，并指定任务行为。任务出错后，总是返回 <see cref="F:AppHelpers.RunResult.Continue"/> 继续执行下一次任务。</summary>
            <param name="name">任务名称。</param>
            <param name="action">任务行为。</param>
        </member>
        <member name="M:AppHelpers.SimpleJobRunner.#ctor(System.String,System.Action{AppHelpers.JobContext},System.Func{System.Exception,AppHelpers.JobContext,AppHelpers.RunResult})">
            <summary>构造新的 <see cref="T:AppHelpers.SimpleJobRunner"/> 实例，并指定任务行为以及异常处理措施。</summary>
            <param name="name">任务名称。</param>
            <param name="action">任务行为。</param>
            <param name="recover">异常处理措施。若为处理措施为空，则每当出现异常时总是返回 <see cref="F:AppHelpers.RunResult.Continue"/> 继续执行下一次任务。</param>
        </member>
        <member name="P:AppHelpers.SimpleJobRunner.Name">
            <summary>获取任务执行器的名称。</summary>
        </member>
        <member name="M:AppHelpers.SimpleJobRunner.Recover(System.Exception,AppHelpers.JobContext)">
            <summary>尝试从异常中恢复。当此方法调用结果返回 <see cref="F:AppHelpers.RunResult.Continue"/> 时，将继续执行，否则将终止任务。</summary>
            <param name="exception">执行任务过程中未捕获的异常。</param>
            <param name="context">执行上下文。</param>
            <returns>是否应继续执行。</returns>
        </member>
        <member name="M:AppHelpers.SimpleJobRunner.Run(AppHelpers.JobContext)">
            <summary>执行任务。</summary>
            <param name="context">任务上下文。</param>
        </member>
        <member name="T:AppHelpers.SimpleInitializableJobRunner">
            <summary>简单可初始化任务执行器。</summary>
            <seealso cref="T:AppHelpers.IInitializableJobRunner"/>
        </member>
        <member name="M:AppHelpers.SimpleInitializableJobRunner.#ctor(System.String,System.Action{AppHelpers.JobContext},System.Func{AppHelpers.JobContext,System.Boolean})">
            <summary>构造新的 <see cref="T:AppHelpers.SimpleInitializableJobRunner" /> 实例，并指定任务行为以及初始化步骤。</summary>
            <param name="name">任务名称。</param>
            <param name="action">任务行为。</param>
            <param name="initializer">用于初始化任务执行器的委托。</param>
        </member>
        <member name="M:AppHelpers.SimpleInitializableJobRunner.#ctor(System.String,System.Action{AppHelpers.JobContext},System.Func{AppHelpers.JobContext,System.Boolean},System.Func{System.Exception,AppHelpers.JobContext,AppHelpers.RunResult},System.Action{AppHelpers.JobContext})">
            <summary>构造新的 <see cref="T:AppHelpers.SimpleInitializableJobRunner" /> 实例，并指定任务行为、异常处理措施、初始化步骤和清理步骤。</summary>
            <param name="name">任务名称。</param>
            <param name="action">任务行为。</param>
            <param name="initializer">用于初始化任务执行器的委托。</param>
            <param name="recover">异常处理措施。若为处理措施为 null，则每当出现异常时总是返回 <see cref="F:AppHelpers.RunResult.Continue" /> 继续执行下一次任务。</param>
            <param name="unintializer">用于清理任务执行器的委托。如任务结束后无需清理，可设此委托为 null。</param>
        </member>
        <member name="T:AppHelpers.CancelJobEventArgs">
            <summary>表示可取消的任务操作事件。当设置事件参数的 <see cref="P:AppHelpers.CancelJobEventArgs.Cancel"/> 属性为 true 时，结束任务；否则任务的调度操作将可继续执行。</summary>
            <seealso cref="T:AppHelpers.JobEventArgs"/>
        </member>
        <member name="P:AppHelpers.CancelJobEventArgs.Cancel">
            <summary>获取或设置指示是否应取消事件的值。</summary>
        </member>
        <member name="T:AppHelpers.JobEventArgs">
            <summary>表示任务操作事件的参数。</summary>
            <seealso cref="T:System.EventArgs"/>
        </member>
        <member name="P:AppHelpers.JobEventArgs.Context">
            <summary>获取执行任务过程中的 <see cref="T:AppHelpers.JobContext"/>。</summary>
        </member>
        <member name="T:AppHelpers.JobContext">
            <summary>表示执行一个特定任务在执行过程中的信息。</summary>
        </member>
        <member name="M:AppHelpers.JobContext.#ctor(AppHelpers.IJobRunner,AppHelpers.IJobPlanner)">
            <summary>创建新的 <see cref="T:AppHelpers.JobContext"/> 实例。</summary>
            <param name="runner">用于执行任务的 <see cref="T:AppHelpers.IJobRunner"/>，该实例的 <see cref="P:AppHelpers.IJobRunner.Name"/> 属性将用于 <see cref="T:AppHelpers.JobContext"/> 的名称，不能为空。</param>
            <param name="planner">用于调度任务执行时间和次数的 <see cref="T:AppHelpers.IJobPlanner"/>。</param>
        </member>
        <member name="M:AppHelpers.JobContext.#ctor(System.String,AppHelpers.IJobRunner,AppHelpers.IJobPlanner)">
            <summary>创建指定名称、执行器和调度器创建新的 <see cref="T:AppHelpers.JobContext"/> 实例。</summary>
            <param name="name">任务的名称。</param>
            <param name="runner">用于执行任务的 <see cref="T:AppHelpers.IJobRunner"/>。</param>
            <param name="planner">用于调度任务执行时间和次数的 <see cref="T:AppHelpers.IJobPlanner"/>。</param>
        </member>
        <member name="P:AppHelpers.JobContext.CancellationPending">
            <summary>检查当前任务是否处于等待取消状态。使用 <see cref="M:AppHelpers.JobContext.Abort"/> 方法将此属性设置为 true。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.Container">
            <summary>获取任务所属的 <see cref="T:AppHelpers.JobScheduler"/>。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.Duration">
            <summary>获取任务执行的总时间。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.ErrorCount">
            <summary>获取任务的失败计数。值随任务发生异常的次数递增；在任务正常执行后，此值不会重置。</summary>
            <seealso cref="P:AppHelpers.JobContext.LastError"/>
            <seealso cref="P:AppHelpers.JobContext.LastErrorCount"/>
            <seealso cref="P:AppHelpers.JobContext.LastErrorTime"/>
        </member>
        <member name="P:AppHelpers.JobContext.ExecutionCount">
            <summary>获取任务的执行计数。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.IsInitialized">
            <summary>检查当前任务是否已初始化。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.IsFirstRun">
            <summary>检查当前任务是否未曾执行。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.IsRunning">
            <summary>检查当前任务是否正在执行。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.LastDuration">
            <summary>获取最近一次执行任务的耗时。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.LastError">
            <summary>获取任务执行过程中最近发生的未被 <see cref="T:AppHelpers.IJobRunner"/> 捕获的错误。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.LastErrorCount">
            <summary>获取任务最近发生连续错误的计数。此值随任务发生异常的次数递增；在任务正常执行后，此值被重置为 0。</summary>
            <seealso cref="P:AppHelpers.JobContext.ErrorCount"/>
        </member>
        <member name="P:AppHelpers.JobContext.LastErrorTime">
            <summary>获取任务执行过程中最近发生错误的时间。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.LastRunTime">
            <summary>获取上次成功执行任务的时间。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.Name">
            <summary>获取任务的名称。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.Planner">
            <summary>获取任务的执行计划调度器。通过设置调度器的 <see cref="P:AppHelpers.IJobPlanner.NextRunTime"/> 值，可以调整任务的下次执行时间。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.Runner">
            <summary>获取任务的执行器。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.SuccessCount">
            <summary>获取任务的成功计数。</summary>
        </member>
        <member name="P:AppHelpers.JobContext.Status">
            <summary>检查当前任务的执行状态。</summary>
        </member>
        <member name="M:AppHelpers.JobContext.Abort">
            <summary>将任务标记为不再执行。</summary>
        </member>
        <member name="M:AppHelpers.JobContext.ClearError">
            <summary>清除失败记录，包括 <see cref="P:AppHelpers.JobContext.ErrorCount"/>、<see cref="P:AppHelpers.JobContext.LastError"/> 和 <see cref="P:AppHelpers.JobContext.LastErrorTime"/>。</summary>
        </member>
        <member name="M:AppHelpers.JobContext.ClearLastError">
            <summary>清除失败记录，包括 <see cref="P:AppHelpers.JobContext.LastError"/>、<see cref="P:AppHelpers.JobContext.LastErrorCount"/> 和 <see cref="P:AppHelpers.JobContext.LastErrorTime"/>。</summary>
        </member>
        <member name="M:AppHelpers.JobContext.KeepException(System.Exception)">
            <summary>将执行过程中出现的异常暂存到 <see cref="P:AppHelpers.JobContext.LastError"/>、 <see cref="P:AppHelpers.JobContext.LastErrorTime"/>，并递增 <see cref="P:AppHelpers.JobContext.ErrorCount"/> 和 <see cref="P:AppHelpers.JobContext.LastErrorCount"/>。</summary>
            <param name="exception">需要暂存的异常。</param>
        </member>
        <member name="M:AppHelpers.JobContext.ResetRunCounter">
            <summary>重置执行次数、错误次数和最近执行错误次数的计数器。</summary>
        </member>
        <member name="M:AppHelpers.JobContext.Resume">
            <summary>将已经完成的任务标记为空闲。注：本方法不修改调度器的 <see cref="P:AppHelpers.IJobPlanner.NextRunTime"/>。</summary>
        </member>
        <member name="T:AppHelpers.IJobPlanner">
            <summary>表示被 <see cref="T:AppHelpers.JobScheduler"/> 调用的计划任务执行时间的调度器。</summary>
        </member>
        <member name="P:AppHelpers.IJobPlanner.NextRunTime">
            <summary>获取或设置下次执行任务的时间。在执行器的 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法中可通过修改此时间自行决定任务下次执行的时间。</summary>
        </member>
        <member name="M:AppHelpers.IJobPlanner.PlanNextRun(AppHelpers.JobContext)">
            <summary>此方法在成功执行 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法后，且该方法没有修改 <see cref="P:AppHelpers.IJobPlanner.NextRunTime"/> 时被调用，用于设置 <paramref name="context"/> 下次执行任务的时间。</summary>
            <param name="context">需要计划的任务。</param>
            <returns>如任务应继续执行，返回 true；如不需要继续执行任务，返回 false。</returns>
        </member>
        <member name="M:AppHelpers.IJobPlanner.PlanRetry(AppHelpers.JobContext,System.Exception)">
            <summary>此方法在 <see cref="M:AppHelpers.IJobRunner.Recover(System.Exception,AppHelpers.JobContext)"/> 后被调用，用于设置出现异常 <paramref name="exception"/> 后重试执行 <paramref name="context"/> 对应任务的时间。</summary>
            <param name="context">出现异常的任务。</param>
            <param name="exception">导致需要重试执行的异常。</param>
            <returns>如任务应继续执行，返回 true；如不需要继续执行任务，返回 false。</returns>
        </member>
        <member name="T:AppHelpers.JobFrequencyType">
            <summary>指定任务按何种时间间隔定期执行。</summary>
        </member>
        <member name="F:AppHelpers.JobFrequencyType.None">
            <summary>未指定任务执行方式。</summary>
        </member>
        <member name="F:AppHelpers.JobFrequencyType.Daily">
            <summary>指定任务每天执行。</summary>
        </member>
        <member name="F:AppHelpers.JobFrequencyType.Weekly">
            <summary>指定任务每周执行。</summary>
        </member>
        <member name="F:AppHelpers.JobFrequencyType.Monthly">
            <summary>指定任务每月执行。</summary>
        </member>
        <member name="T:AppHelpers.JobPlannerFactory">
            <summary>生成简单任务计划程序的工厂类。</summary>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RepeatMinutely(System.Int32)">
            <summary>生成在指定分钟数内重复运行的任务计划。</summary>
            <param name="minutes">任务的运行间隔分钟数。</param>
            <returns>在指定分钟数内重复运行的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RepeatSecondly(System.Int32)">
            <summary>生成在指定秒数内重复运行的任务计划。</summary>
            <param name="seconds">任务的运行间隔秒数。</param>
            <returns>在指定秒数内重复运行的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RepeatHourly(System.Int32)">
            <summary>生成每隔指定小时重复运行的任务计划。</summary>
            <param name="hours">任务的运行间隔小时数。</param>
            <returns>在每隔指定小时重复运行的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RepeatPeriodically(System.TimeSpan)">
            <summary>生成每隔一段时间重复运行的任务计划。</summary>
            <param name="timeSpan">任务的运行间隔。</param>
            <returns>在每隔指定时间重复运行的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RunAtTime(System.TimeSpan)">
            <summary>生成在每天指定时刻运行的任务计划。</summary>
            <param name="runAtTime">任务的运行时刻。</param>
            <returns>在指定时刻运行的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RunAtTime(System.TimeSpan,AppHelpers.JobFrequencyType)">
            <summary>生成以 <see cref="T:AppHelpers.JobFrequencyType"/> 为单位指定时刻运行的任务计划。</summary>
            <param name="runAtTime">任务的运行时刻。</param>
            <param name="frequency">执行任务的间隔基准。</param>
            <returns>在指定时刻运行的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RunOnce">
            <summary>生成仅运行一次的任务计划。</summary>
            <returns>立即运行一次的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RunByStrategy(System.Func{AppHelpers.JobContext,System.DateTime},System.Func{AppHelpers.JobContext,System.Exception,System.DateTime})">
            <summary>生成使用指定策略计划下次运行时间的任务计划。</summary>
            <param name="nextTimePlanner">返回下次计划执行时间的委托。</param>
            <param name="retryPlanner">在 <see cref="T:AppHelpers.IJobRunner"/> 执行出现异常后被调用，返回下次重试时间的委托。</param>
            <returns>使用指定委托计划任务执行时间的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.JobPlannerFactory.RunByStrategy(System.Func{System.DateTime},System.Func{System.DateTime})">
            <summary>生成使用指定策略计划下次运行时间的任务计划。</summary>
            <param name="nextTimePlanner">返回下次计划执行时间的委托。</param>
            <param name="retryPlanner">在 <see cref="T:AppHelpers.IJobRunner"/> 执行出现异常后被调用，返回下次重试时间的委托。</param>
            <returns>使用指定委托计划任务执行时间的 <see cref="T:AppHelpers.IJobPlanner"/> 实例。</returns>
        </member>
        <member name="T:AppHelpers.DefaultJobPlanner">
            <summary>表示默认的计划程序。</summary>
            <seealso cref="T:AppHelpers.IJobPlanner"/>
        </member>
        <member name="P:AppHelpers.DefaultJobPlanner.NextRunTime">
            <summary>获取下次执行的时间。</summary>
        </member>
        <member name="M:AppHelpers.DefaultJobPlanner.#ctor(System.DateTime)">
            <summary>指定创建下次执行任务时间的计划程序。</summary>
            <param name="nextRunTime">The next run time.</param>
        </member>
        <member name="M:AppHelpers.DefaultJobPlanner.#ctor">
            <summary>创建默认的计划程序。</summary>
        </member>
        <member name="M:AppHelpers.DefaultJobPlanner.PlanNextRun(AppHelpers.JobContext)">
            <summary>设置 <paramref name="context"/> 对应任务的下次执行时间。</summary>
            <param name="context">需要计划的任务。</param>
            <returns>总是返回 false。</returns>
        </member>
        <member name="M:AppHelpers.DefaultJobPlanner.PlanRetry(AppHelpers.JobContext,System.Exception)">
            <summary>设置出现异常 <paramref name="exception"/> 后重试执行 <paramref name="context"/> 对应任务的时间为 <see cref="P:AppHelpers.JobContext.LastErrorCount"/> 对应的分钟数，最长延迟 10 分钟。</summary>
            <param name="context">出现异常的任务。</param>
            <param name="exception">导致需要重试执行的异常。</param>
            <returns>调整了下次执行的时间后，返回 true。</returns>
        </member>
        <member name="T:AppHelpers.RunAtTimeJobPlanner">
            <summary>创建在某天指定时间执行的程序。</summary>
            <seealso cref="T:AppHelpers.DefaultJobPlanner"/>
        </member>
        <member name="P:AppHelpers.RunAtTimeJobPlanner.FrequencyType">
            <summary>获取任务后的时间间隔单位。</summary>
        </member>
        <member name="P:AppHelpers.RunAtTimeJobPlanner.RunAtTime">
            <summary>获取在执行任务后的执行时间。</summary>
        </member>
        <member name="M:AppHelpers.RunAtTimeJobPlanner.#ctor(System.TimeSpan,AppHelpers.JobFrequencyType)">
            <summary>创建 <see cref="T:AppHelpers.RunAtTimeJobPlanner"/> 实例，指定任务在每天特定时间执行。</summary>
            <param name="runAtTime">执行任务的时间。</param>
            <param name="frequency">执行任务的间隔基准。</param>
            <exception cref="T:AppHelpers.ValidationException`1">FrequencyType 值无效</exception>
        </member>
        <member name="M:AppHelpers.RunAtTimeJobPlanner.PlanNextRun(AppHelpers.JobContext)">
            <summary>设置 <paramref name="context"/> 对应任务的下次执行时间。</summary>
            <param name="context">需要计划的任务。</param>
            <returns>总是返回 false。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">FrequencyType 值无效</exception>
        </member>
        <member name="T:AppHelpers.SimpleJobPlanner">
            <summary>表示可以指定时间间隔重复执行任务的计划程序。</summary>
            <seealso cref="T:AppHelpers.IJobPlanner"/>
        </member>
        <member name="P:AppHelpers.SimpleJobPlanner.Interval">
            <summary>获取计划执行的时间间隔。</summary>
        </member>
        <member name="P:AppHelpers.SimpleJobPlanner.MaxExecution">
            <summary>获取计划执行的次数限制。</summary>
        </member>
        <member name="P:AppHelpers.SimpleJobPlanner.NextRunTime">
            <summary>获取或设置下次执行的时间。</summary>
        </member>
        <member name="P:AppHelpers.SimpleJobPlanner.RetryDelay">
            <summary>获取出错后的延迟重试策略。</summary>
        </member>
        <member name="M:AppHelpers.SimpleJobPlanner.#ctor(System.TimeSpan,System.Int32,System.Func{AppHelpers.JobContext,System.TimeSpan})">
            <summary>创建带有指定时间间隔和执行次数限制的 <see cref="T:AppHelpers.SimpleJobPlanner"/> 实例。</summary>
            <param name="interval">指定计划执行的时间间隔。时间间隔为 <see cref="F:System.TimeSpan.Zero"/> 时，不重复执行任务。</param>
            <param name="maxExecution">指定任务执行的次数上限。</param>
            <param name="retryDelay">指定任务出错后的重试延迟策略。默认策略为延迟的时间为 <see cref="P:AppHelpers.JobContext.LastErrorCount"/> 对应的分钟数，最长延迟 10 分钟。</param>
        </member>
        <member name="M:AppHelpers.SimpleJobPlanner.#ctor(System.TimeSpan)">
            <summary>创建带有指定时间间隔、无限次执行的 <see cref="T:AppHelpers.SimpleJobPlanner"/> 实例。</summary>
            <param name="interval">指定计划执行的时间间隔。</param>
        </member>
        <member name="M:AppHelpers.SimpleJobPlanner.#ctor(System.Int32)">
            <summary>创建带有指定时间间隔、无限次执行的 <see cref="T:AppHelpers.SimpleJobPlanner"/> 实例。</summary>
            <param name="intervalSeconds">指定计划执行的秒数。</param>
        </member>
        <member name="M:AppHelpers.SimpleJobPlanner.#ctor(System.Int32,System.Func{AppHelpers.JobContext,System.TimeSpan})">
            <summary>创建带有指定时间间隔、无限次执行的 <see cref="T:AppHelpers.SimpleJobPlanner"/> 实例。</summary>
            <param name="intervalSeconds">指定计划执行的秒数。</param>
            <param name="retryDelay">指定任务出错后的重试延迟策略。默认策略为延迟的时间为 <see cref="P:AppHelpers.JobContext.LastErrorCount"/> 对应的分钟数，最长延迟 10 分钟。</param>
        </member>
        <member name="M:AppHelpers.SimpleJobPlanner.PlanNextRun(AppHelpers.JobContext)">
            <summary>设置 <paramref name="context"/> 对应任务的下次执行时间。</summary>
            <param name="context">需要计划的任务。</param>
            <returns>调整了执行时间后，返回 true。</returns>
        </member>
        <member name="M:AppHelpers.SimpleJobPlanner.PlanRetry(AppHelpers.JobContext,System.Exception)">
            <summary>设置出现异常 <paramref name="exception"/> 后重试执行 <paramref name="context"/> 对应任务。</summary>
            <param name="context">出现异常的任务。</param>
            <param name="exception">导致需要重试执行的异常。</param>
            <returns>调整了下次执行的时间后，返回 true。</returns>
        </member>
        <member name="T:AppHelpers.JobScheduler">
            <summary>用于定期执行任务的计划程序。用法详情请查看帮助文档。</summary>
            <remarks>
            <para>本类用于创建并执行重复的任务。使用 <see cref="M:AppHelpers.JobScheduler.AddJob(AppHelpers.JobContext)"/> 或其它重载方法添加任务排程，调用 <see cref="M:AppHelpers.JobScheduler.Run"/> 或 <see cref="M:AppHelpers.JobScheduler.RunAsync"/> 方法启动排程。</para>
            <para>每个排程任务由一个独立的任务上下文（<see cref="T:AppHelpers.JobContext"/>）表示，每个上下文包含独立的名称（<see cref="P:AppHelpers.JobContext.Name"/>）、执行器（<see cref="T:AppHelpers.IJobRunner"/>）和计划器（<see cref="T:AppHelpers.IJobPlanner"/>）。执行器用于执行具体的任务，在出现错误后自我修复，并决定是否继续执行该任务。计划器用于确定任务的执行时机，以及重试任务的频率。</para>
            <para><b>执行任务</b></para>
            <list type="bullet">
            <item>排程启动后，在计划器规定的时间间隔内重复调用 <see cref="T:AppHelpers.IJobRunner"/>（执行器）的 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法执行任务。</item>
            <item>如执行器实现 <see cref="T:AppHelpers.IInitializeJobRunner"/> 接口，则在调用上述方法前，先调用 <see cref="M:AppHelpers.IInitializeJobRunner.Initialize(AppHelpers.JobContext)"/> 方法执行初始化操作。调用该方法后，立即检查 <see cref="P:AppHelpers.IInitializeJobRunner.IsInitialized"/> 属性。在该属性为 true 时，才会调用执行器的 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法，且在后续的调度过程中不会再调用 <see cref="M:AppHelpers.IInitializeJobRunner.Initialize(AppHelpers.JobContext)"/> 方法。如该属性为 false，则不会调用 <see cref="M:AppHelpers.IJobRunner.Run(AppHelpers.JobContext)"/> 方法，并在后续的调度过程重复上述初始化操作。</item>
            <item>所有的排程任务都是在异步线程池中运行的。</item>
            </list>
            <para><b>计划</b></para>
            <list type="bullet">
            <item>使用 <see cref="T:AppHelpers.JobPlannerFactory"/> 可创建常见时间间隔的计划器，如若干秒自动执行一次的 <see cref="M:AppHelpers.JobPlannerFactory.RepeatSecondly(System.Int32)"/>、在每天指定时间执行的 <see cref="M:AppHelpers.JobPlannerFactory.RunAtTime(System.TimeSpan)"/>、自定义执行策略的 <see cref="M:AppHelpers.JobPlannerFactory.RunByStrategy(System.Func{AppHelpers.JobContext,System.DateTime},System.Func{AppHelpers.JobContext,System.Exception,System.DateTime})"/>。</item>
            <item>执行器执行后，将调用 <see cref="T:AppHelpers.IJobPlanner"/>（计划器）的 <see cref="M:AppHelpers.IJobPlanner.PlanNextRun(AppHelpers.JobContext)"/> 确定任务是否继续执行。如该方法返回 true，则任务可继续执行。在该方法内，应修改 <see cref="P:AppHelpers.IJobPlanner.NextRunTime"/> 属性，设置下次执行任务的时间。如该方法返回 false，则任务将不再继续执行。</item>
            </list>
            <para><b>异常处理</b></para>
            <list type="bullet">
            <item>若执行器在执行过程中出现异常，则会调用执行器的 <see cref="M:AppHelpers.IJobRunner.Recover(System.Exception,AppHelpers.JobContext)"/> 方法，给予执行器修复错误的机会。该方法返回的 <see cref="T:AppHelpers.RunResult"/> 枚举值将决定是否继续执行该执行器。</item>
            <item>当恢复方法的返回值为 <see cref="F:AppHelpers.RunResult.Continue"/> 时，将调用计划器的 <see cref="M:AppHelpers.IJobPlanner.PlanRetry(AppHelpers.JobContext,System.Exception)"/> 方法，由计划器确定何时再执行该方法。计划器应修改 <see cref="P:AppHelpers.IJobPlanner.NextRunTime"/> 属性设置下次执行任务的时间。</item>
            <item>在后续的 <see cref="E:AppHelpers.JobScheduler.AfterRunningJob"/> 事件中，可通过检查 <see cref="P:AppHelpers.JobContext.LastError"/> 属性确定是否执行过程中出现异常。</item>
            <item>在异常处理流程出现如下情况时，任务将不再继续执行：</item>
            </list>
            <list type="number">
            <item><see cref="M:AppHelpers.IJobRunner.Recover(System.Exception,AppHelpers.JobContext)"/> 方法返回值不是 <see cref="F:AppHelpers.RunResult.Continue"/>；</item>
            <item><see cref="M:AppHelpers.IJobPlanner.PlanRetry(AppHelpers.JobContext,System.Exception)"/> 方法返回 false。</item>
            <item><see cref="E:AppHelpers.JobScheduler.AfterRunningJob"/> 事件处理函数将 <see cref="T:AppHelpers.CancelJobEventArgs"/> 的 <see cref="P:AppHelpers.CancelJobEventArgs.Cancel"/> 属性设置为 true。</item>
            </list>
            <para><b>停止任务</b></para>
            <list type="bullet">
            <item>要终止单一排程任务执行，可用 <see cref="M:AppHelpers.JobContext.Abort"/> 暂停任务，由于任务异步执行，所以该方法也是异步的。暂停任务后，可用 <see cref="M:AppHelpers.JobContext.Resume"/> 恢复该任务执行。</item>
            <item>如不再需要某任务执行，可用 <see cref="M:AppHelpers.JobScheduler.RemoveJob(System.String)"/> 方法从计划器删除任务。删除任务时，如任务正在运行，不会强制终止该任务。</item>
            <item>通过在 <see cref="E:AppHelpers.JobScheduler.AfterRunningJob"/> 事件处理器中设置 <see cref="T:AppHelpers.CancelJobEventArgs"/> 的取消属性，或让计划器的 <see cref="M:AppHelpers.IJobPlanner.PlanNextRun(AppHelpers.JobContext)"/> 方法返回 false，可让对应任务不再执行。</item>
            <item>要终止所有的排程计划，应调用 <see cref="M:AppHelpers.JobScheduler.CancelAsync"/>（异步取消）、<see cref="M:AppHelpers.JobScheduler.Stop"/>（发送取消指令，等待所有任务结束）或 <see cref="M:AppHelpers.JobScheduler.Dispose"/>（强制终止所有任务，回收资源）方法。</item>
            </list>
            <para><b>状态监测</b></para>
            <list type="bullet">
            <item>如需监视 <see cref="T:AppHelpers.JobScheduler"/> 所有任务的执行过程，可挂接 <see cref="E:AppHelpers.JobScheduler.BeforeRunningJob"/>、<see cref="E:AppHelpers.JobScheduler.AfterRunningJob"/>、<see cref="E:AppHelpers.JobScheduler.JobAdded"/>、<see cref="E:AppHelpers.JobScheduler.JobRemoved"/>、<see cref="E:AppHelpers.JobScheduler.JobFinished"/> 等事件。</item>
            <item>任务上下文有一组属性，可用于查询任务执行情况，如 <see cref="P:AppHelpers.JobContext.Status"/>、<see cref="P:AppHelpers.JobContext.LastError"/>、<see cref="P:AppHelpers.JobContext.IsFirstRun"/> 等等。</item>
            </list>
            <para><see cref="T:AppHelpers.JobContext"/> 的  <see cref="P:AppHelpers.JobContext.Container"/> 方法指向排程任务器。</para>
            <para>如需在任务之间共享信息，可通过 <see cref="P:AppHelpers.JobScheduler.Properties"/> 属性设置数据，该对象字典的数据是线程同步的。</para>
            </remarks>
        </member>
        <member name="M:AppHelpers.JobScheduler.#ctor">
            <summary>创建 <see cref="T:AppHelpers.JobScheduler"/> 类的新实例。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.#ctor(System.String)">
            <summary>创建 <see cref="T:AppHelpers.JobScheduler"/> 类的新实例，并指定日志记录分类。</summary>
            <param name="logCategory">任务排程主线程的日志记录类别。在出现执行异常时，日志将被记录到此类别。</param>
        </member>
        <member name="E:AppHelpers.JobScheduler.AfterRunningJob">
            <summary>在完成每次单独的任务排程后发生此事件。若事件 <see cref="P:AppHelpers.CancelJobEventArgs.Cancel"/> 为 true，则该次任务将标记为执行完成，不会再次执行。</summary>
        </member>
        <member name="E:AppHelpers.JobScheduler.BeforeRunningJob">
            <summary>在执行每次单独的任务排程前发生此事件。若事件 <see cref="P:AppHelpers.CancelJobEventArgs.Cancel"/> 为 true，则不会执行该次任务。</summary>
        </member>
        <member name="E:AppHelpers.JobScheduler.JobAdded">
            <summary>在添加新的任务排程后发生此事件。</summary>
        </member>
        <member name="E:AppHelpers.JobScheduler.JobFinished">
            <summary>在任务排程结束不再运行后发生此事件。</summary>
        </member>
        <member name="E:AppHelpers.JobScheduler.JobRemoved">
            <summary>在任务排程被删除后发生此事件。</summary>
        </member>
        <member name="E:AppHelpers.JobScheduler.SchedulerStarted">
            <summary>在执行所有任务排程时发生此事件。</summary>
        </member>
        <member name="E:AppHelpers.JobScheduler.SchedulerStopped">
            <summary>在所有任务排程完成后发生此事件。</summary>
        </member>
        <member name="P:AppHelpers.JobScheduler.CancellationPending">
            <summary>检查排程任务是否处于取消状态。</summary>
        </member>
        <member name="P:AppHelpers.JobScheduler.DisposeJobRunners">
            <summary>获取或设置是否在调用 <see cref="M:AppHelpers.JobScheduler.Dispose"/> 方法时自动销毁添加到计划的 <see cref="T:AppHelpers.IJobRunner"/>（默认：true）。</summary>
        </member>
        <member name="P:AppHelpers.JobScheduler.IsBusy">
            <summary>检查排程任务是否处于工作状态。</summary>
        </member>
        <member name="P:AppHelpers.JobScheduler.JobCount">
            <summary>获取当前的任务数量。</summary>
        </member>
        <member name="P:AppHelpers.JobScheduler.LogCategory">
            <summary>获取或设置任务排程主线程的日志分类。</summary>
        </member>
        <member name="P:AppHelpers.JobScheduler.PollingInterval">
            <summary>获取或设置检查新任务排程的轮询间隔（默认为 1 秒，最小为 0.1 秒）。</summary>
            <exception cref="T:System.InvalidOperationException">轮询间隔时间不能大于 1 天。</exception>
        </member>
        <member name="P:AppHelpers.JobScheduler.Properties">
            <summary>获取任务排程中共享的属性。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.AddJob(AppHelpers.IJobRunner,AppHelpers.IJobPlanner)">
            <summary>添加需要执行的任务。</summary>
            <param name="job">需要执行的任务。</param>
            <param name="planner">任务的执行计划。</param>
            <exception cref="T:AppHelpers.ValidationException">任务为空、任务已添加到另一个任务容器或任务名称为空。</exception>
            <returns>返回本 <see cref="T:AppHelpers.JobScheduler"/>。</returns>
        </member>
        <member name="M:AppHelpers.JobScheduler.AddJob(AppHelpers.JobContext)">
            <summary>添加需要执行的任务。</summary>
            <param name="job">需要执行的任务。</param>
            <exception cref="T:AppHelpers.ValidationException">任务为空、任务已添加到另一个任务容器或任务名称为空。</exception>
            <returns>返回本 <see cref="T:AppHelpers.JobScheduler"/>。</returns>
        </member>
        <member name="M:AppHelpers.JobScheduler.CancelAsync">
            <summary><para>异步取消排程任务。<see cref="P:AppHelpers.JobScheduler.CancellationPending"/> 将变为 true。将逐个调用当前正在执行任务的 <see cref="M:AppHelpers.JobContext.Abort"/> 方法，然后将其重新添加到排队列表。</para>
            <para>注意：此方法不释放任务所占用的资源，因此，可重新调用 <see cref="M:AppHelpers.JobScheduler.Run"/> 或 <see cref="M:AppHelpers.JobScheduler.RunAsync"/> 方法启动任务。如果需要释放任务所占用的资源，应在调用完毕后调用 <see cref="M:AppHelpers.JobScheduler.RemoveJob(System.String)"/> 方法移除任务，并释放其占用的资源。</para></summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.Stop">
            <summary>向所有任务发送 <see cref="M:AppHelpers.JobContext.Abort"/> 请求取消排程任务，一直等待，直到所有任务退出后返回。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.Dispose">
            <summary>终止所有任务并销毁执行器所占用的线程资源。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.FindJob(System.String)">
            <summary>寻找指定名称的任务。如找不到任务，返回空引用。</summary>
            <param name="jobName">任务的名称。</param>
        </member>
        <member name="M:AppHelpers.JobScheduler.GetJobs">
            <summary>获取当前排程集合的所有任务。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.GetPendingJobs">
            <summary>获取正在线程池排队的任务。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.GetRunningJobs">
            <summary>获取正在执行的任务。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.RemoveJob(System.String)">
            <summary>删除指定名称的第一个任务，并将该任务的 <see cref="P:AppHelpers.JobContext.Container"/> 设置为空，供重新使用。</summary>
            <param name="jobName">任务的名称。</param>
            <returns>返回删除的任务。如没有匹配的任务，返回空引用。</returns>
            <exception cref="T:AppHelpers.ValidationException">任务名称为空白。</exception>
        </member>
        <member name="M:AppHelpers.JobScheduler.Run">
            <summary>运行所有任务。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.RunAsync">
            <summary>在线程池中异步运行所有任务。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnAfterRunningJob(AppHelpers.CancelJobEventArgs)">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.AfterRunningJob"/> 事件。</summary>
            <param name="args">包含事件数据的 <see cref="T:AppHelpers.CancelJobEventArgs"/> 实例。</param>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnBeforeRunningJob(AppHelpers.CancelJobEventArgs)">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.BeforeRunningJob"/> 事件。</summary>
            <param name="args">包含事件数据的 <see cref="T:AppHelpers.CancelJobEventArgs"/> 实例。</param>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnJobAdded(AppHelpers.JobEventArgs)">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.JobAdded"/> 事件。</summary>
            <param name="args">包含事件数据的 <see cref="T:AppHelpers.JobEventArgs"/> 实例。</param>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnJobFinished(AppHelpers.JobEventArgs)">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.JobFinished"/> 事件。</summary>
            <param name="args">包含事件数据的 <see cref="T:AppHelpers.JobEventArgs"/> 实例。</param>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnJobRemoved(AppHelpers.JobEventArgs)">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.JobRemoved"/> 事件。</summary>
            <param name="args">包含事件数据的 <see cref="T:AppHelpers.JobEventArgs"/> 实例。</param>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnSchedulerStart">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.SchedulerStarted"/> 事件。</summary>
        </member>
        <member name="M:AppHelpers.JobScheduler.OnSchedulerStop">
            <summary>触发 <see cref="E:AppHelpers.JobScheduler.SchedulerStopped"/> 事件。</summary>
        </member>
        <member name="T:AppHelpers.RunResult">
            <summary>表示任务的执行结果。</summary>
        </member>
        <member name="F:AppHelpers.RunResult.None">
            <summary>表示任务未执行。</summary>
        </member>
        <member name="F:AppHelpers.RunResult.Failure">
            <summary>表示任务执行失败。</summary>
        </member>
        <member name="F:AppHelpers.RunResult.Continue">
            <summary>表示应继续执行任务。</summary>
        </member>
        <member name="F:AppHelpers.RunResult.Finish">
            <summary>表示任务执行结束，不需要再次执行。</summary>
        </member>
        <member name="T:AppHelpers.JobStatus">
            <summary>表示任务的执行状态。</summary>
        </member>
        <member name="F:AppHelpers.JobStatus.Idle">
            <summary>表示任务未执行或处于空闲状态。</summary>
        </member>
        <member name="F:AppHelpers.JobStatus.Pending">
            <summary>表示任务正在线程池等待执行。</summary>
        </member>
        <member name="F:AppHelpers.JobStatus.Running">
            <summary>表示任务正在执行。</summary>
        </member>
        <member name="F:AppHelpers.JobStatus.Finished">
            <summary>表示任务已完成执行。</summary>
        </member>
        <member name="M:AppHelpers.DbSqlBuilderAttribute.#ctor">
            <summary>创建不包含限定生成编号的 <see cref="T:AppHelpers.DbSqlBuilderAttribute"/> 实例。</summary>
        </member>
        <member name="M:AppHelpers.DbSqlBuilderAttribute.#ctor(System.Int32[])">
            <summary>创建包含指定生成编号的 <see cref="T:AppHelpers.DbSqlBuilderAttribute"/> 实例。</summary>
            <param name="forIds">指定本特性起作用的生成编号。</param>
        </member>
        <member name="P:AppHelpers.DbSqlBuilderAttribute.BuildIds">
            <summary>获取或指定本特性所标记属性的生成编号。</summary>
        </member>
        <member name="T:AppHelpers.DbFieldAttribute">
            <summary>用于标记数据库对应列名、长度、列位置的特性。对于 <see cref="T:AppHelpers.AccessorHelper"/> 和 <see cref="T:AppHelpers.DbHelper"/>，公共属性默认是可访问的；字段、方法和非公共属性默认是不可访问的，只有在标记此特性后才可访问。</summary>
            <seealso cref="T:AppHelpers.AccessorHelper"/>
            <seealso cref="T:AppHelpers.DbHelper"/>
        </member>
        <member name="M:AppHelpers.DbFieldAttribute.#ctor">
            <summary>标记成员对应数据库的字段及其它特性。</summary>
        </member>
        <member name="M:AppHelpers.DbFieldAttribute.#ctor(System.String)">
            <summary>标记成员对应数据库的字段名称及其它特性。</summary>
            <param name="name">指定所标记的列名称。</param>
        </member>
        <member name="P:AppHelpers.DbFieldAttribute.Name">
            <summary>获取或指定所标记的列名称。</summary>
        </member>
        <member name="P:AppHelpers.DbFieldAttribute.Order">
            <summary>获取或指定所标记的列位置。数值较小的排在前面。</summary>
        </member>
        <member name="T:AppHelpers.DbPropertyAttribute">
            <summary>用于标记成员访问路径的特性。对于 <see cref="T:AppHelpers.AccessorHelper"/> 和 <see cref="T:AppHelpers.DbHelper"/>，此特性用于穿透访问成员内部的成员变量。</summary>
        </member>
        <member name="M:AppHelpers.DbPropertyAttribute.#ctor(System.String)">
            <summary>标记复合类型属性，指示使用其值名称为 <paramref name="property"/> 的属性映射数据库表。路径以当前特性所标记的成员开始，子级访问路径以“.”标记，例如“Class.Id”将返回当前标记属性内“Class”属性的“Id”属性值。</summary>
            <param name="property">表或列的名称。</param>
        </member>
        <member name="M:AppHelpers.DbPropertyAttribute.#ctor(System.String,System.Int32)">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="M:AppHelpers.DbPropertyAttribute.#ctor(System.String,System.Int32[])">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="P:AppHelpers.DbPropertyAttribute.PropertyPath">
            <summary>获取所应提取属性的名称或访问路径。访问路径以“.”标记，可访问深层的属性，例如“Class.Id”将返回“Class”属性的“Id”属性值。</summary>
        </member>
        <member name="P:AppHelpers.DbPropertyAttribute.ApplyConstraints">
            <summary>获取或指定是否应用目标成员上标记的约束特性。</summary>
        </member>
        <member name="P:AppHelpers.DbPropertyAttribute.SkipNullChecking">
            <summary>获取或指定是否跳过路径访问的空引用检查。</summary>
        </member>
        <member name="P:AppHelpers.DbPropertyAttribute.FieldName">
            <summary>获取或指定所标记的列名称。</summary>
        </member>
        <member name="P:AppHelpers.DbPropertyAttribute.Order">
            <summary>获取或指定所标记的列位置。数值较小的排在前面。</summary>
        </member>
        <member name="T:AppHelpers.DbNameAttribute">
            <summary>用于标记数据库对应表名的特性。</summary>
            <seealso cref="T:AppHelpers.DbSqlBuilderAttribute"/>
        </member>
        <member name="M:AppHelpers.DbNameAttribute.#ctor(System.String)">
            <summary>生成标记数据库对应表名的特性实例。</summary>
            <param name="name">表或列的名称。</param>
        </member>
        <member name="M:AppHelpers.DbNameAttribute.#ctor(System.String,System.Int32)">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="M:AppHelpers.DbNameAttribute.#ctor(System.String,System.Int32[])">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="P:AppHelpers.DbNameAttribute.Name">
            <summary>获取所标记的表或列的名称。</summary>
        </member>
        <member name="T:AppHelpers.DbIgnoreAttribute">
            <summary>用于标记忽略字段的特性。</summary>
            <seealso cref="T:AppHelpers.DbSqlBuilderAttribute"/>
        </member>
        <member name="M:AppHelpers.DbIgnoreAttribute.#ctor">
            <summary>标记在生成的 SQL 中忽略本特性所标记的属性。</summary>
        </member>
        <member name="M:AppHelpers.DbIgnoreAttribute.#ctor(System.Int32)">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="M:AppHelpers.DbIgnoreAttribute.#ctor(System.Int32[])">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="T:AppHelpers.DbPrimaryKeyAttribute">
            <summary>用于标记数据库对应表主键、自动递增列、序列数的特性。</summary>
            <seealso cref="T:AppHelpers.DbSqlBuilderAttribute"/>
        </member>
        <member name="F:AppHelpers.DbPrimaryKeyAttribute.Identity">
            <summary>表示此特性所标记的属性为自动递增。</summary>
        </member>
        <member name="M:AppHelpers.DbPrimaryKeyAttribute.#ctor">
            <summary>生成新的 <see cref="T:AppHelpers.DbPrimaryKeyAttribute"/> 类实例。</summary>
        </member>
        <member name="M:AppHelpers.DbPrimaryKeyAttribute.#ctor(System.String)">
            <summary>生成新的 <see cref="T:AppHelpers.DbPrimaryKeyAttribute"/> 类实例，并指定该主键列采用自动递增序列。</summary>
            <param name="sequence">序列或自动递增列的名称。</param>
        </member>
        <member name="M:AppHelpers.DbPrimaryKeyAttribute.#ctor(System.String,System.Int32[])">
            <summary>暂时不要使用此重载构造函数。</summary>
        </member>
        <member name="P:AppHelpers.DbPrimaryKeyAttribute.Sequence">
            <summary>获取序列的名称。</summary>
        </member>
        <member name="T:AppHelpers.DbProduct">
            <summary>表示特定的数据库产品。</summary>
        </member>
        <member name="F:AppHelpers.DbProduct.SqlServer">
            <summary>SQL server 数据库</summary>
        </member>
        <member name="F:AppHelpers.DbProduct.Oracle">
            <summary>Oracle 数据库</summary>
        </member>
        <member name="F:AppHelpers.DbProduct.MySql">
            <summary>My SQL 数据库</summary>
        </member>
        <member name="T:AppHelpers.StringHelper">
            <summary>用于帮助处理字符串的类。</summary>
        </member>
        <member name="F:AppHelpers.StringHelper.UTF8WithoutBom">
            <summary>不带字节顺序标记（BOM）的 UTF8 编码。</summary>
        </member>
        <member name="M:AppHelpers.StringHelper.CompareOrdinalIgnoreCase(System.String,System.String)">
            <summary>忽略大小写比较两个字符串的先后顺序。</summary>
            <param name="text">需要比较的第 1 个字符串。</param>
            <param name="otherText">需要比较的第 2 个字符串。</param>
            <returns>返回 <see cref="M:System.String.Compare(System.String,System.String,System.StringComparison)"/> 的比较结果。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.EqualsOrdinalIgnoreCase(System.String,System.String)">
            <summary>忽略大小写比较两个字符串是否相等。</summary>
            <param name="text">需要比较的第 1 个字符串。</param>
            <param name="otherText">需要比较的第 2 个字符串。</param>
            <returns>返回 <see cref="M:System.String.Equals(System.String,System.String,System.StringComparison)"/> 的比较结果。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.IsNullOrWhiteSpace(System.String)">
            <summary>检查传入的字符串是否为空或剪除空格后为空。</summary>
            <param name="text">需要检查的字符串。</param>
            <returns>当字符串为空或只包含空白内容时为 true，否则为 false。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstituteEmpty(System.String,System.String)">
            <summary>
            在指定字符串 <paramref name="value"/> 为空或 <see cref="F:System.String.Empty"/> 时，返回 <paramref name="otherValue"/>，否则返回原值。
            </summary>
            <param name="value">需要检查的值。</param>
            <param name="otherValue">返回的另一个值。</param>
            <returns>指定值为空或 <see cref="F:System.String.Empty"/> 时返回 <paramref name="otherValue"/>，否则返回原值。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.ThrowIfNullOrWhiteSpace(System.String,System.String)">
            <summary>在传入的字符串为空或仅包含空白字符时，抛出异常。</summary>
            <param name="text">需要检查的字符串。</param>
            <param name="message">抛出异常的文本。</param>
            <returns>传入的字符串。</returns>
            <exception cref="T:System.ArgumentException">文本为空或仅包含空白字符。</exception>
        </member>
        <member name="M:AppHelpers.StringHelper.StripControlCharacters(System.String)">
            <summary>删除字符串中的控制字符。</summary>
            <param name="value">需要处理的字符串。</param>
            <returns>删除了控制字符的新字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.ReplaceControlAndBomCharacters(System.String)">
            <summary>返回传入字符串中控制字符和 Unicode 字节标记字符替换为空格后的新字符串。</summary>
            <param name="source">需要处理的字符串。</param>
            <returns>将控制字符和 Unicode 字节标记字符替换为空格的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.CountOccurrence(System.String,System.String,System.Boolean)">
            <summary>计算 <paramref name="content"/> 在 <paramref name="source"/> 中出现的次数。</summary>
            <param name="source">要检查的内容。</param>
            <param name="content">要检查出现次数的字符串。</param>
            <param name="ignoreCase">是否忽略大小写。</param>
            <returns><paramref name="content"/> 在 <paramref name="source"/> 中出现的次数。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.SplitLines(System.String)">
            <summary>将字符串按分行符拆分成数组。</summary>
            <param name="text">需要拆分的字符串。</param>
            <returns>拆分后的数组。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.SplitLines(System.String,System.Boolean)">
            <summary>将字符串按分行符拆分成数组。</summary>
            <param name="text">需要拆分的字符串。</param>
            <param name="removeEmptyLines">是否删除空行。</param>
            <returns>拆分后的数组。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.DecodeUrl(System.String)">
            <summary>将字符串按 URL 编码的方式解码。</summary>
            <param name="urlEncoded">需要解码的字符串。</param>
            <returns>解码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.EncodeUrl(System.String)">
            <summary>将字符串按 URL 编码的方式编码。</summary>
            <param name="url">需要编码的字符串。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.DecodeUnicode(System.String)">
            <summary>解码 U+（或 U-）十六进制表达形式的字符。如字符串格式不正确，返回 <see cref="F:System.String.Empty"/>。</summary>
            <param name="unicodeNotation">U+FFFF 或 U-FFFF 形式的字符串。</param>
            <returns>解码后的字符。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.DecodeMarkupEntity(System.String)">
            <summary>解码 XML 或 HTML 中的十进制或十六进制数字实体。如字符串格式不正确，返回 <see cref="F:System.String.Empty"/>。</summary>
            <param name="entity">数字实体标识。</param>
            <returns>解码后的字符。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.EscapeNewLineTab(System.String)">
            <summary>将输入字符串的回车、换行、制表符、斜杠“\”换成斜杠转义后的形式。</summary>
            <param name="source">需要转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.EscapeString(System.String)">
            <summary>将输入字符串的回车、换行、制表符、斜杠“\”、半角引号“"”换成斜杠转义后的形式。</summary>
            <param name="source">需要转义的字符串。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.EscapeString(System.String,System.Boolean)">
            <summary>将输入字符串的回车、换行、制表符、斜杠“\”换成斜杠转义后的形式。</summary>
            <param name="source">需要转义的字符串。</param>
            <param name="escapeQuotes">是否转义引号。</param>
            <returns>转义后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.UnescapeNewLineTab(System.String)">
            <summary>将输入字符串的回车、换行、制表符、斜杠“\”换成斜杠反转义后的形式。</summary>
            <param name="source">需要反转义的字符串。</param>
            <returns>反转义后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.UnescapeString(System.String)">
            <summary>将输入字符串的回车、换行、制表符、斜杠“\”、半角引号“"”换成斜杠反转义后的形式。</summary>
            <param name="source">需要反转义的字符串。</param>
            <returns>反转义后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.UnescapeString(System.String,System.Boolean)">
            <summary>将输入字符串的回车、换行、制表符、斜杠“\”换成斜杠反转义后的形式。</summary>
            <param name="source">需要反转义的字符串。</param>
            <param name="unescapeQuotes">是否反转义引号。</param>
            <returns>反转义后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.StripHtmlChars(System.String)">
            <summary>返回删除目标字符串中不适合在 HTML 代码中出现的字符后的字符串。</summary>
            <param name="source">需要删除 HTML 字符的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.StripChars(System.String,System.Char[])">
            <summary>将 <paramref name="source"/> 中每个属于 <paramref name="chars"/> 集合的字符删除，返回删除字符后的字符串。</summary>
            <param name="source">包含需要删除字符的字符串。</param>
            <param name="chars">需要删除的字符。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.FilterChars(System.String,System.Char[])">
            <summary>从 <paramref name="source"/> 中将不包含在 <paramref name="chars"/> 的每个字符删除，返回删除字符后的字符串。</summary>
            <param name="source">需要筛选字符的字符串。</param>
            <param name="chars">需要保留的字符。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.HexToInt32(System.String,System.Int32)">
            <summary>将 HexBin 编码的字符串转换为整形数值。</summary>
            <param name="value">需要解码的字符串。</param>
            <param name="defaultValue">解码失败时返回的默认值。</param>
            <returns>成功解码后的数值。如解码失败，返回 <paramref name="defaultValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.DivideBetween(System.String,System.Char)">
            <summary>将字符串 <paramref name="source"/> 划分成 <paramref name="separator"/> 前后两个部分。如字符串不包含 <paramref name="separator"/>，则第 1 部分包含原字符串，第 2 部分为 <see cref="F:System.String.Empty"/>。</summary>
            <param name="source">需要拆分的字符串。</param>
            <param name="separator">拆分字符。</param>
            <returns>包含前后两个部分字符串的 <see cref="T:System.Tuple`2"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringBefore(System.String,System.String)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="value"/> 之前的子字符串。</summary>
            <returns>子字符串前的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符串，则返回 <see cref="F:System.String.Empty"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="value">开始提取内容的字符串部分。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringBefore(System.String,System.String,System.String)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="value"/> 之前的子字符串。</summary>
            <returns>子字符串前的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符串，则返回 <paramref name="defaultText"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="value">开始提取内容的字符串部分。</param>
            <param name="defaultText">在 <paramref name="source"/> 不包含 <paramref name="value"/> 时输出的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringBefore(System.String,System.Char)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="character"/> 之前的子字符串。</summary>
            <returns>字符前的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符，则返回 <see cref="F:System.String.Empty"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="character">标记提取内容的字符。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringBefore(System.String,System.Char,System.String)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="character"/> 之前的子字符串。</summary>
            <returns>字符前的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符，则返回 <paramref name="defaultText"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="character">标记提取内容的字符。</param>
            <param name="defaultText">在 <paramref name="source"/> 不包含 <paramref name="character"/> 时输出的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringAfter(System.String,System.String)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="value"/> 之后的子字符串。</summary>
            <returns>子字符串后的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符，则返回 <see cref="F:System.String.Empty"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="value">开始提取内容的字符串部分。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringAfter(System.String,System.String,System.String)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="value"/> 之后的子字符串。</summary>
            <returns>子字符串后的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符串，则返回 <paramref name="defaultText"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="value">开始提取内容的字符串部分。</param>
            <param name="defaultText">在 <paramref name="source"/> 不包含 <paramref name="value"/> 时输出的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringAfter(System.String,System.Char)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="character"/> 之后的子字符串。</summary>
            <returns>字符后的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符，则返回 <see cref="F:System.String.Empty"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="character">开始提取内容的字符。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.SubstringAfter(System.String,System.Char,System.String)">
            <summary>返回 <paramref name="source"/> 中 <paramref name="character"/> 之后的子字符串。</summary>
            <returns>字符后的字符串。</returns>
            <remarks>如果指定字符串不包含目标字符，则返回 <paramref name="defaultText"/>。</remarks>
            <param name="source">需要提取的字符串。</param>
            <param name="character">开始提取内容的字符。</param>
            <param name="defaultText">在 <paramref name="source"/> 不包含 <paramref name="character"/> 时输出的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.First(System.String,System.Int32)">
            <summary>
            在 <paramref name="text"/> 中提取开头的 <paramref name="count"/> 个字符。
            </summary>
            <param name="text">需要提取内容的字符串。</param>
            <param name="count">需提取的字符数量。</param>
            <returns>
            包含指定数量字符的字符串。如字符数量不足，则返回整个字符串。如 <paramref name="count"/> 小于 1，或原始字符串不包含内容，则返回 0 长度的字符串。
            </returns>
        </member>
        <member name="M:AppHelpers.StringHelper.Take(System.String,System.Int32,System.Int32)">
            <summary>
            在 <paramref name="text"/> 中提取第 <paramref name="startIndex"/> 开始的 <paramref name="count"/> 个字符。
            </summary>
            <param name="text">需要提取内容的字符串。</param>
            <param name="startIndex">开始提取项目的位置。</param>
            <param name="count">需提取的字符数量。</param>
            <returns>
            包含指定数量字符的字符串。如字符数量不足，则返回开始提取位置到结尾的所有项。如开始提取的位置位于字符串结尾以外，或 <paramref name="count"/> 小于 1，或原始字符串不包含内容，则返回 0 长度的字符串。
            </returns>
        </member>
        <member name="M:AppHelpers.StringHelper.Base64Encode(System.String,System.Text.Encoding)">
            <summary>将字符串以 <paramref name="encoding"/> 转换为字节数组后，再以 Base64 编码。</summary>
            <param name="text">需要编码的字符串。</param>
            <param name="encoding">编码形式。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.Base64Encode(System.String)">
            <summary>将字符串以 UTF-8 及 Base64 编码。</summary>
            <param name="text">需要编码的字符串。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.Base64Decode(System.String,System.Text.Encoding)">
            <summary>将字符串以 Base64 解码后所得的字节数组，再以 <paramref name="encoding"/> 解码为字符串。</summary>
            <param name="text">需要解码的字符串。</param>
            <param name="encoding">文本编码形式。</param>
            <returns>解码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.Base64Decode(System.String)">
            <summary>将字符串以 UTF-8 及 Base64 解码。</summary>
            <param name="text">需要解码的字符串。</param>
            <returns>解码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>在符合 <paramref name="condition"/> 条件时将 <paramref name="text"/> 附加到 <paramref name="stringBuilder"/>。</summary>
            <param name="stringBuilder">需附加字符串的 <see cref="T:System.Text.StringBuilder"/>。</param>
            <param name="condition">决定是否附加字符串的条件。</param>
            <param name="text">需要附加的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>在符合 <paramref name="condition"/> 条件时将 <paramref name="text"/> 和换行附加到 <paramref name="stringBuilder"/>。</summary>
            <param name="stringBuilder">需附加字符串的 <see cref="T:System.Text.StringBuilder"/>。</param>
            <param name="condition">决定是否附加字符串的条件。</param>
            <param name="text">需要附加的字符串。</param>
        </member>
        <member name="M:AppHelpers.StringHelper.ReplaceMany(System.String,System.String[],System.String[])">
            <summary>
            将原字符串中所有 <paramref name="oldValues"/> 替换为 <paramref name="newValues"/> 的相应项目。
            </summary>
            <param name="str">需要替换的字符串。</param>
            <param name="oldValues">查找的字符串数组。</param>
            <param name="newValues">替换的字符串数组。</param>
            <returns>替换后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.ReplaceMany(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            将原字符串中 <paramref name="valueMapper"/> 的键替换为对应的值。
            </summary>
            <param name="str">需要替换的字符串。</param>
            <param name="valueMapper">包含查找与替换关系的 <see cref="T:System.Collections.Generic.IDictionary`2"/></param>
            <returns>替换后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.FindAll(System.String,System.Func{System.String,System.Int32,System.Boolean},System.String[])">
            <summary>
            在 <paramref name="source"/> 中查找 <paramref name="values"/> 的出现位置，并对于每个匹配项调用 <paramref name="matchHandler"/> 处理。
            </summary>
            <param name="source">需要匹配的字符串。</param>
            <param name="matchHandler">处理匹配结果的委托。
            委托的第 1 个参数是找到的字符串，第 2 个参数是字符串在 <paramref name="source"/> 中的位置。
            委托的返回值为 false 时，终止匹配操作。</param>
            <param name="values">需要查找的值。</param>
            <returns>原字符串。</returns>
            <exception cref="T:System.ArgumentException">要查找的字符串中不能有空字符串。</exception>
        </member>
        <member name="M:AppHelpers.StringHelper.ReplaceMany(System.String,System.String[],System.String[],System.Int32)">
            <summary>
            将原字符串中所有 <paramref name="oldValues"/> 替换为 <paramref name="newValues"/> 的相应项目。
            </summary>
            <param name="str">需要替换的字符串。</param>
            <param name="oldValues">查找的字符串数组。</param>
            <param name="newValues">替换的字符串数组。</param>
            <param name="resultStringLength">替换缓冲区长度（可选，默认为传入字符串长度的两倍）。如果替换后的字符串大于缓冲区，将导致重新分配缓冲区和复制数据操作。</param>
            <returns>替换后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.StringHelper.GetUnicodeBytes(System.String,System.Boolean)">
            <summary>返回字符串的 UTF-16（低位在前）编码。注意：本方法仅适用于使用 Unicode 内码的 Windows NT 内核系统。</summary>
            <param name="value">需要获取编码的字符串。</param>
            <param name="bigEndian">是否返回 BigEndian（高位在前）的统一码。</param>
            <remarks>由于系统采用 UTF-16 LittleEndian 在内存中表示字符串，故此方法直接复制字符串的内存副本返回。</remarks>
        </member>
        <member name="M:AppHelpers.StringHelper.ExpandArray(System.Char[],System.Int32,System.Int32)">
            <summary>
            Extends an array to a new size by allocating a new array and copying data from the first one.
            </summary>
            <param name="array">An saray to extend.</param>
            <param name="oldSize">Number of elements to copy from the original array. It must be less or equal than the array's length.</param>
            <param name="newSize">Size of an array after expanding.</param>
        </member>
        <member name="T:AppHelpers.Cache`2">
            <summary>内存中的泛型缓存。</summary>
            <typeparam name="TKey">用于定位缓存项目的键类型。</typeparam>
            <typeparam name="TValue">缓存项目的值类型。</typeparam>
        </member>
        <member name="M:AppHelpers.Cache`2.#ctor">
            <summary>以默认容量创建缓存 <see cref="T:AppHelpers.Cache`2"/>。</summary>
        </member>
        <member name="M:AppHelpers.Cache`2.#ctor(System.Int32)">
            <summary>以指定的容量创建缓存 <see cref="T:AppHelpers.Cache`2"/>。</summary>
        </member>
        <member name="M:AppHelpers.Cache`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>以默认的容量和比较器创建缓存 <see cref="T:AppHelpers.Cache`2"/>。</summary>
        </member>
        <member name="M:AppHelpers.Cache`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0},System.Func{`0,`1})">
            <summary>以指定的容量、比较器和创建器创建缓存 <see cref="T:AppHelpers.Cache`2"/>。</summary>
        </member>
        <member name="P:AppHelpers.Cache`2.Capacity">
            <summary>返回缓存区域哈希篮容量。</summary>
        </member>
        <member name="P:AppHelpers.Cache`2.Comparer">
            <summary>返回用于比较键是否相等的比较器。</summary>
        </member>
        <member name="P:AppHelpers.Cache`2.Count">
            <summary>返回当前已缓存项目的数量。</summary>
        </member>
        <member name="P:AppHelpers.Cache`2.Creator">
            <summary>获取或设置用于创建值的创建器。</summary>
        </member>
        <member name="M:AppHelpers.Cache`2.Clear">
            <summary>清空缓存的内容。</summary>
        </member>
        <member name="M:AppHelpers.Cache`2.ContainsKey(`0)">
            <summary>检查缓存中是否存在指定的 <paramref name="key"/> 。</summary>
            <param name="key">用于定位字典项目的键。</param>
        </member>
        <member name="M:AppHelpers.Cache`2.GetOrCreateValue(`0)">
            <summary>从缓存中检索指定键对应的项，如不存在对应项，调用 <see cref="P:AppHelpers.Cache`2.Creator"/> 方法生成对应的项，并将其缓存。如 <see cref="P:AppHelpers.Cache`2.Creator"/> 为空，则缓存并返回 <typeparamref name="TValue"/> 的默认值。</summary>
            <param name="key">用于定位字典项目的键。</param>
            <exception cref="T:System.ArgumentNullException">键为空。</exception>
        </member>
        <member name="M:AppHelpers.Cache`2.GetOrDefault(`0)">
            <summary>从缓存中检索指定键对应的项，如不存在对应项，返回 <typeparamref name="TValue"/> 的默认值。</summary>
            <param name="key">用于定位字典项目的键。</param>
            <returns>与键对应的项。如不存在对应项，返回 <typeparamref name="TValue"/> 的默认值。</returns>
            <exception cref="T:System.ArgumentNullException">键为空。</exception>
        </member>
        <member name="M:AppHelpers.Cache`2.PurgeByLastAccessTime(System.DateTime,System.Int32)">
            <summary>将访问时间在 <paramref name="dueTime"/> 之前的项目从字典中删除。</summary>
            <param name="dueTime">项目的最近访问时间。</param>
            <param name="maxRemoval">最多删除数量。</param>
            <returns>返回已删除的项目数量。</returns>
        </member>
        <member name="M:AppHelpers.Cache`2.Remove(`0)">
            <summary>从缓存中删除指定键的对象。</summary>
            <param name="key">需要删除的对象键值。</param>
            <returns>是否删除了对象。</returns>
            <exception cref="T:System.ArgumentNullException">键为空。</exception>
        </member>
        <member name="M:AppHelpers.Cache`2.Set(`0,`1)">
            <summary>设置与指定的键相关联的值。</summary>
            <param name="key">要获取或设置的值的键。</param>
            <param name="value">与指定的键相关联的值。</param>
            <exception cref="T:System.ArgumentNullException">键为空。</exception>
        </member>
        <member name="M:AppHelpers.Cache`2.Remove(System.Predicate{AppHelpers.CacheItem{`0,`1}},System.Int32)">
            <summary>按项目被访问时间的先后顺序遍历所有项，根据 <paramref name="filter"/> 的条件删除匹配的项目。</summary>
            <param name="filter">用于删除项目的筛选器。</param>
            <param name="maxRemoval">最多删除记录数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter"/> 为空。</exception>
        </member>
        <member name="T:AppHelpers.CacheItem`2">
            <summary>缓存中的项目。</summary>
            <typeparam name="TKey">用于定位缓存项目的键类型。</typeparam>
            <typeparam name="TValue">缓存项目的值类型。</typeparam>
        </member>
        <member name="P:AppHelpers.CacheItem`2.Key">
            <summary>返回缓存项目的键。</summary>
        </member>
        <member name="P:AppHelpers.CacheItem`2.Value">
            <summary>返回缓存项目的值。</summary>
        </member>
        <member name="P:AppHelpers.CacheItem`2.LastAccessTime">
            <summary>返回缓存项目最近的访问时间。</summary>
        </member>
        <member name="T:AppHelpers.KeyedHashSet`2">
            <summary>内存中以指定键定位项的泛型缓存。项的键从 <typeparamref name="TValue"/> 中产生。</summary>
            <typeparam name="TKey">用于定位缓存项目的键类型。</typeparam>
            <typeparam name="TValue">缓存项目的值类型。</typeparam>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.#ctor(System.Func{`1,`0})">
            <summary>以键获取器和默认初始容量创建缓存 <see cref="T:AppHelpers.KeyedHashSet`2"/>。</summary>
            <param name="keyGetter">从 <typeparamref name="TValue"/> 实例中获取 <typeparamref name="TKey"/> 类型键值的委托。注意：缓存只保留值，键是动态生成的，必须确保对同一项反复调用 <paramref name="keyGetter"/> 方法时返回相同的值。</param>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.#ctor(System.Func{`1,`0},System.Int32)">
            <summary>以键获取器、指定的初始容量创建缓存 <see cref="T:AppHelpers.KeyedHashSet`2"/>。</summary>
            <param name="keyGetter">从 <typeparamref name="TValue"/> 实例中获取 <typeparamref name="TKey"/> 类型键值的委托。注意：缓存只保留值，键是动态生成的，必须确保对同一项反复调用 <paramref name="keyGetter"/> 方法时返回相同的值。</param>
            <param name="capacity">集合的初始容量。</param>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.#ctor(System.Func{`1,`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>以键获取器、比较器和默认的初始容量，创建缓存 <see cref="T:AppHelpers.KeyedHashSet`2"/>。</summary>
            <param name="keyGetter">从 <typeparamref name="TValue"/> 实例中获取 <typeparamref name="TKey"/> 类型键值的委托。注意：缓存只保留值，键是动态生成的，必须确保对同一项反复调用 <paramref name="keyGetter"/> 方法时返回相同的值。</param>
            <param name="comparer">用于比较键值是否一致的比较器。</param>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.#ctor(System.Func{`1,`0},System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>以指定的键获取器、容量和比较器创建缓存 <see cref="T:AppHelpers.KeyedHashSet`2"/>。</summary>
            <param name="keyGetter">从 <typeparamref name="TValue"/> 实例中获取 <typeparamref name="TKey"/> 类型键值的委托。注意：缓存只保留值，键是动态生成的，必须确保对同一项反复调用 <paramref name="keyGetter"/> 方法时返回相同的值。</param>
            <param name="capacity">集合的初始容量。</param>
            <param name="comparer">用于比较键值是否一致的比较器。</param>
        </member>
        <member name="P:AppHelpers.KeyedHashSet`2.Capacity">
            <summary>返回缓存区域哈希篮容量。</summary>
        </member>
        <member name="P:AppHelpers.KeyedHashSet`2.Comparer">
            <summary>返回用于比较键是否相等的比较器。</summary>
        </member>
        <member name="P:AppHelpers.KeyedHashSet`2.Count">
            <summary>返回当前已缓存项目的数量。</summary>
        </member>
        <member name="P:AppHelpers.KeyedHashSet`2.KeyGetter">
            <summary>获取键值的获取器。</summary>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.Clear">
            <summary>清空缓存的内容。</summary>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.Contains(`1)">
            <summary>检查缓存中是否存在与指定的 <paramref name="value"/> 对应键值的项。</summary>
            <param name="value">需要检查是否位于集合的项目。</param>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.ContainsKey(`0)">
            <summary>检查缓存中是否存在 <paramref name="key"/> 对应的项。</summary>
            <param name="key">需要检查是否位于集合的项目。</param>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.GetOrDefault(`0)">
            <summary>从缓存中检索指定键对应的项，如不存在对应项，返回 <typeparamref name="TValue"/> 的默认值。</summary>
            <param name="key">用于定位字典项目的键。</param>
            <returns>与键对应的项。如不存在对应项，返回 <typeparamref name="TValue"/> 的默认值。</returns>
            <exception cref="T:System.ArgumentNullException">键为空。</exception>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.Remove(`0)">
            <summary>从缓存中删除指定键的对象。</summary>
            <param name="key">需要删除的对象键值。</param>
            <returns>是否删除了对象。</returns>
            <exception cref="T:System.ArgumentNullException">键为空。</exception>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.Remove(System.Predicate{`1},System.Collections.Generic.IComparer{`1},System.Int32)">
            <summary>根据 <paramref name="filter"/> 的条件删除匹配的项目。</summary>
            <param name="filter">用于删除项目的筛选器。</param>
            <param name="sortingComparer">用于确定遍历项顺序的比较器。如比较器为空，则按照集合内部的存储顺序遍历项。</param>
            <param name="maxRemoval">最多删除记录数。</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filter"/> 为空。</exception>
        </member>
        <member name="M:AppHelpers.KeyedHashSet`2.Set(`1)">
            <summary>
            向集合添加指定的值。如集合中存在相同键值的项，则替换该项。
            </summary>
            <param name="value">需要添加到集合的值。</param>
        </member>
        <member name="T:AppHelpers.Lockable`1">
            <summary>提供线程同步对象 <see cref="P:AppHelpers.Lockable`1.SyncRoot"/> 以进行特定对象的线程同步操作的类。</summary>
            <typeparam name="TObject">需要被线程同步的对象类型。</typeparam>
            <remarks>
            <para>尽管同步对象 <see cref="P:AppHelpers.Lockable`1.SyncRoot"/> 的锁定区域可以跨越成员或类的边界或同时跨越两者的边界，但并不推荐这样做。锁定和解锁 <see cref="P:AppHelpers.Lockable`1.SyncRoot"/> 时应只在成员内部进行。</para>
            <para>当选择要同步的对象时，应只锁定私有或内部对象。锁定外部对象可能导致死锁，这是因为不相关的代码可能会出于不同的目的而选择锁定相同的对象。</para>
            </remarks>
        </member>
        <member name="P:AppHelpers.Lockable`1.SyncRoot">
            <summary>用于对可同步对象的访问进行同步的对象。在需要同步访问 <see cref="P:AppHelpers.Lockable`1.Value"/> 时，锁定本成员；结束访问时，解锁本成员。</summary>
        </member>
        <member name="P:AppHelpers.Lockable`1.Value">
            <summary>获取被线程同步的实际对象。</summary>
        </member>
        <member name="M:AppHelpers.Lockable`1.#ctor(`0)">
            <summary>创建关联指定值的可同步对象。</summary>
            <param name="value">需要被线程同步的对象。</param>
        </member>
        <member name="M:AppHelpers.Lockable`1.#ctor(`0,System.Object)">
            <summary>创建关联指定值及同步锁定对象的可同步对象。</summary>
            <param name="value">需要被线程同步的对象。</param>
            <param name="syncRoot">设置为 <see cref="P:AppHelpers.Lockable`1.SyncRoot"/> 的对象。</param>
        </member>
        <member name="M:AppHelpers.Lockable`1.op_Explicit(AppHelpers.Lockable{`0})~`0">
            <summary>返回指定 <see cref="T:AppHelpers.Lockable`1"/> 的值。</summary>
            <param name="original"><see cref="T:AppHelpers.Lockable`1"/> 值。</param>
        </member>
        <member name="M:AppHelpers.Lockable`1.op_Explicit(`0)~AppHelpers.Lockable{`0}">
            <summary>创建一个新的 <see cref="T:AppHelpers.Lockable`1"/> 可同步对象，并将其初始化为指定的值。</summary>
            <param name="value">需要被线程同步的对象。</param>
        </member>
        <member name="M:AppHelpers.Lockable`1.Equals(System.Object)">
            <summary>指示此实例与指定对象是否相等。</summary>
            <returns>如果 <paramref name="obj" /> 和该实例具有相同的类型并表示相同的值，则为 true；否则为 false。</returns>
            <param name="obj">要比较的另一个对象。</param>
        </member>
        <member name="M:AppHelpers.Lockable`1.GetHashCode">
            <summary>返回此实例的哈希代码。</summary>
            <returns>一个 32 位有符号整数，它是该实例的哈希代码。</returns>
        </member>
        <member name="M:AppHelpers.Lockable`1.Equals(AppHelpers.Lockable{`0})">
            <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
            <returns>如果当前对象等于 <paramref name="other" /> 参数，则为 true；否则为 false。</returns>
            <param name="other">与此对象进行比较的对象。</param>
        </member>
        <member name="T:AppHelpers.ISequence`1">
            <summary>表示序列的接口。</summary>
            <typeparam name="TItem">序列项的类型。</typeparam>
        </member>
        <member name="P:AppHelpers.ISequence`1.Current">
            <summary>获取当前序列的值。</summary>
        </member>
        <member name="M:AppHelpers.ISequence`1.GetNext">
            <summary>获取将序列更新到下一个值，并返回该值。</summary>
        </member>
        <member name="T:AppHelpers.ThreadingHelper">
            <summary>用于帮助处理线程的帮助类。</summary>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.Sleep(System.Int32)">
            <summary>将当前线程挂起 <paramref name="milliseconds"/> 毫秒。</summary>
            <param name="milliseconds">需要挂起线程的时间。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.SyncAction``1(System.Action{``0},``0)">
            <summary>使用基于 <typeparamref name="TParameter"/> 类型的公共锁定对象，串行执行 <paramref name="action"/>。</summary>
            <typeparam name="TParameter">需串行执行的类型。</typeparam>
            <param name="action">需串行执行的委托。</param>
            <param name="parameter">串行执行的参数。</param>
            <returns>返回 <paramref name="parameter"/>。</returns>
            <remarks>此方法创建的锁作用于 <see cref="M:AppHelpers.ThreadingHelper.SyncAction``1(System.Action{``0},``0)"/> 所有接收 <typeparamref name="TParameter"/> 类型的泛型方法。如果有两个线程分别调用本方法，且泛型参数 <typeparamref name="TParameter"/> 的类型相同，则无论其传入的 <paramref name="parameter"/> 参数是否相同，此两线程互斥，<paramref name="action"/> 不会并行执行。</remarks>
            <preliminary/>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.GetLazyMember``2(``1@)">
            <summary>使用基于 <typeparamref name="TContainer"/> 类型的公共锁定对象，返回 <paramref name="item"/> 的初始化实例。执行参数时，如 <paramref name="item"/> 不为 null，则返回该对象；否则将锁定所有与 <typeparamref name="TContainer"/> 相关的延迟初始化调用操作，并调用 <typeparamref name="TItem"/> 的无参数构造函数，将该委托的返回值设为 <paramref name="item"/> 的值。</summary>
            <typeparam name="TItem">待初始化对象的类型。</typeparam>
            <param name="item">需要延迟初始化的成员。</param>
            <returns>返回初始化后的 <paramref name="item"/> 引用。</returns>
            <remarks>此方法创建的锁作用于 <see cref="M:AppHelpers.ThreadingHelper.GetLazyMember``2(``1@)"/>（及其重载）所有接收 <typeparamref name="TContainer"/> 类型的泛型方法。</remarks>
            <preliminary/>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.GetLazyMember``2(``0,``1@,System.Func{``0,``1})">
            <summary>使用基于 <typeparamref name="TContainer"/> 类型的公共锁定对象，返回 <paramref name="item"/> 的初始化实例。执行参数时，如 <paramref name="item"/> 不为 null，则返回该对象；否则将锁定所有与 <typeparamref name="TContainer"/> 相关的延迟初始化调用操作，并将 <paramref name="container"/> 作为传入参数调用 <paramref name="initializer"/>，将该委托的返回值设为 <paramref name="item"/> 的值。</summary>
            <typeparam name="TContainer">包含待初始化对象成员的类型。</typeparam>
            <typeparam name="TItem">待初始化对象的类型。</typeparam>
            <param name="container">包含需要延迟初始化对象的容器。</param>
            <param name="item">需要延迟初始化的成员。</param>
            <param name="initializer">初始化成员的方法。</param>
            <returns>返回初始化后的 <paramref name="item"/> 引用。</returns>
            <remarks>此方法一般可用于延迟初始化类的成员。</remarks>
            <remarks>此方法创建的锁作用于 <see cref="M:AppHelpers.ThreadingHelper.GetLazyMember``2(``1@)"/>（及其重载）所有接收 <typeparamref name="TContainer"/> 类型的泛型方法。</remarks>
            <preliminary/>
            <seealso cref="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})"/>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.GetLazyMember``2(``0,``1@,System.Object,System.Func{``0,``1})">
            <summary>使用锁定对象 <paramref name="syncObject"/> 延迟初始化 <paramref name="item"/>。执行参数时，如 <paramref name="item"/> 不为 null，则返回该对象；否则将锁定 <paramref name="syncObject"/>，并将 <paramref name="container"/> 作为传入参数调用 <paramref name="initializer"/>，将该委托的返回值设为 <paramref name="item"/> 的值。</summary>
            <typeparam name="TContainer">包含待初始化对象成员的类型。</typeparam>
            <typeparam name="TItem">待初始化对象的类型。</typeparam>
            <param name="container">包含需要延迟初始化对象的容器。</param>
            <param name="item">需要延迟初始化的成员。</param>
            <param name="syncObject">用于同步的对象。</param>
            <param name="initializer">初始化成员的方法。</param>
            <returns>返回初始化后的 <paramref name="item"/> 引用。</returns>
            <seealso cref="M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})"/>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.CreateSequence(System.Int32)">
            <summary>创建初始值为 <paramref name="initialValue"/>，递增量为 1 的线程安全整型 <see cref="T:AppHelpers.ISequence`1"/>。</summary>
            <param name="initialValue">序列的初始值。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.CreateSequence(System.Int32,System.Int32)">
            <summary>创建初始值为 <paramref name="initialValue"/>，递增量为 <paramref name="delta"/> 的线程安全整型 <see cref="T:AppHelpers.ISequence`1"/>。</summary>
            <param name="initialValue">序列的初始值。</param>
            <param name="delta">序列的递增量。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.CreateSequence(System.Int64)">
            <summary>创建初始值为 <paramref name="initialValue"/>，递增量为 1 的线程安全长整型 <see cref="T:AppHelpers.ISequence`1"/>。</summary>
            <param name="initialValue">序列的初始值。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.CreateSequence(System.Int64,System.Int64)">
            <summary>创建初始值为 <paramref name="initialValue"/>，递增量为 <paramref name="delta"/> 的线程安全长整型 <see cref="T:AppHelpers.ISequence`1"/>。</summary>
            <param name="initialValue">序列的初始值。</param>
            <param name="delta">序列的递增量。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.ToLockable``1(``0)">
            <summary>创建一个新的 <see cref="T:AppHelpers.Lockable`1"/> 可同步对象，并将其初始化为 <paramref name="value"/>。</summary>
            <param name="value">需要被线程同步的对象。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.ToLockable``1(``0,System.Object)">
            <summary>创建一个新的 <see cref="T:AppHelpers.Lockable`1"/> 可同步对象，并将其初始化为 <paramref name="value"/>。</summary>
            <param name="value">需要被线程同步的对象。</param>
            <param name="syncRoot">设置为 <see cref="P:AppHelpers.Lockable`1.SyncRoot"/> 的对象。</param>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.TryEnter(System.Action,System.Int32@)">
            <summary>
            <para>互斥执行特定的 <paramref name="action"/>。该 <see cref="T:System.Action"/> 不可重入。</para>
            <para>在执行 <paramref name="action"/> 前，递增 <paramref name="syncRoot"/> 的值。如值大于 1，则递减 <paramref name="syncRoot"/> 并返回 false；否则执行 <paramref name="action"/>，并在该委托执行完毕后递减 <paramref name="syncRoot"/>，返回 true。</para>
            </summary>
            <param name="action">需互斥执行的 <see cref="T:System.Action"/></param>
            <param name="syncRoot">用于同步的计数器。在调用此方法前，一般将 <paramref name="syncRoot"/> 指向的字段值初始化为 0。</param>
            <returns>在成功进入方法时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.TryEnter(System.Action,System.Int32@,System.Int32)">
            <summary>
            <para>互斥执行特定的 <paramref name="action"/>。该 <see cref="T:System.Action"/> 可重入 <paramref name="maxEntrance"/> 次。</para>
            <para>在执行 <paramref name="action"/> 前，递增 <paramref name="syncRoot"/> 的值。如值大于 <paramref name="maxEntrance"/>，则递减 <paramref name="syncRoot"/> 并返回 false；否则执行 <paramref name="action"/>，并在该委托执行完毕后递减 <paramref name="syncRoot"/>，返回 true。</para>
            </summary>
            <param name="action">需互斥执行的 <see cref="T:System.Action"/></param>
            <param name="syncRoot">用于同步的计数器。在调用此方法前，一般将 <paramref name="syncRoot"/> 指向的字段值初始化为 0。</param>
            <param name="maxEntrance">表示 <paramref name="action"/> 可重入的最大次数。</param>
            <returns>在成功进入方法时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.TryEnter``1(System.Action{``0},``0,System.Int32@,System.Int32)">
            <summary>
            <para>传入 <paramref name="item"/> 互斥执行特定的 <paramref name="action"/>。该 <see cref="T:System.Action`1"/> 可重入不超过 <paramref name="maxEntrance"/> 次。</para>
            <para>在执行 <paramref name="action"/> 前，递增 <paramref name="syncRoot"/> 的值。如值大于 <paramref name="maxEntrance"/>，则递减 <paramref name="syncRoot"/> 并返回 false；否则执行 <paramref name="action"/>，并在该委托执行完毕后递减 <paramref name="syncRoot"/>，返回 true。</para>
            </summary>
            <param name="action">需互斥执行的 <see cref="T:System.Action`1"/></param>
            <param name="item">传入 <paramref name="action"/> 的参数。</param>
            <param name="syncRoot">用于同步的计数器。在调用此方法前，一般将 <paramref name="syncRoot"/> 指向的字段值初始化为 0。</param>
            <param name="maxEntrance">表示 <paramref name="action"/> 可重入的最大次数。</param>
            <returns>在成功进入方法时返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.TryEnter``1(System.Action{``0},``0)">
            <summary>传入 <paramref name="parameter"/> 互斥执行特定的 <paramref name="action"/>。</summary>
            <param name="action">需互斥执行的 <see cref="T:System.Action`1"/></param>
            <param name="parameter">传入 <paramref name="action"/> 的参数。</param>
            <returns>在成功进入方法时返回 true，否则返回 false。</returns>
            <remarks>此方法的互斥对象作用于 <see cref="M:AppHelpers.ThreadingHelper.TryEnter``1(System.Action{``0},``0)"/>（及其重载）所有接收 <typeparamref name="TItem"/> 类型的泛型方法。</remarks>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.TryEnter``1(System.Action{``0},``0,System.Int32)">
            <summary>
            <para>传入 <paramref name="parameter"/> 互斥执行特定的 <paramref name="action"/>。该 <see cref="T:System.Action`1"/> 可重入不超过 <paramref name="maxEntrance"/> 次。</para>
            <para>在执行 <paramref name="action"/> 前，递增计数器的值。如值大于 <paramref name="maxEntrance"/>，则递减计数器的值并返回 false；否则执行 <paramref name="action"/>，并在该委托执行完毕后递减计数器的值，返回 true。</para>
            </summary>
            <param name="action">需互斥执行的 <see cref="T:System.Action`1"/></param>
            <param name="parameter">传入 <paramref name="action"/> 的参数。</param>
            <param name="maxEntrance">表示 <paramref name="action"/> 可重入的最大次数。</param>
            <returns>在成功进入方法时返回 true，否则返回 false。</returns>
            <remarks>此方法的互斥对象作用于 <see cref="M:AppHelpers.ThreadingHelper.TryEnter``1(System.Action{``0},``0)"/>（及其重载）所有接收 <typeparamref name="TItem"/> 类型的泛型方法。</remarks>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.UseLarger(System.Int32@,System.Int32)">
            <summary>返回 <paramref name="target"/> 和 <paramref name="value"/> 较大的值，并将其替代 <paramref name="target"/>。</summary>
            <param name="target">需要被替代成较大值的值。</param>
            <param name="value">用于比较的值。</param>
            <returns>返回 <paramref name="target"/> 和 <paramref name="value"/> 较大的值。</returns>
        </member>
        <member name="M:AppHelpers.ThreadingHelper.DisposeToNull``1(``0@)">
            <summary>在原子操作中将实现 <see cref="T:System.IDisposable"/> 接口的对象设置为 null，并调用其 <see cref="M:System.IDisposable.Dispose"/> 方法。</summary>
            <typeparam name="TItem">需释放资源的对象类型。</typeparam>
            <param name="item">需释放资源的对象。</param>
        </member>
        <member name="T:AppHelpers.SynchronizedDictionary`2">
            <summary>内部进行线程同步操作的字典。</summary>
            <typeparam name="TKey">字典的键类型。</typeparam>
            <typeparam name="TValue">字典的值类型。</typeparam>
        </member>
        <member name="P:AppHelpers.SynchronizedDictionary`2.Count">
            <summary>获取集合中包含的元素数。</summary>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.ContainsKey(`0)">
            <summary>确定字典是否包含具有指定键的元素。</summary>
            <param name="key">要在字典中定位的键。</param>
            <returns>如果字典包含带有该键的元素，则为 true；否则，为 false。</returns>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.Remove(`0)">
            <summary>移除与指定键对应的项。</summary>
            <param name="key">要在字典中定位的键。</param>
        </member>
        <member name="P:AppHelpers.SynchronizedDictionary`2.IsReadOnly">
            <summary>获取一个值，该值指示集合是否为只读。</summary>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.Clear">
            <summary>从集合中移除所有项。</summary>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.Add(`0,`1)">
            <summary>在字典中添加一个带有所提供的键和值的元素。</summary>
            <param name="key">用作要添加的元素的键的对象。</param>
            <param name="value">用作要添加的元素的值的对象。</param>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)">
            <summary>从字典中移除带有指定键的元素。</summary>
            <param name="key">要移除的元素的键。</param>
            <returns>如果该元素已成功移除，则为 true；否则为 false。如果在原始字典中没有找到 <paramref name="key"/>，该方法也会返回 false。</returns>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.TryGetValue(`0,`1@)">
            <summary>获取与指定的键相关联的值。</summary>
            <param name="key">要获取其值的键。</param>
            <param name="value">当此方法返回时，如果找到指定键，则返回与该键相关联的值；否则，将返回 <paramref name="value"/> 参数的类型的默认值。该参数未经初始化即被传递。</param>
            <returns>如果实现字典的对象包含具有指定键的元素，则为 true；否则，为 false。</returns>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>将某项添加到集合中。</summary>
            <param name="item">要添加到集合的对象。</param>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>确定集合是否包含特定值。</summary>
            <param name="item">要在集合中定位的对象。</param>
            <returns>如果在集合中找到 <paramref name="item"/>，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>从特定的数组索引处开始，将集合的元素复制到一个数组中。</summary>
            <param name="array">作为从集合复制的元素的目标位置的一维数组。数组必须具有从零开始的索引。</param>
            <param name="arrayIndex"><paramref name="array"/> 中从零开始的索引，将在此处开始复制。</param>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>从集合中移除特定对象的第一个匹配项。</summary>
            <param name="item">要从集合中移除的对象。</param>
            <returns>如果已从集合中成功移除 <paramref name="item"/>，则为 true；否则为 false。如果在原始集合中没有找到 <paramref name="item"/>，该方法也会返回 false。</returns>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 <see cref="T:System.Collections.Generic.IEnumerator`1"/>。</returns>
        </member>
        <member name="M:AppHelpers.SynchronizedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>返回一个循环访问集合的枚举器。</summary>
            <returns>可用于循环访问集合的 <see cref="T:System.Collections.IEnumerator"/> 对象。</returns>
        </member>
        <member name="T:AppHelpers.SynchronizedStack`1">
            <summary>提供线程同步的堆栈。</summary>
            <typeparam name="TItem"></typeparam>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemCancelException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been canceled
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been canceled
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemTimeoutException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemResultException">
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
            <summary>
            Represents an exception in case IWorkItemResult.GetResult has been timed out
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemCallback">
            <summary>
            A delegate that represents the method to run as the work item
            </summary>
            <param name="state">A state object for the method to run</param>
        </member>
        <member name="T:AppHelpers.Threading.PostExecuteWorkItemCallback">
            <summary>
            A delegate to call after the WorkItemCallback completed
            </summary>
            <param name="wir">The work item result object</param>
        </member>
        <member name="T:AppHelpers.Threading.PostExecuteWorkItemCallback`1">
            <summary>
            A delegate to call after the WorkItemCallback completed
            </summary>
            <param name="wir">The work item result object</param>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemsGroupIdleHandler">
            <summary>
            A delegate to call when a WorkItemsGroup becomes idle
            </summary>
            <param name="workItemsGroup">A reference to the WorkItemsGroup that became idle</param>
        </member>
        <member name="T:AppHelpers.Threading.ThreadInitializationHandler">
            <summary>
            A delegate to call after a thread is created, but before 
            it's first use.
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.ThreadTerminationHandler">
            <summary>
            A delegate to call when a thread is about to exit, after 
            it is no longer belong to the pool.
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemPriority">
            <summary>
            Defines the availeable priorities of a work item.
            The higher the priority a work item has, the sooner
            it will be executed.
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.IWorkItemsGroup">
            <summary>
            IWorkItemsGroup interface
            Created by SmartThreadPool.CreateWorkItemsGroup()
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemsGroup.Name">
            <summary>
            Get/Set the name of the WorkItemsGroup
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemsGroup.Concurrency">
            <summary>
            Get/Set the maximum number of workitem that execute cocurrency on the thread pool
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemsGroup.WaitingCallbacks">
            <summary>
            Get the number of work items waiting in the queue.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.GetStates">
            <summary>
            Get an array with all the state objects of the currently running items.
            The array represents a snap shot and impact performance.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemsGroup.StartInfo">
            <summary>
            Get the WorkItemsGroup start information
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.Start">
            <summary>
            Starts to execute work items
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.Cancel">
            <summary>
            Cancel all the work items.
            Same as Cancel(false)
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.Cancel(System.Boolean)">
            <summary>
            Cancel all work items using thread abortion
            </summary>
            <param name="abortExecution">True to stop work items by raising ThreadAbortException</param>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.WaitForIdle">
            <summary>
            Wait for all work item to complete.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for all work item to complete, until timeout expired
            </summary>
            <param name="timeout">How long to wait for the work items to complete</param>
            <returns>Returns true if work items completed within the timeout, otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.WaitForIdle(System.Int32)">
            <summary>
            Wait for all work item to complete, until timeout expired
            </summary>
            <param name="millisecondsTimeout">How long to wait for the work items to complete in milliseconds</param>
            <returns>Returns true if work items completed within the timeout, otherwise false.</returns>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemsGroup.IsIdle">
            <summary>
            IsIdle is true when there are no work items running or queued.
            </summary>
        </member>
        <member name="E:AppHelpers.Threading.IWorkItemsGroup.OnIdle">
            <summary>
            This event is fired when all work items are completed.
            (When IsIdle changes to true)
            This event only work on WorkItemsGroup. On SmartThreadPool
            it throws the NotImplementedException.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>        
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.CallToPostExecute)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.CallToPostExecute,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem(System.Action,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``1(System.Action{``0},``0,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``2(System.Action{``0,``1},``0,``1,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``3(System.Action{``0,``1,``2},``0,``1,``2,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``4(System.Action{``0,``1,``2,``3},``0,``1,``2,``3,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult object, but its GetResult() will always return null</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``1(System.Func{``0},AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``2(System.Func{``0,``1},``0,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``3(System.Func{``0,``1,``2},``0,``1,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``4(System.Func{``0,``1,``2,``3},``0,``1,``2,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemsGroup.QueueWorkItem``5(System.Func{``0,``1,``2,``3,``4},``0,``1,``2,``3,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item.
            </summary>
            <returns>Returns a IWorkItemResult&lt;TResult&gt; object. 
            its GetResult() returns a TResult object</returns>
        </member>
        <member name="F:AppHelpers.Threading.CallToPostExecute.Never">
            <summary>Never call to the PostExecute call back</summary>
        </member>
        <member name="F:AppHelpers.Threading.CallToPostExecute.WhenWorkItemCanceled">
            <summary>Call to the PostExecute only when the work item is cancelled</summary>
        </member>
        <member name="F:AppHelpers.Threading.CallToPostExecute.WhenWorkItemNotCanceled">
            <summary>Call to the PostExecute only when the work item is not cancelled</summary>
        </member>
        <member name="F:AppHelpers.Threading.CallToPostExecute.Always">
            <summary>Always call to the PostExecute</summary>
        </member>
        <member name="T:AppHelpers.Threading.IWaitableResult">
            <summary>
            The common interface of IWorkItemResult and IWorkItemResult&lt;T&gt;
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWaitableResult.GetWorkItemResult">
            <summary>
            This method intent is for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AppHelpers.Threading.IWaitableResult.GetWorkItemResult``1">
            <summary>
            This method intent is for internal use.
            </summary>
            <returns></returns>
        </member>
        <member name="T:AppHelpers.Threading.IWorkItemResult">
            <summary>
            IWorkItemResult interface.
            Created when a WorkItemCallback work item is queued.
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.IWorkItemResult`1">
            <summary>
            IWorkItemResult&lt;TResult&gt; interface.
            Created when a Func&lt;TResult&gt; work item is queued.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits.
            </summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds, or -1 for infinite</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the blocking if needed</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits.
            </summary>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <param name="millisecondsTimeout"></param>
            <param name="exitContext"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout.
            </summary>
            <param name="exitContext"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <param name="timeout"></param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds, or -1 for infinite</param>
            <param name="exitContext">
            true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false. 
            </param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the blocking if needed</param>
            <param name="e">Filled with the exception if one was thrown</param>
            <returns>The result of the work item</returns>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.GetResult(System.TimeSpan,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>
            Get the result of the work item.
            If the work item didn't run yet then the caller waits until timeout or until the cancelWaitHandle is signaled.
            </summary>
            <returns>The result of the work item</returns>
            <param name="cancelWaitHandle"></param>
            <param name="e">Filled with the exception if one was thrown</param>
            <param name="timeout"></param>
            <param name="exitContext"></param>
            On timeout throws WorkItemTimeoutException
            On cancel throws WorkItemCancelException
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemResult`1.IsCompleted">
            <summary>
            Gets an indication whether the asynchronous operation has completed.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemResult`1.IsCanceled">
            <summary>
            Gets an indication whether the asynchronous operation has been canceled.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemResult`1.State">
            <summary>
            Gets the user-defined object that contains context data 
            for the work item method.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.Cancel">
            <summary>
            Same as Cancel(false).
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.IWorkItemResult`1.Cancel(System.Boolean)">
            <summary>
            Cancel the work item execution.
            If the work item is in the queue then it won't execute
            If the work item is completed, it will remain completed
            If the work item is in progress then the user can check the SmartThreadPool.IsWorkItemCanceled
              property to check if the work item has been cancelled. If the abortExecution is set to true then
              the Smart Thread Pool will send an AbortException to the running thread to stop the execution 
              of the work item. When an in progress work item is canceled its GetResult will throw WorkItemCancelException.
            If the work item is already cancelled it will remain cancelled
            </summary>
            <param name="abortExecution">When true send an AbortException to the executing thread.</param>
            <returns>Returns true if the work item was not completed, otherwise false.</returns>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemResult`1.WorkItemPriority">
            <summary>
            Get the work item's priority
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemResult`1.Result">
            <summary>
            Return the result, same as GetResult()
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.IWorkItemResult`1.Exception">
            <summary>
            Returns the exception if occured otherwise returns null.
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemStateCallback">
            <summary>
            An internal delegate to call when the WorkItem starts or completes
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.PriorityQueue">
            <summary>
            PriorityQueue class
            This class is not thread safe because we use external lock
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.PriorityQueue._queuesCount">
            <summary>
            The number of queues, there is one for each type of priority
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.PriorityQueue._queues">
            <summary>
            Work items queues. There is one for each type of priority
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.PriorityQueue._workItemsCount">
            <summary>
            The total number of work items within the queues 
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.PriorityQueue._version">
            <summary>
            Use with IEnumerable interface
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.PriorityQueue.Enqueue(AppHelpers.Threading.IHasWorkItemPriority)">
            <summary>
            Enqueue a work item.
            </summary>
            <param name="workItem">A work item</param>
        </member>
        <member name="M:AppHelpers.Threading.PriorityQueue.Dequeue">
            <summary>
            Dequeque a work item.
            </summary>
            <returns>Returns the next work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.PriorityQueue.GetNextNonEmptyQueue(System.Int32)">
            <summary>
            Find the next non empty queue starting at queue queueIndex+1
            </summary>
            <param name="queueIndex">The index-1 to start from</param>
            <returns>
            The index of the next non empty queue or -1 if all the queues are empty
            </returns>
        </member>
        <member name="P:AppHelpers.Threading.PriorityQueue.Count">
            <summary>
            The number of work items 
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.PriorityQueue.Clear">
            <summary>
            Clear all the work items 
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.PriorityQueue.GetEnumerator">
            <summary>
            Returns an enumerator to iterate over the work items
            </summary>
            <returns>Returns an enumerator</returns>
        </member>
        <member name="T:AppHelpers.Threading.PriorityQueue.PriorityQueueEnumerator">
            <summary>
            The class the implements the enumerator
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.PerformanceCounter">
            <summary>
            Summary description for STPPerformanceCounter.
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.ThreadPoolStartInfo">
            <summary>线程池启动配置信息。</summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.IdleTimeout">
            <summary>
            Get/Set the idle timeout in milliseconds.
            If a thread is idle (starved) longer than IdleTimeout then it may quit.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.MinWorkerThreads">
            <summary>
            Get/Set the lower limit of threads in the pool.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.MaxWorkerThreads">
            <summary>
            Get/Set the upper limit of threads in the pool.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.ThreadPriority">
            <summary>
            Get/Set the scheduling priority of the threads in the pool.
            The Os handles the scheduling.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.ThreadPoolName">
            <summary>
            Get/Set the thread pool name. Threads will get names depending on this.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.PerformanceCounterInstanceName">
            <summary>
            Get/Set the performance counter instance name of this SmartThreadPool
            The default is null which indicate not to use performance counters at all.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.EnableLocalPerformanceCounters">
            <summary>
            Enable/Disable the local performance counter.
            This enables the user to get some performance information about the SmartThreadPool 
            without using Windows performance counters. (Useful on WindowsCE, Silverlight, etc.)
            The default is false.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.AreThreadsBackground">
            <summary>
            Get/Set backgroundness of thread in thread pool.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.ThreadPoolStartInfo.AsReadOnly">
            <summary>
            Get a readonly version of this STPStartInfo.
            </summary>
            <returns>Returns a readonly reference to this STPStartInfo</returns>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.ApartmentState">
            <summary>
            Get/Set the apartment state of threads in the thread pool
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.ThreadPoolStartInfo.MaxStackSize">
            <summary>
            Get/Set the max stack size of threads in the thread pool
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItem">
            <summary>Holds a callback delegate and the state for that delegate.</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._callback">
            <summary>Callback delegate for the callback.</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._canceledSmartThreadPool">
            <summary>A reference to an object that indicates whatever the SmartThreadPool has been canceled</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._canceledWorkItemsGroup">
            <summary>A reference to an object that indicates whatever the WorkItemsGroup has been canceled</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._exception">
            <summary>Hold the exception if the method threw it</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._executingThread">
            <summary>The thread that executes this workitem. This field is available for the period when the work item is executed, before and after it is null.</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._expirationTime">
            <summary>The absulote time when the work item will be timeout</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._processingStopwatch">
            <summary>Stores how much time it took the work item to execute after it went out of the queue</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._result">
            <summary>Holds the result of the mehtod</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._state">
            <summary>State with which to call the callback delegate.</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._waitingOnQueueStopwatch">
            <summary>Stores how long the work item waited on the stp queue</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._workItemCompleted">
            <summary>A ManualResetEvent to indicate that the result is ready</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._workItemCompletedRefCount">
            <summary>A reference count to the _workItemCompleted. When it reaches to zero _workItemCompleted is Closed</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._workItemInfo">
            <summary>Work item info</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._workItemResult">
            <summary>Represents the result state of the work item</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._workItemsGroup">
            <summary>The work item group this work item belong to.</summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem._workItemState">
            <summary>Hold the state of the work item</summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.#ctor(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>Initialize the callback holding object.</summary>
            <param name="workItemsGroup">The workItemGroup of the workitem</param>
            <param name="workItemInfo">The WorkItemInfo of te workitem</param>
            <param name="callback">Callback delegate for the callback.</param>
            <param name="state">State with which to call the callback delegate.</param>
            We assume that the WorkItem object is created within the thread that meant to run the callback
        </member>
        <member name="E:AppHelpers.Threading.WorkItem._WorkItemCompleted">
            <summary>Called when the WorkItem completes</summary>
        </member>
        <member name="E:AppHelpers.Threading.WorkItem._WorkItemStarted">
            <summary>Called when the WorkItem starts</summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItem.WorkItemState">
            <summary>Indicates the state of the work item in the thread pool</summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItem.IsCanceled">
            <summary>Returns true when the work item has canceled</summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItem.WorkItemPriority">
            <summary>Returns the priority of the work item</summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItem.IsCompleted">
            <summary>Returns true when the work item has completed or canceled</summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.Execute">
            <summary>Execute the work item and the post execute</summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.StartingWorkItem">
            <summary>Change the state of the work item to in progress if it wasn't canceled.</summary>
            <returns>Return true on success or false in case the work item was canceled. If the work item needs to run a post execute then the method will return true.</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.WaitAll(AppHelpers.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>Wait for all work items to complete</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>true when every work item in waitableResults has completed; otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.WaitAny(AppHelpers.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>Waits for any of the work items in the specified array to complete, cancel, or timeout</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.GetWorkItemResult">
            <summary>Returns the work item result</summary>
            <returns>The work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.SetResult(System.Object,System.Exception)">
            <summary>Set the result of the work item to return</summary>
            <param name="result">The result of the work item</param>
            <param name="exception">The exception that was throw while the workitem executed, null if there was no exception.</param>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.GetWaitHandles(AppHelpers.Threading.IWaitableResult[],System.Threading.WaitHandle[])">
            <summary>Fill an array of wait handles with the work items wait handles.</summary>
            <param name="waitableResults">An array of work item results</param>
            <param name="waitHandles">An array of wait handles to fill</param>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.ReleaseWaitHandles(AppHelpers.Threading.IWaitableResult[])">
            <summary>Release the work items' wait handles</summary>
            <param name="waitableResults">An array of work item results</param>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.Cancel(System.Boolean)">
            <summary>Cancel the work item if it didn't start running yet.</summary>
            <returns>Returns true on success or false if the work item is in progress or already completed</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.ExecuteWorkItem">
            <summary>Execute the work item</summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>Get the result of the work item. If the work item didn't run yet then the caller waits for the result, timeout, or cancel. In case of error the method throws and exception</summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.GetResult(System.Int32,System.Boolean,System.Threading.WaitHandle,System.Exception@)">
            <summary>Get the result of the work item. If the work item didn't run yet then the caller waits for the result, timeout, or cancel. In case of error the e argument is filled with the exception</summary>
            <returns>The result of the work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.GetWaitHandle">
            <summary>A wait handle to wait for completion, cancel, or timeout</summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.PostExecute">
            <summary>Runs the post execute callback</summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.SetWorkItemState(AppHelpers.Threading.WorkItem.WorkItemState)">
            <summary>Sets the work item's state</summary>
            <param name="workItemState">The state to set the work item to</param>
        </member>
        <member name="M:AppHelpers.Threading.WorkItem.SignalComplete(System.Boolean)">
            <summary>Signals that work item has been completed or canceled</summary>
            <param name="canceled">Indicates that the work item has been canceled</param>
        </member>
        <member name="F:AppHelpers.Threading.WorkItem.WorkItemResult._workItem">
            <summary>
            A back reference to the work item
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItem.WorkItemResult.Result">
            <summary>
            Return the result, same as GetResult()
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItem.WorkItemResult.Exception">
            <summary>
            Returns the exception if occured otherwise returns null.
            This value is valid only after the work item completed,
            before that it is always null.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The WorkItemsGroup of this workitem</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.CallToPostExecute)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemFactory.CreateWorkItem(AppHelpers.Threading.IWorkItemsGroup,AppHelpers.Threading.WorkItemGroupStartInfo,AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.CallToPostExecute,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Create a new work item
            </summary>
            <param name="workItemsGroup">The work items group</param>
            <param name="startInfo">Work item group start information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item</returns>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemGroupStartInfo">
            <summary>工作项目组的启动配置信息。</summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemGroupStartInfo.AutoDisposeStateObjects">
            <summary>
            Get/Set if to dispose of the state object of a work item
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemGroupStartInfo.CallToPostExecute">
            <summary>
            Get/Set the run the post execute options
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemGroupStartInfo.PostExecuteWorkItemCallback">
            <summary>
            Get/Set the default post execute callback
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemGroupStartInfo.StartSuspended">
            <summary>
            Get/Set if the work items execution should be suspended until the Start()
            method is called.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemGroupStartInfo.WorkItemPriority">
            <summary>
            Get/Set the default priority that a work item gets when it is enqueued
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemGroupStartInfo.FillStateWithArgs">
            <summary>
            Get/Set the if QueueWorkItem of Action&lt;...&gt;/Func&lt;...&gt; fill the
            arguments as an object array into the state of the work item.
            The arguments can be access later by IWorkItemResult.State.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemGroupStartInfo.AsReadOnly">
            <summary>
            Get a readonly version of this WIGStartInfo
            </summary>
            <returns>Returns a readonly reference to this WIGStartInfoRO</returns>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemInfo">
            <summary>
            Summary description for WorkItemInfo.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemInfo.AutoDisposeStateObjects">
            <summary>
            Get/Set if to dispose of the state object of a work item
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemInfo.CallToPostExecute">
            <summary>
            Get/Set the run the post execute options
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemInfo.PostExecuteWorkItemCallback">
            <summary>
            Get/Set the post execute callback
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemInfo.WorkItemPriority">
            <summary>
            Get/Set the work item's priority
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemInfo.Timeout">
            <summary>
            Get/Set the work item's timout in milliseconds.
            This is a passive timout. When the timout expires the work item won't be actively aborted!
            </summary>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemsGroup">
            <summary>
            Summary description for WorkItemsGroup.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._stp">
            <summary>
            A reference to the SmartThreadPool instance that created this 
            WorkItemsGroup.
            </summary>
        </member>
        <member name="E:AppHelpers.Threading.WorkItemsGroup._onIdle">
            <summary>
            The OnIdle event
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._isSuspended">
            <summary>
            A flag to indicate if the Work Items Group is now suspended.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._concurrency">
            <summary>
            Defines how many work items of this WorkItemsGroup can run at once.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._workItemsQueue">
            <summary>
            Priority queue to hold work items before they are passed 
            to the SmartThreadPool.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._workItemsInStpQueue">
            <summary>
            Indicate how many work items are waiting in the SmartThreadPool
            queue.
            This value is used to apply the concurrency.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._workItemsExecutingInStp">
            <summary>
            Indicate how many work items are currently running in the SmartThreadPool.
            This value is used with the Cancel, to calculate if we can send new 
            work items to the STP.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._workItemsGroupStartInfo">
            <summary>
            WorkItemsGroup start information
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._isIdleWaitHandle">
            <summary>
            Signaled when all of the WorkItemsGroup's work item completed.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroup._canceledWorkItemsGroup">
            <summary>
            A common object for all the work items that this work items group
            generate so we can mark them to cancel in O(1)
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemsGroup.StartInfo">
            <summary>
            WorkItemsGroup start information
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroup.Start">
            <summary>
            Start the Work Items Group if it was started suspended
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroup.WaitForIdle(System.Int32)">
            <summary>
            Wait for the thread pool to be idle
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsGroupBase._name">
            <summary>
            Contains the name of this instance of SmartThreadPool.
            Can be changed by the user.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemsGroupBase.Name">
            <summary>
            Get/Set the name of the SmartThreadPool/WorkItemsGroup instance
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.Cancel">
            <summary>
            Cancel all the work items.
            Same as Cancel(false)
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.WaitForIdle">
            <summary>
            Wait for the SmartThreadPool/WorkItemsGroup to be idle
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.WaitForIdle(System.TimeSpan)">
            <summary>
            Wait for the SmartThreadPool/WorkItemsGroup to be idle
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemsGroupBase.IsIdle">
            <summary>
            IsIdle is true when there are no work items running or queued.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="workItemPriority">The priority of the work item</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item info</param>
            <param name="callback">A callback to execute</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemInfo,AppHelpers.Threading.WorkItemCallback,System.Object)">
            <summary>
            Queue a work item
            </summary>
            <param name="workItemInfo">Work item information</param>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.CallToPostExecute)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsGroupBase.QueueWorkItem(AppHelpers.Threading.WorkItemCallback,System.Object,AppHelpers.Threading.PostExecuteWorkItemCallback,AppHelpers.Threading.CallToPostExecute,AppHelpers.Threading.WorkItemPriority)">
            <summary>
            Queue a work item
            </summary>
            <param name="callback">A callback to execute</param>
            <param name="state">
            The context object of the work item. Used for passing arguments to the work item. 
            </param>
            <param name="postExecuteWorkItemCallback">
            A delegate to call after the callback completion
            </param>
            <param name="callToPostExecute">Indicates on which cases to call to the post execute callback</param>
            <param name="workItemPriority">The work item priority</param>
            <returns>Returns a work item result</returns>
        </member>
        <member name="T:AppHelpers.Threading.WorkItemsQueue">
            <summary>
            WorkItemsQueue class.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue._headWaiterEntry">
            <summary>
            Waiters queue (implemented as stack).
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue._waitersCount">
            <summary>
            Waiters count
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue._workItems">
            <summary>
            Work items queue
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue._isWorkItemsQueueActive">
            <summary>
            Indicate that work items are allowed to be queued
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemsQueue.CurrentWaiterEntry">
            <summary>
            Each thread in the thread pool keeps its own waiter entry.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue._isDisposed">
            <summary>
            A flag that indicates if the WorkItemsQueue has been disposed.
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemsQueue.Count">
            <summary>
            Returns the current number of work items in the queue
            </summary>
        </member>
        <member name="P:AppHelpers.Threading.WorkItemsQueue.WaitersCount">
            <summary>
            Returns the current number of waiters
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.EnqueueWorkItem(AppHelpers.Threading.WorkItem)">
            <summary>
            Enqueue a work item to the queue.
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.DequeueWorkItem(System.Int32,System.Threading.WaitHandle)">
            <summary>
            Waits for a work item or exits on timeout or cancel
            </summary>
            <param name="millisecondsTimeout">Timeout in milliseconds</param>
            <param name="cancelEvent">Cancel wait handle</param>
            <returns>Returns true if the resource was granted</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.Cleanup">
            <summary>
            Cleanup the work items queue, hence no more work 
            items are allowed to be queue
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.GetThreadWaiterEntry">
            <summary>
            Returns the WaiterEntry of the current thread
            </summary>
            <returns></returns>
            In order to avoid creation and destuction of WaiterEntry
            objects each thread has its own WaiterEntry object.
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.PushWaiter(AppHelpers.Threading.WorkItemsQueue.WaiterEntry)">
            <summary>
            Push a new waiter into the waiter's stack
            </summary>
            <param name="newWaiterEntry">A waiter to put in the stack</param>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.PopWaiter">
            <summary>
            Pop a waiter from the waiter's stack
            </summary>
            <returns>Returns the first waiter in the stack</returns>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.RemoveWaiter(AppHelpers.Threading.WorkItemsQueue.WaiterEntry,System.Boolean)">
            <summary>
            Remove a waiter from the stack
            </summary>
            <param name="waiterEntry">A waiter entry to remove</param>
            <param name="popDecrement">If true the waiter count is always decremented</param>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue.WaiterEntry._waitHandle">
            <summary>
            Event to signal the waiter that it got the work item.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue.WaiterEntry._isTimedout">
            <summary>
            Flag to know if this waiter already quited from the queue 
            because of a timeout.
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue.WaiterEntry._isSignaled">
            <summary>
            Flag to know if the waiter was signaled and got a work item. 
            </summary>
        </member>
        <member name="F:AppHelpers.Threading.WorkItemsQueue.WaiterEntry._workItem">
            <summary>
            A work item that passed directly to the waiter withou going 
            through the queue
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.WaiterEntry.Signal(AppHelpers.Threading.WorkItem)">
            <summary>
            Signal the waiter that it got a work item.
            </summary>
            <returns>Return true on success</returns>
            The method fails if Timeout() preceded its call
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.WaiterEntry.Timeout">
            <summary>
            Mark the wait entry that it has been timed out
            </summary>
            <returns>Return true on success</returns>
            The method fails if Signal() preceded its call
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.WaiterEntry.Reset">
            <summary>
            Reset the wait entry so it can be used again
            </summary>
        </member>
        <member name="M:AppHelpers.Threading.WorkItemsQueue.WaiterEntry.Close">
            <summary>
            Free resources
            </summary>
        </member>
        <member name="T:AppHelpers.SmartThreadPool">
            <summary>具有比默认线程池更多功能的线程池。</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultMinWorkerThreads">
            <summary>线程池默认的最少工作线程数量。(0)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultMaxWorkerThreads">
            <summary>线程池默认的最大工作线程数量。(25)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultIdleTimeout">
            <summary>将线程从线程池中清除的延迟时间。(60秒)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultCallToPostExecute">
            <summary>是否自动调用 <see cref="T:AppHelpers.Threading.PostExecuteWorkItemCallback"/>。 (CallToPostExecute.Always)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultWorkItemPriority">
            <summary>The default work item priority (WorkItemPriority.Normal)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultStartSuspended">
            <summary>The default is to work on work items as soon as they arrive and not to wait for the start. (false)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultPerformanceCounterInstanceName">
            <summary>The default name to use for the performance counters instance. (null)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultThreadPriority">
            <summary>The default thread priority (ThreadPriority.Normal)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultThreadPoolName">
            <summary>The default thread pool name. (SmartThreadPool)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultMaxStackSize">
            <summary>The default Max Stack Size. (null)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultFillStateWithArgs">
            <summary>The default fill state with params. (false) It is relevant only to QueueWorkItem of Action&lt;...&gt;/Func&lt;...&gt;</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultAreThreadsBackground">
            <summary>The default thread backgroundness. (true)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.DefaultApartmentState">
            <summary>The default apartment state of a thread in the thread pool. The default is ApartmentState.Unknown which means the STP will not set the apartment of the thread. It will use the .NET default.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._workerThreads">
            <summary>Dictionary of all the threads in the thread pool.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._workItemsQueue">
            <summary>Queue of work items.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._workItemsProcessed">
            <summary>Count the work items handled. Used by the performance counter.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._inUseWorkerThreads">
            <summary>Number of threads that currently work (not idle).</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._startInfo">
            <summary>Stores a copy of the original StartInfo. It is used to change the MinThread and MaxThreads</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._currentWorkItemsCount">
            <summary>Total number of work items that are stored in the work items queue plus the work items that the threads in the pool are working on.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._isIdleWaitHandle">
            <summary>Signaled when the thread pool is idle, i.e. no thread is busy and the work items queue is empty</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._shuttingDownEvent">
            <summary>An event to signal all the threads to quit immediately.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._isSuspended">
            <summary>A flag to indicate if the Smart Thread Pool is now suspended.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._shutdown">
            <summary>A flag to indicate the threads to quit.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._threadCounter">
            <summary>Counts the threads created in the pool. It is used to name the threads.</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._isDisposed">
            <summary>Indicate that the SmartThreadPool has been disposed</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._workItemsGroups">
            <summary>Holds all the WorkItemsGroup instaces that have at least one work item int the SmartThreadPool This variable is used in case of Shutdown</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._canceledSmartThreadPool">
            <summary>A common object for all the work items int the STP so we can mark them to cancel in O(1)</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._windowsPerformanceCounters">
            <summary>Windows STP performance counters</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._localPerformanceCounters">
            <summary>Local STP performance counters</summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool._CurrentThreadEntry">
            <summary>A reference to the current work item a thread from the thread pool is executing.</summary>
        </member>
        <member name="E:AppHelpers.SmartThreadPool._onThreadInitialization">
            <summary>An event to call after a thread is created, but before it's first use.</summary>
        </member>
        <member name="E:AppHelpers.SmartThreadPool._onThreadTermination">
            <summary>An event to call when a thread is about to exit, after it is no longer belong to the pool.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.#ctor(System.Int32)">
            <summary>Constructor</summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.#ctor(System.Int32,System.Int32)">
            <summary>Constructor</summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Constructor</summary>
            <param name="idleTimeout">Idle timeout in milliseconds</param>
            <param name="maxWorkerThreads">Upper limit of threads in the pool</param>
            <param name="minWorkerThreads">Lower limit of threads in the pool</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.#ctor(AppHelpers.Threading.ThreadPoolStartInfo)">
            <summary>Constructor</summary>
            <param name="stpStartInfo">A SmartThreadPool configuration that overrides the default behavior</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Dequeue">
            <summary>Waits on the queue for a work item, shutdown, or timeout.</summary>
            <returns>Returns the WaitingCallback or null in case of timeout or shutdown.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Enqueue(AppHelpers.Threading.WorkItem)">
            <summary>Put a new work item in the queue</summary>
            <param name="workItem">A work item to queue</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.InformCompleted">
            <summary>Inform that the current thread is about to quit or quiting. The same thread may call this method more than once.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.StartThreads(System.Int32)">
            <summary>Starts new threads</summary>
            <param name="threadsCount">The number of threads to start</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.ProcessQueuedItems">
            <summary>A worker thread method that processes work items from the work items queue.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Shutdown">
            <summary>Force the SmartThreadPool to shutdown</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Shutdown(System.Boolean,System.TimeSpan)">
            <summary>Force the SmartThreadPool to shutdown with timeout</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Shutdown(System.Boolean,System.Int32)">
            <summary>Empties the queue of work items and abort the threads in the pool.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAll(AppHelpers.Threading.IWaitableResult[])">
            <summary>Wait for all work items to complete</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <returns>true when every work item in workItemResults has completed; otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAll(AppHelpers.Threading.IWaitableResult[],System.TimeSpan,System.Boolean)">
            <summary>Wait for all work items to complete</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <returns>true when every work item in workItemResults has completed; otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAll(AppHelpers.Threading.IWaitableResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>Wait for all work items to complete</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>true when every work item in workItemResults has completed; otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAll(AppHelpers.Threading.IWaitableResult[],System.Int32,System.Boolean)">
            <summary>Wait for all work items to complete</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <returns>true when every work item in workItemResults has completed; otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAll(AppHelpers.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>Wait for all work items to complete</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>true when every work item in workItemResults has completed; otherwise false.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAny(AppHelpers.Threading.IWaitableResult[])">
            <summary>Waits for any of the work items in the specified array to complete, cancel, or timeout</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <returns>The array index of the work item result that satisfied the wait, or WaitTimeout if any of the work items has been canceled.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAny(AppHelpers.Threading.IWaitableResult[],System.TimeSpan,System.Boolean)">
            <summary>Waits for any of the work items in the specified array to complete, cancel, or timeout</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <returns>The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAny(AppHelpers.Threading.IWaitableResult[],System.TimeSpan,System.Boolean,System.Threading.WaitHandle)">
            <summary>Waits for any of the work items in the specified array to complete, cancel, or timeout</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="timeout">The number of milliseconds to wait, or a TimeSpan that represents -1 milliseconds to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAny(AppHelpers.Threading.IWaitableResult[],System.Int32,System.Boolean)">
            <summary>Waits for any of the work items in the specified array to complete, cancel, or timeout</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <returns>The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitAny(AppHelpers.Threading.IWaitableResult[],System.Int32,System.Boolean,System.Threading.WaitHandle)">
            <summary>Waits for any of the work items in the specified array to complete, cancel, or timeout</summary>
            <param name="waitableResults">Array of work item result objects</param>
            <param name="millisecondsTimeout">The number of milliseconds to wait, or Timeout.Infinite (-1) to wait indefinitely.</param>
            <param name="exitContext">true to exit the synchronization domain for the context before the wait (if in a synchronized context), and reacquire it; otherwise, false.</param>
            <param name="cancelWaitHandle">A cancel wait handle to interrupt the wait if needed</param>
            <returns>The array index of the work item result that satisfied the wait, or WaitTimeout if no work item result satisfied the wait and a time interval equivalent to millisecondsTimeout has passed or the work item has been canceled.</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.CreateWorkItemsGroup(System.Int32)">
            <summary>Creates a new WorkItemsGroup.</summary>
            <param name="concurrency">The number of work items that can be run concurrently</param>
            <returns>A reference to the WorkItemsGroup</returns>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.CreateWorkItemsGroup(System.Int32,AppHelpers.Threading.WorkItemGroupStartInfo)">
            <summary>Creates a new WorkItemsGroup.</summary>
            <param name="concurrency">The number of work items that can be run concurrently</param>
            <param name="wigStartInfo">A WorkItemsGroup configuration that overrides the default behavior</param>
            <returns>A reference to the WorkItemsGroup</returns>
        </member>
        <member name="E:AppHelpers.SmartThreadPool.OnThreadInitialization">
            <summary>This event is fired when a thread is created. Use it to initialize a thread before the work items use it.</summary>
        </member>
        <member name="E:AppHelpers.SmartThreadPool.OnThreadTermination">
            <summary>This event is fired when a thread is terminating. Use it for cleanup.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.MinThreads">
            <summary>Get/Set the lower limit of threads in the pool.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.MaxThreads">
            <summary>Get/Set the upper limit of threads in the pool.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.ActiveThreads">
            <summary>Get the number of threads in the thread pool. Should be between the lower and the upper limits.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.InUseThreads">
            <summary>Get the number of busy (not idle) threads in the thread pool.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.IsWorkItemCanceled">
            <summary>Returns true if the current running work item has been cancelled. Must be used within the work item's callback method. The work item should sample this value in order to know if it needs to quit before its completion.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.AbortOnWorkItemCancel">
            <summary>Checks if the work item has been cancelled, and if yes then abort the thread. Can be used with Cancel and timeout</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.STPStartInfo">
            <summary>Thread Pool start information (readonly)</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.IsShuttingdown">
            <summary>返回线程池是否处于正在关闭的状态。</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.PerformanceCountersReader">
            <summary>Return the local calculated performance counters Available only if STPStartInfo.EnableLocalPerformanceCounters is true.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.Concurrency">
            <summary>Get/Set the maximum number of work items that execute cocurrency on the thread pool</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.WaitingCallbacks">
            <summary>Get the number of work items in the queue.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.GetStates">
            <summary>Get an array with all the state objects of the currently running items. The array represents a snap shot and impact performance.</summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.StartInfo">
            <summary>WorkItemsGroup start information (readonly)</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Start">
            <summary>Start the thread pool if it was started suspended. If it is already running, this method is ignored.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Cancel(System.Boolean)">
            <summary>Cancel all work items using thread abortion</summary>
            <param name="abortExecution">True to stop work items by raising ThreadAbortException</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.WaitForIdle(System.Int32)">
            <summary>Wait for the thread pool to be idle</summary>
        </member>
        <member name="E:AppHelpers.SmartThreadPool.OnIdle">
            <summary>This event is fired when all work items are completed. (When IsIdle changes to true) This event only work on WorkItemsGroup. On SmartThreadPool it throws the NotImplementedException.</summary>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Join(System.Collections.Generic.IEnumerable{System.Action})">
            <summary>Executes all actions in parallel. Returns when they all finish.</summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Join(System.Action[])">
            <summary>Executes all actions in parallel. Returns when they all finish.</summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Choice(System.Collections.Generic.IEnumerable{System.Action})">
            <summary>Executes all actions in parallel Returns when the first one completes</summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Choice(System.Action[])">
            <summary>Executes all actions in parallel Returns when the first one completes</summary>
            <param name="actions">Actions to execute</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Pipe``1(``0,System.Collections.Generic.IEnumerable{System.Action{``0}})">
            <summary>Executes actions in sequence asynchronously. Returns immediately.</summary>
            <param name="pipeState">A state context that passes</param>
            <param name="actions">Actions to execute in the order they should run</param>
        </member>
        <member name="M:AppHelpers.SmartThreadPool.Pipe``1(``0,System.Action{``0}[])">
            <summary>Executes actions in sequence asynchronously. Returns immediately.</summary>
            <param name="pipeState"></param>
            <param name="actions">Actions to execute in the order they should run</param>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.ThreadEntry._creationTime">
            <summary>
            The thread creation time
            The value is stored as UTC value.
            </summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.ThreadEntry._lastAliveTime">
            <summary>
            The last time this thread has been running
            It is updated by IAmAlive() method
            The value is stored as UTC value.
            </summary>
        </member>
        <member name="F:AppHelpers.SmartThreadPool.ThreadEntry._associatedSmartThreadPool">
            <summary>
            A reference from each thread in the thread pool to its SmartThreadPool
            object container.
            With this variable a thread can know whatever it belongs to a 
            SmartThreadPool.
            </summary>
        </member>
        <member name="P:AppHelpers.SmartThreadPool.ThreadEntry.CurrentWorkItem">
            <summary>
            A reference to the current work item a thread from the thread pool 
            is executing.
            </summary>            
        </member>
        <member name="T:AppHelpers.ValueConverter">
            <summary>用于帮助转换数值的类。</summary>
            <remarks>此类可从源代码级别引用。</remarks>
        </member>
        <member name="M:AppHelpers.ValueConverter.Cast``2(``0)">
            <summary>将传入类型的对象按名称包装为指定的接口对象。被包装的类型和包装的接口均需为公共可见类型。</summary>
            <typeparam name="TSource">需要包装的源对象类型，类型必须为公共可见类型。</typeparam>
            <typeparam name="TInterface">目标接口对象类型，类型必须为公共可见类型。</typeparam>
            <param name="source">源对象。</param>
            <returns>返回将 <paramref name="source"/> 包装成 <typeparamref name="TInterface"/> 实例的代理类实例。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.Convert``2(``0)">
            <summary>尝试将 <typeparamref name="TSource"/> 转换为 <typeparamref name="TTarget"/> 类型。</summary>
            <typeparam name="TSource">需要转换的类型。</typeparam>
            <typeparam name="TTarget">转换后的类型。</typeparam>
            <param name="value">需要转换的值。</param>
            <remarks>
            <para>本方法按如下优先级寻找可在类型之间转换的方法，并编译成动态函数缓存：</para>
            <list type="ordered">
            <item>等同类型、继承或实现类型（无需转换）</item>
            <item>类型到字符串的转换（当 <typeparamref name="TTarget"/> 为 <see cref="T:System.String"/> 时适用）</item>
            <item>装箱（当 <typeparamref name="TTarget"/> 为 <see cref="T:System.Object"/> 时适用）</item>
            <item>原始值类型转换</item>
            <item>可空类型转换</item>
            <item><see cref="T:System.Convert"/> To<typeparamref name="TTarget"/> 方法支持的转换</item>
            <item>显式类型转换</item>
            <item>隐式类型转换</item>
            <item>静态 TryParse 方法（仅当 <typeparamref name="TSource"/> 为字符串且 <typeparamref name="TTarget"/> 具有静态 TryParse(string, out <typeparamref name="TTarget"/>) 方法时适用）</item>
            <item>静态 Parse 方法（仅当 <typeparamref name="TSource"/> 为字符串且 <typeparamref name="TTarget"/> 具有静态 Parse(string) 方法时适用）</item>
            <item>数组到数组、元素到数组（仅当数组元素类型可相互转换时适用）</item>
            <item>元素到集合（仅当 <typeparamref name="TTarget"/> 为 <see cref="T:System.Collections.Generic.IEnumerable`1" />且具有 Add(<typeparamref name="TSource"/>) 方法时适用）</item>
            <item>实例化（当 <typeparamref name="TTarget"/> 具有参数为 <typeparamref name="TSource"/> 的构造函数时适用）</item>
            </list>
            </remarks>
            <exception cref="T:System.InvalidCastException">未找到转换方法，<typeparamref name="TSource"/> 无法转换为 <typeparamref name="TTarget"/>。</exception>
        </member>
        <member name="M:AppHelpers.ValueConverter.Convert``2(``0,``1)">
            <summary>尝试将 <typeparamref name="TSource"/> 转换为 <typeparamref name="TTarget"/> 类型。转换失败时，返回默认值。</summary>
            <typeparam name="TSource">需要转换的类型。</typeparam>
            <typeparam name="TTarget">转换后的类型。</typeparam>
            <param name="value">需要转换的值。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <exception cref="T:System.InvalidCastException">未找到转换方法，<typeparamref name="TSource"/> 无法转换为 <typeparamref name="TTarget"/>。</exception>
        </member>
        <member name="M:AppHelpers.ValueConverter.Convert``1(System.Object)">
            <summary>尝试将未确定类型的值转换为 <typeparamref name="TTarget"/> 类型。</summary>
            <typeparam name="TTarget">转换后的类型。</typeparam>
            <param name="value">需要转换的值。</param>
            <seealso cref="M:AppHelpers.ValueConverter.Convert``2(``0)"/>
            <exception cref="T:System.InvalidCastException">未找到转换方法，<paramref name="value"/> 的类型无法转换为 <typeparamref name="TTarget"/>。</exception>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinCharArray(System.Byte[])">
            <summary>将传入的字节数组转换为 HexBin 形式的字符数组。</summary>
            <param name="source">需要转换的字节数组。</param>
            <returns>转换所得的 HexBin 字符数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinCharArray(System.Byte[],System.Boolean)">
            <summary>将传入的字节数组转换为 HexBin 形式的字符数组。</summary>
            <param name="source">需要转换的字节数组。</param>
            <param name="upperCaseHex">是否使用大写字母形式表示 10 至 15 之间的值。</param>
            <returns>转换所得的 HexBin 字符数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinCharArray(System.Byte[],System.Boolean,System.Char,System.Int32,System.Int32)">
            <summary>从 <paramref name="source"/> 第 <paramref name="offset"/> 个字节（从 0 起算）开始，将后续 <paramref name="count"/> 个字节转换为 HexBin 形式的字符数组。</summary>
            <param name="source">需要转换的字节数组。</param>
            <param name="upperCaseHex">是否使用大写字母形式表示 10 至 15 之间的值。</param>
            <param name="separator">字节之间的分隔符。值为 '\0' 时不添加分隔符。</param>
            <param name="offset">开始转换字节数组的位置。</param>
            <param name="count">需转换的字节数。</param>
            <returns>转换所得的 HexBin 字符数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.Byte)">
            <summary>将传入的字节转换为 HexBin 形式的字符串。</summary>
            <param name="value">需要转换的字节。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.Byte,System.Boolean)">
            <summary>将传入的字节转换为 HexBin 形式的字符串。</summary>
            <param name="value">需要转换的字节。</param>
            <param name="upperCaseHex">是否使用大写字母形式表示 10 至 15 之间的值。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.Byte[])">
            <summary>将传入的字节数组转换为 HexBin 形式的字符串。</summary>
            <param name="source">需要转换的字节数组。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.Byte[],System.Boolean,System.Char)">
            <summary>将传入的字节数组转换为 HexBin 形式的字符串。</summary>
            <param name="source">需要转换的字节数组。</param>
            <param name="upperCaseHex">是否使用大写字母形式表示 10 至 15 之间的值。</param>
            <param name="separator">字节之间的分隔符。值为 '\0' 时不添加分隔符。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.Byte[],System.Boolean,System.Char,System.Int32,System.Int32)">
            <summary>从 <paramref name="source"/> 第 <paramref name="offset"/> 个字节（从 0 起算）开始，将后续 <paramref name="count"/> 个字节转换为 HexBin 形式的字符串。</summary>
            <param name="source">需要转换的字节数组。</param>
            <param name="upperCaseHex">是否使用大写字母形式表示 10 至 15 之间的值。</param>
            <param name="separator">字节之间的分隔符。值为 '\0' 时不添加分隔符。</param>
            <param name="offset">开始转换字节数组的位置。</param>
            <param name="count">需转换的字节数。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.ArraySegment{System.Byte})">
            <summary>将 <see cref="T:System.ArraySegment`1"/> 范围的字节转换为 HexBin 形式的字符串。</summary>
            <param name="source">需要转换的字节数组。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToHexBinString(System.ArraySegment{System.Byte},System.Boolean,System.Char)">
            <summary>将 <see cref="T:System.ArraySegment`1"/> 范围的字节转换为 HexBin 形式的字符串。</summary>
            <param name="source">需要转换的字节数组。</param>
            <param name="upperCaseHex">是否使用大写字母形式表示 10 至 15 之间的值。</param>
            <param name="separator">字节之间的分隔符。值为 '\0' 时不添加分隔符。</param>
            <returns>转换所得的 HexBin 字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.DecodeHexBinString(System.String)">
            <summary>将 HexBin 编码的字符串还原为字节数组（字节之间可有超过1个的非16进制字符作为分隔符）。</summary>
            <param name="value">使用 HexBin 编码的字符串。</param>
            <returns>解码后的字节数组。</returns>
            <example><![CDATA["00ff".DecodeHexBinString(); "FA-B8".DecodeHexBinString();]]></example>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToRoman(System.Int32)">
            <summary>
            将数字转换为罗马数字表示形式。
            </summary>
            <param name="value">需要转换的数字。</param>
            <returns>罗马数字形式的字符串。如字符超过 49999 或小于 1，则返回 <see cref="F:System.String.Empty"/>。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToAlphabet(System.Int32,System.Boolean)">
            <summary>
            将数字转换成 a、b、c 或 A、B、C……字母序列形式。
            </summary>
            <param name="value">需要转换的数字，应为正整数。</param>
            <param name="upper">是否生成大写序列。</param>
            <returns>从 A 到 Z 排序的字母序列形式。如 <paramref name="value"/> 非正整数，返回 <see cref="F:System.String.Empty"/>。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToChineseNumber(System.Int32,AppHelpers.ChineseNumericStyle)">
            <summary>
            使用指定的格式将整数转换为中文数字形式。
            </summary>
            <param name="number">需要转换的数字。</param>
            <param name="style">中文数字样式。</param>
            <returns>中文汉字数字。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.CastOrDefault``1(System.Object,``0)">
            <summary>尝试将 <paramref name="value"/> 转换为指定类型。如转换失败，返回 <paramref name="defaultValue"/>。</summary>
            <param name="value">需要转换的值。</param>
            <param name="defaultValue">转换失败后的默认值。</param>
            <typeparam name="TValue">需要转换的类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ValueConverter.CastOrDefault``1(System.Object)">
            <summary>尝试将 <paramref name="value"/> 转换为指定类型。如转换失败，返回 <typeparamref name="TValue"/> 的默认值。</summary>
            <param name="value">需要转换的值。</param>
            <typeparam name="TValue">需要转换的类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ValueConverter.SubstituteNull``1(``0,System.Func{``0})">
            <summary>在输入值为 null 时，调用 <paramref name="handler"/> 函数，返回该函数的返回值；否则返回 <paramref name="value"/> 值。</summary>
            <typeparam name="T">值的类型</typeparam>
            <param name="value">需要检查空引用的值。</param>
            <param name="handler">值为空引用时需要调用的函数。</param>
        </member>
        <member name="M:AppHelpers.ValueConverter.SubstituteDefault``1(``0,``0)">
            <summary>在指定值 <paramref name="value"/> 为默认值（default(T)）时，返回 <paramref name="otherValue"/>，否则返回原值。</summary>
            <typeparam name="T">传入值的类型。</typeparam>
            <param name="value">需要检查的值。</param>
            <param name="otherValue">返回的另一个值。</param>
            <returns>指定值为默认值时返回 <paramref name="otherValue"/>，否则返回原值。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.Substitute``1(``0,``0,``0)">
            <summary>当 <paramref name="value"/> 取值为 <paramref name="oldValue"/> 的替换为 <paramref name="substitution"/> 的值，否则返回 <paramref name="value"/> 值。</summary>
            <typeparam name="T">替换值的类型。</typeparam>
            <param name="value">需要检查的值。</param>
            <param name="oldValue">被替换的值。</param>
            <param name="substitution">替换的值。</param>
            <returns>替换后的值。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.GetBytes(System.String)">
            <summary>返回使用 UTF8 编码的字节数组。如字符串为空，返回 0 长度的数组。</summary>
            <param name="value">需要转换的字符串。</param>
            <returns>转换后的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.GetBytes(System.String,System.Text.Encoding)">
            <summary>返回使用 <paramref name="encoding"/> 编码的字节数组。如字符串为空，返回 0 长度的数组。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="encoding">用于编码字符串的 <see cref="T:System.Text.Encoding"/>。此值为 null 时，使用 UTF-8 编码。</param>
            <returns>转换后的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.GetBytes(System.Char[],System.Text.Encoding)">
            <summary>返回使用 <paramref name="encoding"/> 编码的字节数组。如字符字符数组为空，返回 0 长度的数组。</summary>
            <param name="value">需要转换的字符数组。</param>
            <param name="encoding">用于编码字符串的 <see cref="T:System.Text.Encoding"/>。此值为 null 时，使用 UTF-8 编码。</param>
            <returns>转换后的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToString(System.Byte[],System.Text.Encoding)">
            <summary>返回使用特定编码解码字节数组所得的 <see cref="T:System.String"/> 实例。</summary>
            <param name="value">需要解码的二进制数组。</param>
            <param name="encoding">用于解码字符串的 <see cref="T:System.Text.Encoding"/>。此值为 null 时，使用 UTF-8 解码。</param>
            <returns>解码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToString(System.Byte[],System.Text.Encoding,System.Int32,System.Int32)">
            <summary>返回使用特定编码解码字节数组所得的 <see cref="T:System.String"/> 实例。</summary>
            <param name="value">需要解码的二进制数组。</param>
            <param name="encoding">用于解码字符串的 <see cref="T:System.Text.Encoding"/>。此值为 null 时，使用 UTF-8 解码。</param>
            <param name="offset">二进制数组开始解码的位置。</param>
            <param name="count">需要解码的字节数量。</param>
            <returns>解码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBoolean(System.String,System.Boolean)">
            <summary>
            <para>将字符串转换为 <see cref="T:System.Boolean"/> 类型。</para>
            <para>当 <paramref name="defaultValue"/> 为 true 时，除 No、Off、False、数字0值（含连续出现的0）、“否”、“错”、“关”、“错误”以外的值为真；当 <paramref name="defaultValue"/> 为 false 时，Yes、On、True、非0数字值、“是”、“对”、“开”、“正确”以外的值为假。空字符串返回默认值。</para>
            </summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">转换失败时返回的默认值。</param>
            <seealso cref="M:AppHelpers.ValueConverter.TryParseBoolean(System.String,System.Boolean@)"/>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParseBoolean(System.String,System.Boolean@)">
            <summary>尝试将字符串转换为 <see cref="T:System.Boolean"/> 类型。成功转换后，返回 true，否则返回 false。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="result">转换后所得的 <see cref="T:System.Boolean"/> 值。</param>
            <seealso cref="M:AppHelpers.ValueConverter.ToBoolean(System.String,System.Boolean)"/>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToDateTime(System.String)">
            <summary>将传入的字符串转换为 <see cref="T:System.DateTime"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <returns>日期时间值。如传入的字符串无法转换为日期，则返回 <see cref="F:System.DateTime.MinValue"/>。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToDateTime(System.String,System.DateTime)">
            <summary>将传入的字符串转换为 <see cref="T:System.DateTime"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">默认值。</param>
            <returns>日期时间值。如传入的字符串无法转换为日期，则返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToTimeSpan(System.String,System.TimeSpan)">
            <summary>将传入的字符串转换为 <see cref="T:System.TimeSpan"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">默认值。</param>
            <returns>时间间隔值。如传入的字符串无法转换为时间间隔，则返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToTimeSpan(System.DateTime)">
            <summary>截取 <see cref="T:System.DateTime"/> 的时间部分构成新的 <see cref="T:System.TimeSpan"/>。</summary>
            <param name="value">需要截取时间的 <see cref="T:System.DateTime"/>。</param>
            <returns><see cref="T:System.DateTime"/> 的时间部分。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToEnum``1(System.String,``0@)">
            <summary>尝试将传入字符串解析为枚举类型，并在字段有效时返回对应的枚举值，如字段无效，则传入的值不被修改。</summary>
            <typeparam name="T">传入的类型必须为枚举类型。如该类型的字段值有 <see cref="T:System.Xml.Serialization.XmlEnumAttribute"/>，则返回该特性对应的文本值。</typeparam>
            <param name="value">需要解析的字符串。</param>
            <param name="output">返回的枚举类型。</param>
            <returns>是否成功解析传入的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParse(System.String,System.Int32@)">
            <summary>采用与区域无关的格式将字符串转换为 <see cref="T:System.Int32"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="result">转换结果。如无法转换，转换结果置为默认值。</param>
            <returns>成功转换时，返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParse(System.String,System.Int64@)">
            <summary>采用与区域无关的格式将字符串转换为 <see cref="T:System.Int64"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="result">转换结果。如无法转换，转换结果置为默认值。</param>
            <returns>成功转换时，返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParse(System.String,System.Single@)">
            <summary>采用与区域无关的格式将字符串转换为 <see cref="T:System.Single"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="result">转换结果。如无法转换，转换结果置为默认值。</param>
            <returns>成功转换时，返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParse(System.String,System.Double@)">
            <summary>采用与区域无关的格式将字符串转换为 <see cref="T:System.Double"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="result">转换结果。如无法转换，转换结果置为默认值。</param>
            <returns>成功转换时，返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParse(System.String,System.Decimal@)">
            <summary>采用与区域无关的格式将字符串转换为 <see cref="T:System.Decimal"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="result">转换结果。如无法转换，转换结果置为默认值。</param>
            <returns>成功转换时，返回 true，否则返回 false。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.Round(System.Single,System.Int32)">
            <summary>将数值四舍五入截取到 <paramref name="digits"/> 指定的位数。</summary>
            <param name="value">需要截取的数值。</param>
            <param name="digits">精度位数。</param>
            <returns>截取后的数值。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.Round(System.Double,System.Int32)">
            <summary>将数值四舍五入截取到 <paramref name="digits"/> 指定的位数。</summary>
            <param name="value">需要截取的数值。</param>
            <param name="digits">精度位数。</param>
            <returns>截取后的数值。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt32(System.Single)">
            <summary>将浮点数四舍五入取整。</summary>
            <param name="value">需要转换的浮点数。</param>
            <returns>浮点数的整数部分。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt32(System.Double)">
            <summary>将浮点数四舍五入取整。</summary>
            <param name="value">需要转换的浮点数。</param>
            <returns>浮点数的整数部分。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt64(System.Single)">
            <summary>将浮点数四舍五入取整。</summary>
            <param name="value">需要转换的浮点数。</param>
            <returns>浮点数的整数部分。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt64(System.Double)">
            <summary>将浮点数四舍五入取整。</summary>
            <param name="value">需要转换的浮点数。</param>
            <returns>浮点数的整数部分。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt32(System.String)">
            <summary>将字符串转换为整数，如无法正常转换，返回 0。</summary>
            <param name="value">需要转换的字符串。</param>
            <returns>返回转换后的整数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt32(System.String,System.Int32)">
            <summary>将字符串转换为整数，如无法正常转换，返回 <paramref name="defaultValue"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <returns>返回转换后的整数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt64(System.String)">
            <summary>将字符串转换为长整数，如无法正常转换，返回 0。</summary>
            <param name="value">需要转换的字符串。</param>
            <returns>返回转换后的长整数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInt64(System.String,System.Int64)">
            <summary>将字符串转换为长整数，如无法正常转换，返回 <paramref name="defaultValue"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <returns>返回转换后的长整数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToSingle(System.String)">
            <summary>将字符串转换为单精度浮点数，如无法正常转换，返回 0。</summary>
            <param name="value">需要转换的字符串。</param>
            <returns>返回转换后的单精度浮点数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToSingle(System.String,System.Single)">
            <summary>将字符串转换为单精度浮点数，如无法正常转换，返回 <paramref name="defaultValue"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <returns>返回转换后的单精度浮点数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToDouble(System.String)">
            <summary>将字符串转换为双精度浮点数，如无法正常转换，返回 0。</summary>
            <param name="value">需要转换的字符串。</param>
            <returns>返回转换后的双精度浮点数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToDouble(System.String,System.Double)">
            <summary>将字符串转换为双精度浮点数，如无法正常转换，返回 <paramref name="defaultValue"/>。</summary>
            <param name="value">需要转换的字符串。</param>
            <param name="defaultValue">转换失败后返回的默认值。</param>
            <returns>返回转换后的双精度浮点数。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.DateTimeOffset)">
            <summary>将传入的值按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 转换为文本。</summary>
            <param name="value">需要转换为文本的值。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Int32)">
            <summary>将传入的值按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 转换为文本。</summary>
            <param name="value">需要转换为文本的值。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Single)">
            <summary>将浮点数转换为字符串表示形式，绝对值小于 0.00001 的值将视为 0。</summary>
            <param name="value">需转换的浮点数值</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Double)">
            <summary>将浮点数转换为字符串表示形式，绝对值小于 0.000000000001 的值将视为 0。</summary>
            <param name="value">需转换的浮点数值</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Int64)">
            <summary>将传入的值按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 转换为文本。</summary>
            <param name="value">需要转换为文本的值。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Decimal)">
            <summary>将传入的值按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 转换为文本。</summary>
            <param name="value">需要转换为文本的值。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Single,System.String)">
            <summary>将传入的值按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 和指定的格式转换为文本。</summary>
            <param name="value">需要转换为文本的值。</param>
            <param name="format">转换的格式。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Byte)">
            <summary>将传入的值按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 转换为文本。</summary>
            <param name="value">需要转换为文本的值。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToInvariantCultureString(System.Byte[])">
            <summary>将传入的字节数组按 <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> 转换为文本，每个二进制值中间以空格分隔。</summary>
            <param name="value">需要转换为文本的数组。</param>
            <returns>非特定区域的文本。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBase32String(System.Guid)">
            <summary>将 GUID 转换为 Base32 编码的字符串（不补长）。</summary>
            <param name="value">需要编码的值。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBase64String(System.Guid)">
            <summary>将 GUID 转换为 Base64 编码的字符串。</summary>
            <param name="value">需要编码的值。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBase64ShortString(System.Guid)">
            <summary>将 GUID 转换为 Base64 编码的字符串。</summary>
            <param name="value">需要编码的值。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBase32String(System.Byte[])">
            <summary>将字节数组转换为 Base32 编码的字符串。字节数组为空时，返回 <see cref="F:System.String.Empty"/>。</summary>
            <param name="source">需要编码的字节数组。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBase32String(System.Byte[],System.Boolean)">
            <summary>将字节数组转换为 Base32 编码的字符串。字节数组为空时，返回 <see cref="F:System.String.Empty"/>。</summary>
            <param name="source">需要编码的字节数组。</param>
            <param name="padding">是否在编码后字符串长度不足 5 的整数倍时补足字符。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToBase64String(System.Byte[])">
            <summary>将传入的字节数组转换为 Base64 编码的字符串。字节数组为空时，返回 <see cref="F:System.String.Empty"/>。</summary>
            <param name="source">需要编码的字节数组。</param>
            <returns>编码后的字符串。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToGuid(System.String)">
            <summary>将字符串转换为 GUID。此方法除支持 36、32 位 GUID 外，还支持使用 <see cref="M:AppHelpers.ValueConverter.ToBase32String(System.Guid)"/> 编码所得的 26 位、Base64 编码所得的 24 位，或 <see cref="M:AppHelpers.ValueConverter.ToBase64ShortString(System.Guid)"/> 返回的短 Guid 字符串。如字符串无法解码为 GUID，则返回 <see cref="F:System.Guid.Empty"/>。</summary>
            <param name="source">已编码的字符串。</param>
            <returns>转换所得的 Guid。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.DecodeBase32String(System.String)">
            <summary>将 Base32 编码的字符串还原为字节数组。</summary>
            <param name="value">使用 Base32 编码的字符串。</param>
            <returns>返回以 Base32 的字节数组。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToDescription(System.Enum)">
            <summary>
            <para>返回枚举类型的文本表达形式。对于使用 <see cref="T:System.FlagsAttribute"/> 标记的枚举值，值之间采用“, ”分隔。</para>
            <para>如枚举值具有 <see cref="T:System.ComponentModel.DescriptionAttribute"/>，则返回其 <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> 值。</para>
            <para>此方法使用缓存保留枚举值与文本的关系，故重复调用的速度高于 <see cref="M:System.Enum.ToString"/> 及其重载方法。</para>
            </summary>
            <param name="value">需要转换为文本形式的枚举值。</param>
            <returns>枚举值的文本表达形式。</returns>
        </member>
        <member name="M:AppHelpers.ValueConverter.ToEnum``1(System.String)">
            <summary>将文本转换为指定的枚举类型值。如不存在与文本对应的值，返回 <typeparamref name="TEnum"/> 的默认值。</summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="value">需要转换为枚举类型的文本。</param>
            <returns>对应的枚举值。</returns>
            <exception cref="T:System.TypeInitializationException"><typeparamref name="TEnum"/> 不是枚举类型。</exception>
        </member>
        <member name="M:AppHelpers.ValueConverter.TryParseEnum``1(System.String,``0@)">
            <summary>将文本转换为指定的枚举类型值。</summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="value">需要转换为枚举类型的文本。</param>
            <param name="result">转换结果。如不存在与文本对应的值，返回 <typeparamref name="TEnum"/> 的默认值。</param>
            <returns>成功转换时，返回 true。</returns>
            <exception cref="T:System.TypeInitializationException"><typeparamref name="TEnum"/> 不是枚举类型。</exception>
        </member>
        <member name="T:AppHelpers.ValueConverter.Base32Encoding">
            <summary>Base32 编码方式实现 参见：http://stackoverflow.com/questions/641361/base32-decoding</summary>
        </member>
        <member name="T:AppHelpers.ChineseNumericStyle">
            <summary>
            用于 <see cref="M:AppHelpers.ValueConverter.ToChineseNumber(System.Int32,AppHelpers.ChineseNumericStyle)"/> 方法中指定输出中文数字样式的位组合枚举。
            </summary>
        </member>
        <member name="F:AppHelpers.ChineseNumericStyle.Default">
            <summary>使用简体、小写、含位数标记的汉字</summary>
        </member>
        <member name="F:AppHelpers.ChineseNumericStyle.Traditional">
            <summary>使用繁体汉字</summary>
        </member>
        <member name="F:AppHelpers.ChineseNumericStyle.Upper">
            <summary>使用大写汉字数字（如壹、贰、叁）而不是小写汉字数字</summary>
        </member>
        <member name="F:AppHelpers.ChineseNumericStyle.NumericZero">
            <summary>使用数字的“○”而不是“零”</summary>
        </member>
        <member name="F:AppHelpers.ChineseNumericStyle.NoDigits">
            <summary>不包含“十”、“百”、“千”、“万”和“亿”位数</summary>
        </member>
        <member name="T:AppHelpers.XmlHelper">
            <summary>
            用于帮助处理 XML 数据的类。
            </summary>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.GetElement(System.Xml.XmlNode,System.String)">
            <summary>
            尝试获取元素，如元素不存在，返回 null。
            </summary>
            <param name="parent">需要获取元素的父元素。</param>
            <param name="name">需要获取的子元素名称。</param>
            <returns>获取的元素。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.GetOrCreateElement(System.Xml.XmlNode,System.String)">
            <summary>
            尝试获取元素，如该元素不存在，则创建一个指定的元素。
            </summary>
            <param name="parent">需要获取元素的父元素。</param>
            <param name="name">需要获取的子元素名称。</param>
            <returns>获取的元素或新创建的元素。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.AppendElement(System.Xml.XmlNode,System.String)">
            <summary>
            附加元素为当前节点的子元素。
            </summary>
            <param name="element">需要附加元素的父节点。</param>
            <param name="name">元素名称。</param>
            <returns>新创建的元素。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.AppendElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            附加元素为当前节点的子元素，并指定子元素的文本内容。
            </summary>
            <param name="element">需要附加元素的父节点。</param>
            <param name="name">元素名称。</param>
            <param name="content">元素的内容。</param>
            <returns>新创建的元素。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.InsertElement(System.Xml.XmlNode,System.String,System.Xml.XmlNode)">
            <summary>
            插入元素到指定的子元素前面。
            </summary>
            <param name="element">需要附加元素的父节点。</param>
            <param name="name">元素名称。</param>
            <param name="refChild">要插入到前面的子元素。</param>
            <returns>插入的元素。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.Rename(System.Xml.XmlElement,System.String)">
            <summary>
            更改指定元素的名称。
            </summary>
            <param name="element">要更改的元素。</param>
            <param name="newName">元素的新名称。</param>
            <returns>具有新名称的新元素。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.MoveBeforeSameNameSibling(System.Xml.XmlElement)">
            <summary>
            将指定元素移动到同名元素的前面。如不存在同名元素，则不会移动该元素。
            </summary>
            <param name="element">需要移动的元素。</param>
            <returns>传入的元素。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.MoveAfterSameNameSibling(System.Xml.XmlElement)">
            <summary>
            将指定元素移动到同名元素的后面。如不存在同名元素，则不会移动该元素。
            </summary>
            <param name="element">需要移动的元素。</param>
            <returns>传入的元素。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.RemoveSelf(System.Xml.XmlNode)">
            <summary>
            删除当前节点，返回父元素。
            </summary>
            <param name="element">要删除的节点。</param>
            <returns>被删除节点的父元素。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.DuplicateAfter(System.Xml.XmlNode)">
            <summary>
            在当前元素后面创建一个副本元素。
            </summary>
            <param name="element">需要创建副本的元素。</param>
            <returns>新创建的元素。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.SetAttributes(System.Xml.XmlElement,System.String[])">
            <summary>
            批量设置元素的属性及属性值。
            </summary>
            <param name="element">需要设置属性的元素。</param>
            <param name="attributes">先后成对出现的属性名称和属性值。</param>
            <returns>设置了属性的元素。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.ToXmlNodeArray(System.Xml.XmlNodeList)">
            <summary>
            将可变的 <see cref="T:System.Xml.XmlNodeList"/> 转换为固定的数组。
            </summary>
            <param name="nodes">需要转换的节点列表。</param>
            <returns>节点数组。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.ToNodeList``1(System.Xml.XmlNodeList)">
            <summary>
            将可变的 <see cref="T:System.Xml.XmlNodeList"/> 转换为 <see cref="T:System.Collections.Generic.IList`1"/> 实例。如果节点类型不为 <typeparamref name="T"/>，则不会包含到返回的节点列表中。
            </summary>
            <typeparam name="T">节点的类型。</typeparam>
            <param name="nodes">需要转换的节点列表。</param>
            <returns>符合指定类型的节点列表。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String,System.Boolean)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值，如不存在属性，或属性不能解析为布尔值，则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="defaultValue">属性的默认值。</param>
            <returns>属性的值；如不存在该属性，返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String,System.Int32)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值，如不存在属性，或属性不能解析为整数值，则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="defaultValue">属性的默认值。</param>
            <returns>属性的值；如不存在该属性，返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String,System.Int64)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值，如不存在属性，或属性不能解析为整数值，则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="defaultValue">属性的默认值。</param>
            <returns>属性的值；如不存在该属性，返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String,System.Single)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值，如不存在属性，或属性不能解析为浮点数值，则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="defaultValue">属性的默认值。</param>
            <returns>属性的值；如不存在该属性，返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String,System.Double)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值，如不存在属性，或属性不能解析为浮点数值，则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="defaultValue">属性的默认值。</param>
            <returns>属性的值；如不存在该属性，返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <returns>属性的值；如不存在该属性，返回 null。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            获取 <paramref name="element"/> 元素名称为 <paramref name="name"/> 的属性值，如不存在属性，则返回 <paramref name="defaultValue"/>。
            </summary>
            <param name="element">需要获取属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="defaultValue">属性的默认值。</param>
            <returns>属性的值；如不存在该属性，返回默认值。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.SetValue(System.Xml.XmlElement,System.String,System.Boolean,System.Boolean)">
            <summary>
            设置 <see cref="T:System.Xml.XmlElement"/> 的属性值，当要设置的值等于默认值时，删除属性。
            </summary>
            <param name="element">需要设置属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.SetValue(System.Xml.XmlElement,System.String,System.Int32,System.Int32)">
            <summary>
            设置 <see cref="T:System.Xml.XmlElement"/> 的属性值，当要设置的值等于默认值时，删除属性。
            </summary>
            <param name="element">需要设置属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.SetValue(System.Xml.XmlElement,System.String,System.Single,System.Single)">
            <summary>
            设置 <see cref="T:System.Xml.XmlElement"/> 的属性值，当要设置的值等于默认值时，删除属性。
            </summary>
            <param name="element">需要设置属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.SetValue(System.Xml.XmlElement,System.String,System.String)">
            <summary>
            设置 <see cref="T:System.Xml.XmlElement"/> 的属性值，当要设置的值为空时，删除属性。
            </summary>
            <param name="element">需要设置属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.SetValue(System.Xml.XmlElement,System.String,System.String,System.String)">
            <summary>
            设置 <see cref="T:System.Xml.XmlElement"/> 的属性值，当要设置的值等于默认值时，删除属性。
            </summary>
            <param name="element">需要设置属性值的元素。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetAttributeOrElement(System.Xml.XmlElement,System.String)">
            <summary>
            获取元素的属性或子元素文本值；如不存在该属性或子元素，则返回 <see cref="F:System.String.Empty"/>。
            </summary>
            <param name="parent">需要获取值的元素。</param>
            <param name="name">属性或子元素的名称。</param>
            <returns>文本值。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.GetElementValue(System.Xml.XmlElement,System.String)">
            <summary>
            获取元素子元素的文本值；如不存在该子元素，则返回 <see cref="F:System.String.Empty"/>。
            </summary>
            <param name="parent">需要获取值的元素。</param>
            <param name="name">子元素的名称。</param>
            <returns>文本值。</returns>
            <threadsafety static="false" instance="false"/> 
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlReader,System.String,System.Boolean)">
            <summary>
            从 <see cref="T:System.Xml.XmlReader"/> 读取指定名称的属性值，并转换为 <see cref="T:System.Boolean"/> 类型。
            </summary>
            <param name="reader">需要读取属性值的 <see cref="T:System.Xml.XmlReader"/>。</param>
            <param name="name">属性名称。</param>
            <param name="defaultValue">在缺少属性或属性值转换失败时采用的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlReader,System.String,System.Int32)">
            <summary>
            从 <see cref="T:System.Xml.XmlReader"/> 读取指定名称的属性值，并转换为 <see cref="T:System.Boolean"/> 类型。
            </summary>
            <param name="reader">需要读取属性值的 <see cref="T:System.Xml.XmlReader"/>。</param>
            <param name="name">属性名称。</param>
            <param name="defaultValue">在缺少属性或属性值转换失败时采用的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlReader,System.String,System.Single)">
            <summary>
            从 <see cref="T:System.Xml.XmlReader"/> 读取指定名称的属性值，并转换为 <see cref="T:System.Single"/> 类型。
            </summary>
            <param name="reader">需要读取属性值的 <see cref="T:System.Xml.XmlReader"/>。</param>
            <param name="name">属性名称。</param>
            <param name="defaultValue">在缺少属性或属性值转换失败时采用的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlReader,System.String)">
            <summary>
            获取 <paramref name="reader"/> 名称为 <paramref name="name"/> 的属性值。
            </summary>
            <param name="reader">需要获取属性值的 <see cref="T:System.Xml.XmlReader"/>。</param>
            <param name="name">属性的名称。</param>
            <returns>属性的值；如不存在该属性，返回 null。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue(System.Xml.XmlReader,System.String,System.String)">
            <summary>
            从 <see cref="T:System.Xml.XmlReader"/> 读取指定名称的属性值，并转换为 <see cref="T:System.String"/> 类型。
            </summary>
            <param name="reader">需要读取属性值的 <see cref="T:System.Xml.XmlReader"/>。</param>
            <param name="name">属性名称。</param>
            <param name="defaultValue">在缺少属性或属性值转换失败时采用的默认值。</param>
            <returns></returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.WriteValue(System.Xml.XmlWriter,System.String,System.Boolean)">
            <summary>
            向 <see cref="T:System.Xml.XmlWriter"/> 写出属性值。
            </summary>
            <param name="writer">需要写出属性值。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.WriteValue(System.Xml.XmlWriter,System.String,System.Boolean,System.Boolean)">
            <summary>
            当 <paramref name="value"/> 不等于 <paramref name="defaultValue"/> 时，向 <see cref="T:System.Xml.XmlWriter"/> 写出属性值。
            </summary>
            <param name="writer">需要写出属性值。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">不需要写出属性的默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.WriteValue(System.Xml.XmlWriter,System.String,System.Int32)">
            <summary>
            向 <see cref="T:System.Xml.XmlWriter"/> 写出属性值。
            </summary>
            <param name="writer">需要写出属性值。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.WriteValue(System.Xml.XmlWriter,System.String,System.Int32,System.Int32)">
            <summary>
            当 <paramref name="value"/> 不等于 <paramref name="defaultValue"/> 时，向 <see cref="T:System.Xml.XmlWriter"/> 写出属性值。
            </summary>
            <param name="writer">需要写出属性值。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">不需要写出属性的默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.WriteValue(System.Xml.XmlWriter,System.String,System.Single)">
            <summary>
            向 <see cref="T:System.Xml.XmlWriter"/> 写出属性值。
            </summary>
            <param name="writer">需要写出属性值。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.WriteValue(System.Xml.XmlWriter,System.String,System.String,System.String)">
            <summary>
            当 <paramref name="value"/> 不等于 <paramref name="defaultValue"/> 时，向 <see cref="T:System.Xml.XmlWriter"/> 写出属性值。
            </summary>
            <param name="writer">需要写出属性值。</param>
            <param name="name">属性的名称。</param>
            <param name="value">属性的值。</param>
            <param name="defaultValue">不需要写出属性的默认值。</param>
        </member>
        <member name="M:AppHelpers.XmlHelper.EvaluateText(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathExpression)">
            <summary>
            以当前 <paramref name="navigator"/> 为基准计算 XPath 表达式，返回字符串形式的结果。
            </summary>
            <param name="navigator">计算 XPath 表达式的基准节点。</param>
            <param name="expression">XPath 表达式。</param>
            <returns>计算结果的字符串表达形式。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.EvaluateText(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathExpression,System.Boolean,System.String)">
            <summary>
            以当前 <paramref name="navigator"/> 为基准计算 XPath 表达式，返回字符串形式的结果。
            </summary>
            <param name="navigator">计算 XPath 表达式的基准节点。</param>
            <param name="expression">XPath 表达式。</param>
            <param name="concatinateNodeSetText">是否将多个匹配节点的文本值串联起来。</param>
            <param name="separator">用于串联文本值的分隔符。</param>
            <returns>计算结果的字符串表达形式。</returns>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetAttributeOrElement``1(System.Xml.XmlElement,System.String)">
            <summary>获取 <paramref name="parent"/> 下指定名称的属性或子元素值，并将其转换为 <typeparamref name="TValue"/> 类型。</summary>
            <typeparam name="TValue">返回值的类型。</typeparam>
            <param name="parent">包含属性或子元素的元素。</param>
            <param name="name">需要获取的属性或子元素名称（区分大小写）。</param>
            <exception cref="T:System.InvalidCastException">无法找到将 <see cref="T:System.String"/> 转换为 <typeparamref name="TValue"/> 的方法。</exception>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetAttributeOrElement``1(System.Xml.XmlElement,System.String,``0)">
            <summary>获取 <paramref name="parent"/> 下指定名称的属性或子元素值，并将其转换为 <typeparamref name="TValue"/> 类型。</summary>
            <typeparam name="TValue">返回值的类型。</typeparam>
            <param name="parent">包含属性或子元素的元素。</param>
            <param name="name">需要获取的属性或子元素名称（区分大小写）。</param>
            <param name="defaultValue">在未找到指定属性或子元素，或该节点的值转换为 <typeparamref name="TValue"/> 失败时，返回默认值。</param>
            <exception cref="T:System.InvalidCastException">无法找到将 <see cref="T:System.String"/> 转换为 <typeparamref name="TValue"/> 的方法。</exception>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetElementValue``1(System.Xml.XmlElement,System.String)">
            <summary>获取 <paramref name="parent"/> 下指定名称的子元素值，并将其转换为 <typeparamref name="TValue"/> 类型。</summary>
            <typeparam name="TValue">返回值的类型。</typeparam>
            <param name="parent">包含子元素的元素。</param>
            <param name="name">需要获取的子元素名称（区分大小写）。</param>
            <exception cref="T:System.InvalidCastException">无法找到将 <see cref="T:System.String"/> 转换为 <typeparamref name="TValue"/> 的方法。</exception>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetElementValue``1(System.Xml.XmlElement,System.String,``0)">
            <summary>获取 <paramref name="parent"/> 下指定名称的子元素值，并将其转换为 <typeparamref name="TValue"/> 类型。</summary>
            <typeparam name="TValue">返回值的类型。</typeparam>
            <param name="parent">包含子元素的元素。</param>
            <param name="name">需要获取的子元素名称（区分大小写）。</param>
            <param name="defaultValue">在未找到指定子元素，或该元素值转换为 <typeparamref name="TValue"/> 失败时，返回默认值。</param>
            <exception cref="T:System.InvalidCastException">无法找到将 <see cref="T:System.String"/> 转换为 <typeparamref name="TValue"/> 的方法。</exception>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue``1(System.Xml.XmlElement,System.String)">
            <summary>获取 <paramref name="element"/> 下指定名称的属性值，并将其转换为 <typeparamref name="TValue"/> 类型。</summary>
            <typeparam name="TValue">返回值的类型。</typeparam>
            <param name="element">包含属性的元素。</param>
            <param name="name">需要获取的属性名称（区分大小写）。</param>
            <exception cref="T:System.InvalidCastException">无法找到将 <see cref="T:System.String"/> 转换为 <typeparamref name="TValue"/> 的方法。</exception>
        </member>
        <member name="M:AppHelpers.XmlHelper.GetValue``1(System.Xml.XmlElement,System.String,``0)">
            <summary>获取 <paramref name="element"/> 下指定名称的属性值，并将其转换为 <typeparamref name="TValue"/> 类型。</summary>
            <typeparam name="TValue">返回值的类型。</typeparam>
            <param name="element">包含属性的元素。</param>
            <param name="name">需要获取的属性名称（区分大小写）。</param>
            <param name="defaultValue">在未找到指定属性，或属性值转换为 <typeparamref name="TValue"/> 失败时，返回默认值。</param>
            <exception cref="T:System.InvalidCastException">无法找到将 <see cref="T:System.String"/> 转换为 <typeparamref name="TValue"/> 的方法。</exception>
        </member>
        <member name="T:AppHelpers.ApplicationHelper">
            <summary>
            获取应用程序信息的帮助类。
            </summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.LibraryVersion">
            <summary>获取本类库的版本号。</summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.LibraryFileVersion">
            <summary>获取本类库的文件版本号。</summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.AppVersion">
            <summary>获取当前入口程序的版本号。</summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.AppAssemblyInfo">
            <summary>获取当前入口程序的 <see cref="M:System.Diagnostics.FileVersionInfo.GetVersionInfo(System.String)"/> 版本号。</summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.IsRunningAsService">
            <summary>返回当前应用程序是否以服务运行。</summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.IsRunningInConsole">
            <summary>返回当前应用程序是否在控制台中运行。</summary>
        </member>
        <member name="P:AppHelpers.ApplicationHelper.Configuration">
            <summary>返回当前应用程序配置文件的根节点。应用程序的配置文件名为“主程序无扩展文件名.config”或“webapp.config”（Web 应用程序）。</summary>
            <seealso cref="M:AppHelpers.ApplicationHelper.GetAppSetting(System.String)"/>
            <seealso cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/>
        </member>
        <member name="E:AppHelpers.ApplicationHelper.ConfigurationChanged">
            <summary>应用程序配置文件更改的事件处理函数。事件处理函数可使用 <see cref="M:AppHelpers.ApplicationHelper.GetAppSetting(System.String)"/> 方法或 <see cref="P:AppHelpers.ApplicationHelper.Configuration"/> 属性读取所需的配置参数。应用程序的配置文件名为“主程序无扩展文件名.config”或“webapp.config”（Web 应用程序）。</summary>
            <remarks>处理函数的 sender 参数为 <see cref="P:AppHelpers.ApplicationHelper.Configuration"/>。</remarks>
            <seealso cref="M:AppHelpers.ApplicationHelper.GetAppSetting(System.String)"/>
            <seealso cref="P:AppHelpers.ApplicationHelper.Configuration"/>
        </member>
        <member name="M:AppHelpers.ApplicationHelper.GetAppSetting(System.String)">
            <summary>返回当前应用程序配置文件“appSettings/add”或“app/setting”元素下“key”属性为 <paramref name="settingKey"/> 的节点。</summary>
            <param name="settingKey">配置元素的“key”属性值（不区分大小写）。</param>
            <remarks>
            <para>此方法不考虑配置文件的外部引用或继承关系，也不考虑 clear 和 remove 节点，仅分析应用程序配置文件下 appSettings 元素下的 add 节点或 app 元素的 setting 节点。如配置文件被修改，将被重新加载，并触发 <see cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/> 事件。</para>
            <para>应用程序的配置文件名为“主程序无扩展文件名.config”或“webapp.config”（Web 应用程序）。</para>
            </remarks>
            <seealso cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/>
        </member>
        <member name="M:AppHelpers.ApplicationHelper.GetAppSetting(System.String,System.String)">
            <summary>返回当前应用程序配置文件“appSettings/add”或“app/setting”元素下“key”属性为 <paramref name="settingKey"/> 的节点。</summary>
            <param name="settingKey">配置元素的“key”属性值（不区分大小写）。</param>
            <param name="defaultValue">配置文件不存在配置节时的默认值。</param>
            <para>此方法不考虑配置文件的外部引用或继承关系，也不考虑 clear 和 remove 节点，仅分析应用程序配置文件下 appSettings 元素下的 add 节点或 app 元素的 setting 节点。如配置文件被修改，将被重新加载，并触发 <see cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/> 事件。</para>
            <para>应用程序的配置文件名为“主程序无扩展文件名.config”或“webapp.config”（Web 应用程序）。</para>
            <seealso cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/>
        </member>
        <member name="M:AppHelpers.ApplicationHelper.GetAppSetting``1(System.String,``0)">
            <summary>返回当前应用程序配置文件“appSettings/add”或“app/setting”元素下“key”属性为 <paramref name="settingKey"/> 的节点，并转换为 <typeparamref name="TDefault"/> 类型。如不存在配置值，则返回 <paramref name="defaultValue"/>。</summary>
            <param name="settingKey">配置元素的“key”属性值（不区分大小写）。</param>
            <param name="defaultValue">配置文件不存在配置节时的默认值。</param>
            <remarks>
            <para>此方法不考虑配置文件的外部引用或继承关系，也不考虑 clear 和 remove 节点，仅分析应用程序配置文件下 appSettings 元素下的 add 节点或 app 元素的 setting 节点。如配置文件被修改，将被重新加载，并触发 <see cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/> 事件。</para>
            <para>应用程序的配置文件名为“主程序无扩展文件名.config”或“webapp.config”（Web 应用程序）。</para>
            <para>此方法在每次调用时均执行 <see cref="T:System.String"/> 到 <typeparamref name="TDefault"/> 的转换。如转换操作需要较多的计算量，应考虑缓存配置值。</para>
            </remarks>
            <seealso cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/>
            <typeparam name="TDefault">配置值的强类型。</typeparam>
            <exception cref="T:System.InvalidCastException">无法从字符串转换为 <typeparamref name="TDefault"/> 类型。</exception>
            <seealso cref="M:AppHelpers.ApplicationHelper.GetAppConfig``1(System.String,``0)"/>
        </member>
        <member name="M:AppHelpers.ApplicationHelper.GetAppConfig``1(System.String,``0)">
            <summary>返回当前应用程序配置文件匹配 XPath <paramref name="xpath"/> 的节点，并转换为 <typeparamref name="TDefault"/> 类型。如不存在配置节点，则返回 <paramref name="defaultValue"/>。</summary>
            <param name="xpath">配置元素的 XML 路径（以配置文件的文档节点为基准节点）。</param>
            <param name="defaultValue">配置文件不存在配置节时的默认值。</param>
            <remarks>
            <para>此方法支持定位到配置文件的元素（返回元素内文本）、属性（返回属性值）、文本节点（返回文本值）。</para>
            <para>此方法不缓存 XPath 的计算结果。如配置文件较大，或对性能要求较高，应缓存此方法的返回值，避免多次重复调用本方法。</para>
            <para>此方法不考虑配置文件的外部引用或继承关系，也不考虑 clear 和 remove 节点，仅分析应用程序配置文件下 appSettings 元素下的 add 节点或 app 元素的 setting 节点。如配置文件被修改，将被重新加载，并触发 <see cref="E:AppHelpers.ApplicationHelper.ConfigurationChanged"/> 事件。</para>
            <para>应用程序的配置文件名为“主程序无扩展文件名.config”或“webapp.config”（Web 应用程序）。</para>
            <para>此方法在每次调用时均执行 <see cref="T:System.String"/> 到 <typeparamref name="TDefault"/> 的转换。如转换操作需要较多的计算量，应考虑缓存配置值。</para>
            </remarks>
            <typeparam name="TDefault">配置值的强类型。</typeparam>
            <exception cref="T:System.InvalidCastException">无法从字符串转换为 <typeparamref name="TDefault"/> 类型。</exception>
            <seealso cref="M:AppHelpers.ApplicationHelper.GetAppSetting``1(System.String,``0)"/>
        </member>
        <member name="M:AppHelpers.ApplicationHelper.RunSingleInstanceProcess(System.String,System.Action)">
            <summary>
            运行单实例程序（一般用于窗体应用程序，避免程序多个实例重复运行）。当程序已运行时，尝试显示该程序窗体。
            </summary>
            <param name="appId">应用程序的实例标识符。</param>
            <param name="run">执行应用程序的动作。</param>
        </member>
        <member name="M:AppHelpers.ApplicationHelper.RunSingleInstanceProcess(System.String,System.Action,System.Action)">
            <summary>
            运行单实例程序（一般用于窗体应用程序，避免程序多个实例重复运行）。
            </summary>
            <param name="appId">应用程序的实例标识符。</param>
            <param name="run">执行应用程序的动作。</param>
            <param name="actionIfRunning">当应用程序已有实例在运行时执行的动作。当此委托为空且程序已运行时，尝试显示该程序窗体。提示：可使用 <see cref="M:System.Environment.GetCommandLineArgs"/> 方法获取当前进程的参数。</param>
        </member>
        <member name="T:AppHelpers.DateTimeHelper">
            <summary>用于处理日期时间的帮助类。</summary>
            <remarks>此类可从源代码级别引用。</remarks>
        </member>
        <member name="F:AppHelpers.DateTimeHelper.UnixEpoch">
            <summary>返回 Unix 计时起始时间（通用协调时间 1970 年 1 月 1 日 0时）。</summary>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToBasicString(System.DateTime)">
            <summary>将传入的时间按“yyyyMMddHHmmss”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“年月日时分秒”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToFixedWidthSecondString(System.DateTime)">
            <summary>将传入的时间按“mm:ss:sss”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“分:秒:毫秒”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToHour(System.DateTime)">
            <summary>将日期截取为当日的小时。</summary>
            <param name="value">需要截取的日期。</param>
            <returns>指定日期当日的小时。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToInvariantCultureString(System.DateTime)">
            <summary>将传入的时间按“yyyy-MM-dd HH:mm:ss”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“年-月-日 时:分:秒”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToIsoBasicDateString(System.DateTime)">
            <summary>将传入的时间按“yyyyMMdd”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“年月日”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToIsoBasicTimeString(System.DateTime)">
            <summary>将传入的时间按“HHmmss”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“时分秒”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToIsoDateString(System.DateTime)">
            <summary>将传入的时间按 ISO 8601“yyyy-MM-dd”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“年-月-日”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToIsoString(System.DateTime)">
            <summary>将传入的时间按“yyyy-MM-ddTHH:mm:ss”的格式转换为文本。如时间的 <see cref="P:System.DateTime.Kind"/> 为 <see cref="F:System.DateTimeKind.Utc"/>，则在时间后附加“Z”表示通用协调时，否则不附加时区标识符。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为 ISO 8601 格式的时间文本。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToIsoTimeString(System.DateTime)">
            <summary>将传入的时间按“HH:mm:ss”的格式转换为文本。</summary>
            <param name="value">需要转换为文本的时间。</param>
            <returns>转换为“时:分:秒”格式的时间。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToLocalDateTime(System.Int64)">
            <summary>将 Unix 的毫秒数（自 1970 年 1 月 1 日开始的毫秒数）转换为本地时间。转换失败时，返回 <see cref="F:System.DateTime.MinValue"/>。</summary>
            <param name="unixMilliseconds">需转换的 Unix 毫秒数。</param>
            <returns>对应的本地日期时间</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToMonth(System.DateTime)">
            <summary>将日期截取为当月 1 号 0 时。</summary>
            <param name="value">需要截取的日期。</param>
            <returns>指定日期当月的 1 号。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToQuarter(System.DateTime)">
            <summary>将日期截取为当季第一个月份的 1 号 0 时。</summary>
            <param name="value">需要截取的日期。</param>
            <returns>指定日期当季第一个月份的 1 号。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToTomorrow(System.DateTime)">
            <summary>将日期设置为翌天午夜 0 时。</summary>
            <param name="value">需要获取下一天的日期。</param>
            <returns>翌天午夜 0 时。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToUnixMilliseconds(System.DateTime)">
            <summary>将传入时间转换为 Unix 的毫秒数（自 1970 年 1 月 1 日开始的毫秒数）。</summary>
            <param name="date">需转换的日期。</param>
            <returns>Unix 时间毫秒数。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToWeek(System.DateTime)">
            <summary>将日期截取为当周星期日 0 时。</summary>
            <param name="value">需要截取的日期。</param>
            <returns>指定日期的周日 0 时。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToWeek(System.DateTime,System.Int32)">
            <summary>将日期截取为当周星期日起某天后的 0 时。</summary>
            <param name="value">需要截取的日期。</param>
            <param name="dayOfWeek">从周日起的天数。如 <code>DateTime.Now.ToWeek(2)</code> 表示本周二。</param>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToYear(System.DateTime)">
            <summary>将日期截取为当年 1 月 1 号 0 时。</summary>
            <param name="value">需要截取的日期。</param>
            <returns>指定日期当年的 1 月 1 号。</returns>
        </member>
        <member name="M:AppHelpers.DateTimeHelper.ToYesterday(System.DateTime)">
            <summary>将日期设置为昨天午夜 0 时。</summary>
            <param name="value">需要获取昨天的日期。</param>
            <returns>昨天午夜 0 时。</returns>
        </member>
        <member name="T:AppHelpers.LogHelper">
            <summary>用于记录程序运行日志的帮助类。用法详情请查看帮助文档。</summary>
            <remarks>
            <para>常用配置语句：<see cref="M:AppHelpers.LogHelper.LogUnhandledException"/>（捕获当前程序域未处理异常并记录）、<see cref="M:AppHelpers.LogHelper.UseConsoleLogger"/>（使用控制台日志记录器）、<see cref="M:AppHelpers.LogHelper.AddFileLogger(AppHelpers.FilePath,System.Predicate{AppHelpers.LogItem})"/>（添加带有筛选器的文件日志记录器，日志将按天命名记录到指定的位置）。</para>
            <para>日志记录器不提供清除过期日志或控制日志文件大小的功能。如需实现该功能，可使用 <see cref="M:AppHelpers.LogHelper.AddFileLogger(AppHelpers.FilePath,AppHelpers.FileLoggerConfig)"/> 重载，在 <see cref="T:AppHelpers.FileLoggerConfig"/> 的构造函数中传入日志命名和计算重命名时机的委托，在该委托中执行必要的处理。</para>
            <para>常用扩展方法：<see cref="M:AppHelpers.LogHelper.Log(System.String)"/>、<see cref="M:AppHelpers.LogHelper.Log(System.String,System.String)"/>、<see cref="M:AppHelpers.LogHelper.Log(System.Exception)"/>。</para>
            <para>本代码依赖于 <see cref="T:AppHelpers.DiagnosticsHelper"/>、<see cref="T:AppHelpers.FileHelper"/>、<see cref="T:AppHelpers.FilePath"/>、<see cref="T:AppHelpers.DateTimeHelper"/>。</para>
            </remarks>
            <seealso cref="T:AppHelpers.ILogger"/>
            <seealso cref="T:AppHelpers.LogItem"/>
            <seealso cref="T:AppHelpers.LogLevel"/>
            <seealso cref="T:AppHelpers.FileLoggerConfig"/>
        </member>
        <member name="P:AppHelpers.LogHelper.IncludeSystemStackTraceInException">
            <summary>获取或设置是否在 <see cref="M:AppHelpers.LogHelper.Log(System.Exception)"/> 等异常记录方法中包含系统的调用堆栈。</summary>
            <seealso cref="M:AppHelpers.LogHelper.Log(System.Exception)"/>
            <seealso cref="M:AppHelpers.LogHelper.Log(System.Exception,System.String)"/>
            <seealso cref="M:AppHelpers.LogHelper.Log(System.Exception,System.String,AppHelpers.LogLevel)"/>
        </member>
        <member name="P:AppHelpers.LogHelper.LastLoggerException">
            <summary>获取日志记录器在记录日志过程中发生的最近一个异常。可使用 <see cref="M:AppHelpers.LogHelper.ClearLoggerException"/> 清除本异常。</summary>
        </member>
        <member name="P:AppHelpers.LogHelper.LoggerCount">
            <summary>获取已登记的日志记录器数量。</summary>
        </member>
        <member name="P:AppHelpers.LogHelper.MergeRecurrentItems">
            <summary>获取或设置是否合并连续出现的记录项。</summary>
        </member>
        <member name="P:AppHelpers.LogHelper.ExceptionWrapper">
            <summary>获取或设置在日志记录项中附加信息的委托。该委托将用于在调用 <see cref="M:AppHelpers.LogHelper.Log(System.Exception)"/> 前往异常中添加信息。</summary>
        </member>
        <member name="M:AppHelpers.LogHelper.AddEventLogger(System.String)">
            <summary>添加指定日志源名称的应用程序日志事件记录器。</summary>
            <param name="eventSourceName">日志记录源的名称。</param>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddEventLogger(System.String,System.Predicate{AppHelpers.LogItem})">
            <summary>添加指定日志源名称和筛选器的应用程序日志事件记录器。</summary>
            <param name="eventSourceName">日志记录源的名称。</param>
            <param name="filter">用于筛选日志的筛选器。</param>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddFileLogger">
            <summary>添加默认的文件日志记录器。日志将按天命名记录到应用程序所在的路径。</summary>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddFileLogger(AppHelpers.FilePath)">
            <summary>添加指定的文件日志记录器，日志将按天命名记录到 <paramref name="logPath"/> 指定的位置。</summary>
            <param name="logPath">日志位置。当日志路径为相对路径时，基础路径为应用程序所在的路径。设置值为 <see cref="F:AppHelpers.FilePath.Empty"/> 时，日志将记录到应用程序所在的路径。</param>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddFileLogger(AppHelpers.FilePath,System.Predicate{AppHelpers.LogItem})">
            <summary>添加带有筛选器的文件日志记录器，日志将按天命名记录到 <paramref name="logPath"/> 指定的位置。</summary>
            <param name="logPath">日志位置。当日志路径为相对路径时，基础路径为应用程序所在的路径。设置值为 <see cref="F:AppHelpers.FilePath.Empty"/> 时，日志将记录到应用程序所在的路径。</param>
            <param name="filter">用于筛选记录日志的委托。</param>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddFileLogger(AppHelpers.FilePath,AppHelpers.FileLoggerConfig)">
            <summary>添加指定的文件日志记录器。</summary>
            <param name="logPath">日志位置。当日志路径为相对路径时，基础路径为应用程序所在的路径。设置值为 <see cref="F:AppHelpers.FilePath.Empty"/> 时，日志将记录到应用程序所在的路径。</param>
            <param name="configuration">用于生成日志的配置。</param>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddLogger(AppHelpers.ILogger,System.Predicate{AppHelpers.LogItem})">
            <summary>添加指定的日志记录器。</summary>
            <param name="logger">用于记录日志的记录器。</param>
            <param name="filter">用于筛选记录日志的委托。</param>
            <returns>执行记录日志操作的委托。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.AddLogMethod(System.Action{AppHelpers.LogItem})">
            <summary>添加新的日志记录委托。此方法不重复添加已有的委托。</summary>
            <param name="logMethod">用于记录日志的委托。委托内部应实现线程同步，且不能抛出异常。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.ClearLoggerException">
            <summary>将 <see cref="P:AppHelpers.LogHelper.LastLoggerException"/> 置为空引用。</summary>
        </member>
        <member name="M:AppHelpers.LogHelper.Flush">
            <summary>写出日志记录器尚未写出的项目。注意：此方法在内部使用锁定机制，因此，频繁调用此方法将影响程序的性能。</summary>
        </member>
        <member name="M:AppHelpers.LogHelper.IsError(AppHelpers.LogItem)">
            <summary>返回日志项是否为错误。</summary>
            <param name="logItem">需要检查的日志项。</param>
            <returns>日志项为错误时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.String)">
            <summary>将文本内容写入日志。</summary>
            <param name="content">需要记录的内容。</param>
            <returns>返回原文本。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.String,System.String)">
            <summary>将文本内容写入指定类目的日志。</summary>
            <param name="content">需要记录的内容。</param>
            <param name="category">日志类目。</param>
            <returns>返回原文本。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.String,AppHelpers.LogLevel)">
            <summary>将文本内容写入指定类目的日志。</summary>
            <param name="content">需要记录的内容。</param>
            <param name="logLevel">日志级别。</param>
            <returns>返回原文本。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.String,System.String,AppHelpers.LogLevel)">
            <summary>将文本内容写入指定类目的日志。</summary>
            <param name="content">需要记录的内容。</param>
            <param name="category">日志类目。</param>
            <param name="logLevel">日志级别。</param>
            <returns>返回原文本。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.String,AppHelpers.LogLevel,System.String)">
            <summary>将文本内容写入指定类目的日志。</summary>
            <param name="content">需要记录的内容。</param>
            <param name="logLevel">日志级别。</param>
            <param name="category">日志类目。</param>
            <returns>返回原文本。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.Exception)">
            <summary>将 <see cref="F:AppHelpers.LogLevel.Error"/> 级别的异常写入日志。</summary>
            <param name="exception">需要记录的异常。</param>
            <returns>返回传入的异常。</returns>
            <remarks>默认场合下不写入系统的调用堆栈，如需包含系统调用堆栈，可设置 <see cref="P:AppHelpers.LogHelper.IncludeSystemStackTraceInException"/> 属性，或使用 <see cref="M:AppHelpers.LogHelper.Log(System.Exception,System.String,AppHelpers.LogLevel)"/> 重载设置级别为 <see cref="F:AppHelpers.LogLevel.FatalError"/> 的日志级别。</remarks>
            <seealso cref="P:AppHelpers.LogHelper.IncludeSystemStackTraceInException"/>
            <seealso cref="P:AppHelpers.LogHelper.ExceptionWrapper"/>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.Exception,System.String)">
            <summary>将 <see cref="F:AppHelpers.LogLevel.Error"/> 级别的异常和类目写入日志。</summary>
            <param name="exception">需要记录的异常。</param>
            <param name="category">日志类目。</param>
            <returns>返回传入的异常。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.Exception,System.String,AppHelpers.LogLevel)">
            <summary>将异常、类目和级别写入日志。</summary>
            <param name="exception">需要记录的异常。</param>
            <param name="category">日志类目。</param>
            <param name="logLevel">日志级别。</param>
            <returns>返回传入的异常。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.Exception,System.String,AppHelpers.LogLevel,System.Boolean)">
            <summary>将异常、类目和级别写入日志。</summary>
            <param name="exception">需要记录的异常。</param>
            <param name="category">日志类目。</param>
            <param name="logLevel">日志级别。</param>
            <param name="excludeStackTrace">是否隐藏异常的调用堆栈</param>
            <returns>返回传入的异常。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(System.Exception,AppHelpers.LogLevel,System.String)">
            <summary>将类目、级别和异常写入日志。</summary>
            <param name="exception">需要记录的异常。</param>
            <param name="category">日志类目。</param>
            <param name="logLevel">日志级别。</param>
            <returns>返回传入的异常。</returns>
        </member>
        <member name="M:AppHelpers.LogHelper.Log(AppHelpers.LogItem)">
            <summary>将指定的 <see cref="T:AppHelpers.LogItem"/> 记录到日志。</summary>
            <param name="item">需要记录的日志项。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.LogUnhandledException">
            <summary>使应用程序能记录当前程序域未处理异常的信息。</summary>
        </member>
        <member name="M:AppHelpers.LogHelper.LogUnhandledException(System.AppDomain)">
            <summary>使应用程序能记录特定程序域未处理异常的信息。</summary>
            <param name="domain">需要记录未处理异常的程序域。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.UseConcurrentConsoleLogger">
            <summary>使用带有线程同步和输出缓冲的控制台日志记录器。在非控制台环境下，此操作不执行任何动作。</summary>
        </member>
        <member name="M:AppHelpers.LogHelper.UseConcurrentConsoleLogger(System.Predicate{AppHelpers.LogItem})">
            <summary>使用带有线程同步和输出缓冲的控制台日志记录器，并指定该记录器的筛选器。在非控制台环境下，此操作不执行任何动作。</summary>
            <param name="filter">用于筛选日志的筛选器。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.UseConsoleLogger">
            <summary>使用控制台日志记录器。在非控制台环境下，此操作不执行任何动作。</summary>
        </member>
        <member name="M:AppHelpers.LogHelper.UseConsoleLogger(System.Predicate{AppHelpers.LogItem})">
            <summary>使用控制台日志记录器。在非控制台环境下，此操作不执行任何动作。</summary>
            <param name="filter">用于筛选日志项的委托。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.UseConsoleLogger(System.Predicate{AppHelpers.LogItem},System.Action{AppHelpers.LogItem})">
            <summary>使用控制台日志记录器。在非控制台环境下，此操作不执行任何动作。</summary>
            <param name="filter">用于筛选日志项的委托。</param>
            <param name="logWriter">用于向控制台输出内容的委托。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.UseLogMethod(System.Action{AppHelpers.LogItem})">
            <summary>使用指定的日志记录委托。注：委托内部应实现线程同步，且不能抛出异常。</summary>
            <param name="logMethod">用于记录日志的委托。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.ConsoleWriteLine(System.String)">
            <summary>向控制台输出文本内容。</summary>
            <param name="value">需要输出的内容。</param>
            <remarks>此方法使用额外的线程同步，可与 <see cref="M:AppHelpers.LogHelper.UseConsoleLogger"/> 及其重载输出的控制台内容在多线程环境下串行输出。</remarks>
        </member>
        <member name="M:AppHelpers.LogHelper.ConsoleWriteLine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>向控制台输出多行文本内容。</summary>
            <param name="value">需要输出的文本内容。</param>
            <remarks>
            <para>此方法在输出 <paramref name="value"/> 的所有项时使用额外的线程同步锁定。只有在完成成批文本的输出后才会解除锁定。因此，<paramref name="value"/> 的迭代器不应执行长时间的操作，否则可能引起线程锁定问题。</para>
            <para>本方法可与 <see cref="M:AppHelpers.LogHelper.UseConsoleLogger"/> 及其重载输出的控制台内容在多线程环境下串行输出。</para>
            </remarks>
        </member>
        <member name="M:AppHelpers.LogHelper.AddLogMethod(System.Action{AppHelpers.LogItem},System.Predicate{AppHelpers.LogItem})">
            <summary>添加日志记录方法。</summary>
            <param name="logMethod">用于记录日志的方法。</param>
            <param name="filter">用于筛选日志项的委托。</param>
        </member>
        <member name="M:AppHelpers.LogHelper.EventLogger.#ctor(System.String)">
            <summary>设置 <see cref="T:AppHelpers.LogHelper.EventLogger"/> 的日志记录源名称。</summary>
            <param name="eventSourceName">日志的名称。</param>
        </member>
        <member name="P:AppHelpers.LogHelper.FileLogger.FullLogFileName">
            <summary>返回日志文件的完整名称。</summary>
        </member>
        <member name="P:AppHelpers.LogHelper.FileLogger.LogPath">
            <summary>获取应用程序记录日志的路径。路径为相对路径时，基础路径为应用程序所在的路径。</summary>
        </member>
        <member name="T:AppHelpers.FileLoggerConfig">
            <summary>表示日志记录器的配置。</summary>
        </member>
        <member name="M:AppHelpers.FileLoggerConfig.#ctor">
            <summary>创建默认的日志配置实例。</summary>
        </member>
        <member name="M:AppHelpers.FileLoggerConfig.#ctor(System.Predicate{AppHelpers.LogItem},System.Converter{AppHelpers.LogItem,System.String},System.Func{System.String},System.Func{System.DateTime})">
            <summary>创建日志配置实例。</summary>
            <param name="filter">表示筛选日志项目的委托。此委托为空时不筛选日志。</param>
            <param name="logItemFormatter">用于格式化日志项目的委托。此委托为空时使用默认的日志格式。</param>
            <param name="logFileNamer">用于创建日志文件命名的委托。此委托为空时按日期命名日志。</param>
            <param name="fileNameUpdateTimeHandler">表示确定日志重命名时间的委托。日志记录组件不在每次调用记录方法时计算日志命名，仅在调用记录方法的时间晚于此委托的返回值时，才会调用 <paramref name="logFileNamer"/> 委托重新计算日志命名。此委托为空时，每分钟刷新一次日志命名。</param>
        </member>
        <member name="M:AppHelpers.FileLoggerConfig.LogErrorsOnly">
            <summary>将日志筛选器设置为仅记录错误。</summary>
        </member>
        <member name="M:AppHelpers.FileLoggerConfig.UpdateFileNameDaily">
            <summary>将日志重命名时间设置为每天一次。</summary>
        </member>
        <member name="M:AppHelpers.FileLoggerConfig.UpdateFileNameHourly">
            <summary>将日志重命名时间设置为每小时一次。</summary>
        </member>
        <member name="T:AppHelpers.ILogger">
            <summary>用于记录程序运行日志的接口。</summary>
        </member>
        <member name="M:AppHelpers.ILogger.AppendLog(AppHelpers.LogItem)">
            <summary>记录指定的日志项。</summary>
            <param name="item">需要记入日志的项目。</param>
        </member>
        <member name="M:AppHelpers.ILogger.Flush">
            <summary>将缓冲的日志项写出到目标位置。</summary>
        </member>
        <member name="T:AppHelpers.LogItem">
            <summary>表示一个日志项。</summary>
        </member>
        <member name="M:AppHelpers.LogItem.#ctor(System.String)">
            <summary>创建具有指定内容、等级为 <see cref="F:AppHelpers.LogLevel.Info"/> 的 <see cref="T:AppHelpers.LogItem"/> 实例。</summary>
            <param name="content">日志内容。</param>
        </member>
        <member name="M:AppHelpers.LogItem.#ctor(System.String,AppHelpers.LogLevel)">
            <summary>创建具有指定内容和等级的 <see cref="T:AppHelpers.LogItem"/> 实例。</summary>
            <param name="content">日志内容。</param>
            <param name="level">日志记录级别。</param>
        </member>
        <member name="M:AppHelpers.LogItem.#ctor(System.String,AppHelpers.LogLevel,System.String)">
            <summary>创建具有指定内容、等级和类目的 <see cref="T:AppHelpers.LogItem"/> 实例。</summary>
            <param name="content">日志内容。</param>
            <param name="level">日志记录级别。</param>
            <param name="category">日志的类目。</param>
        </member>
        <member name="P:AppHelpers.LogItem.Category">
            <summary>获取日志项的类目。</summary>
        </member>
        <member name="P:AppHelpers.LogItem.Content">
            <summary>获取日志项的内容。</summary>
        </member>
        <member name="P:AppHelpers.LogItem.LogLevel">
            <summary>获取日志项的等级。</summary>
        </member>
        <member name="P:AppHelpers.LogItem.Timestamp">
            <summary>获取日志项的时间戳。</summary>
        </member>
        <member name="M:AppHelpers.LogItem.op_Inequality(AppHelpers.LogItem,AppHelpers.LogItem)">
            <summary>Implements the operator !=.</summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:AppHelpers.LogItem.op_Equality(AppHelpers.LogItem,AppHelpers.LogItem)">
            <summary>Implements the operator ==.</summary>
            <param name="item1">The item1.</param>
            <param name="item2">The item2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:AppHelpers.LogItem.Equals(AppHelpers.LogItem)">
            <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
            <param name="other">与此对象进行比较的对象。</param>
            <returns>如果当前对象等于 <paramref name="other"/> 参数，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AppHelpers.LogItem.Equals(System.Object)">
            <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
            <param name="obj">与此对象进行比较的对象。</param>
            <returns>如果当前对象等于 <paramref name="obj"/> 参数，则为 true；否则为 false。</returns>
        </member>
        <member name="M:AppHelpers.LogItem.GetHashCode">
            <summary>返回当前对象的散列值。</summary>
            <returns>当前对象的散列值。</returns>
        </member>
        <member name="M:AppHelpers.LogItem.ToString">
            <summary>返回当前记录项的字符串表示形式。</summary>
            <returns>当前记录项的字符串表示形式。</returns>
        </member>
        <member name="T:AppHelpers.LogLevel">
            <summary>日志记录级别</summary>
        </member>
        <member name="F:AppHelpers.LogLevel.Info">
            <summary>消息</summary>
        </member>
        <member name="F:AppHelpers.LogLevel.Diagnostics">
            <summary>调试</summary>
        </member>
        <member name="F:AppHelpers.LogLevel.Warning">
            <summary>警报</summary>
        </member>
        <member name="F:AppHelpers.LogLevel.Error">
            <summary>错误</summary>
        </member>
        <member name="F:AppHelpers.LogLevel.FatalError">
            <summary>严重错误</summary>
        </member>
        <member name="T:AppHelpers.ReflectionHelper">
            <summary>提供反射方法的帮助类。</summary>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsSerializable(System.Type)">
            <summary>返回指定类型是否具有 <see cref="T:System.SerializableAttribute"/> 特性标记。</summary>
            <param name="type">需要检查的类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsNullable(System.Type)">
            <summary>返回指定的类型是否为 <see cref="T:System.Nullable`1"/> 泛型。</summary>
            <param name="type">需要检查的类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetNullableArgument(System.Type)">
            <summary>返回 <see cref="T:System.Nullable`1"/> 泛型类型的类型参数。如类型不是可空类型，则返回 null。</summary>
            <param name="type">需要获取泛型参数的 <see cref="T:System.Nullable`1"/> 类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.ResolveNullableType(System.Type)">
            <summary>返回 <see cref="T:System.Nullable`1"/> 泛型类型的类型参数。如类型不是可空类型，则返回原类型。</summary>
            <param name="type">需要获取泛型参数的 <see cref="T:System.Nullable`1"/> 类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.HasGenericDefinition(System.Type,System.Type)">
            <summary>返回指定的类型是否为包含指定的泛型定义。</summary>
            <param name="type">需要检查的类型。</param>
            <param name="genericTypeDefinition">需要检查的泛型类型定义。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetCollectionElementType(System.Type)">
            <summary>返回集合类型（数组、实现 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 泛型接口的类）的元素项目类型。注：虽然字符串类实现 <see cref="T:System.Collections.Generic.IEnumerable`1"/> 接口，但此方法对字符串类返回 null。</summary>
            <param name="type">需要获取元素项目的类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsPointer(System.Type)">
            <summary>返回指定类型是否为指针类型（包括非托管指针和托管指针 <see cref="T:System.IntPtr"/> 或 <see cref="T:System.UIntPtr"/>）。</summary>
            <param name="type">需要检查的类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsNumeric(System.Type)">
            <summary>返回指定类型是否为数值类型。</summary>
            <param name="type">需要检查的类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsStatic(System.Reflection.MemberInfo)">
            <summary>返回指定的 <see cref="T:System.Reflection.MemberInfo"/> 是否为静态的属性、字段、方法、构造函数或类型。</summary>
            <param name="member">需要检查的 <see cref="T:System.Reflection.MemberInfo"/>。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsAnonymous(System.Type)">
            <summary>返回指定类型是否为匿名类型。</summary>
            <param name="type">需要检查的类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.Is(System.Type,System.Type)">
            <summary>返回指定类型是否为 <paramref name="baseOrInterfaceType"/> 类型（派生类或实现类）。</summary>
            <param name="type">需要检查的类型。</param>
            <param name="baseOrInterfaceType">基类或接口类型。此类型可为泛型定义，结果返回 <paramref name="type"/> 是否为从该泛型创建的类。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.Is``1(System.Type)">
            <summary>返回指定类型是否为 <typeparamref name="TBaseOrInterface"/> 类型（派生类或实现类）。</summary>
            <param name="type">需要检查的类型。</param>
            <typeparam name="TBaseOrInterface">基类或接口类型。此类型可为泛型定义，结果返回 <paramref name="type"/> 是否为从该泛型创建的类。</typeparam>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsImplementationOf(System.Type,System.Type)">
            <summary>返回指定类型是否实现 <paramref name="interfaceType"/> 对应的接口类型（可为泛型接口）。</summary>
            <param name="type">需要检查的类型。</param>
            <param name="interfaceType">接口类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsImplementationOf``1(System.Type)">
            <summary>返回指定类型是否实现 <typeparamref name="TInterface"/> 对应的接口类型。</summary>
            <param name="type">需要检查的类型。</param>
            <typeparam name="TInterface">接口类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsPubliclyVisible(System.Reflection.MemberInfo)">
            <summary>返回指定成员是否可被程序集以外的代码访问。</summary>
            <param name="member">需要检查的成员。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetInterface(System.Type,System.Type)">
            <summary>检查指定类型是否实现 <paramref name="interfaceType"/> 对应的接口类型（可为泛型接口），如存在该类型，则返回接口类型。</summary>
            <param name="type">需要检查的类型。</param>
            <param name="interfaceType">接口类型。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>返回指定类型中符合 <paramref name="predicate"/> 条件的 <see cref="T:System.Reflection.PropertyInfo"/> 数组。</summary>
            <param name="type">需要获取属性的类型。</param>
            <param name="predicate">用于筛选属性的委托。</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> 数组。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetReadableProperties(System.Type)">
            <summary>返回指定类型中公共实例可读取属性的 <see cref="T:System.Reflection.PropertyInfo"/> 数组。</summary>
            <param name="type">需要获取属性的类型。</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> 数组。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.ReflectUnderlyingField(System.Reflection.PropertyInfo)">
            <summary>尝试获取 <see cref="T:System.Reflection.PropertyInfo"/> 底层的字段。此方法可获取直接返回字段值的属性所访问的字段。如属性访问字段的模式不是直接返回字段，或不具有获取访问器，返回 null。</summary>
            <param name="property">需要获取底层字段的属性。</param>
            <returns><paramref name="property"/> 获取访问器所读取的底层字段。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetWritableProperties(System.Type)">
            <summary>返回指定类型中公共实例可写入属性的 <see cref="T:System.Reflection.PropertyInfo"/> 数组。</summary>
            <param name="type">需要获取属性的类型。</param>
            <returns><see cref="T:System.Reflection.PropertyInfo"/> 数组。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetConstructor(System.Type)">
            <summary>获取 <paramref name="type"/> 的无参数公共构造函数。如不存在指定构造函数，返回 null。</summary>
            <param name="type">需要获取构造函数的类。</param>
            <returns>与构造函数对应的 <see cref="T:System.Reflection.ConstructorInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetConstructor``1(System.Type)">
            <summary>获取 <paramref name="type"/> 的公共构造函数。如不存在指定构造函数，返回 null。</summary>
            <typeparam name="TArg">构造函数的第 1 个参数类型。</typeparam>
            <param name="type">需要获取构造函数的类。</param>
            <returns>与构造函数对应的 <see cref="T:System.Reflection.ConstructorInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetConstructor``2(System.Type)">
            <summary>获取 <paramref name="type"/> 的公共构造函数。如不存在指定构造函数，返回 null。</summary>
            <typeparam name="TArg1">构造函数的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">构造函数的第 2 个参数类型。</typeparam>
            <param name="type">需要获取构造函数的类。</param>
            <returns>与构造函数对应的 <see cref="T:System.Reflection.ConstructorInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetConstructor``3(System.Type)">
            <summary>获取 <paramref name="type"/> 的公共构造函数。如不存在指定构造函数，返回 null。</summary>
            <typeparam name="TArg1">构造函数的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">构造函数的第 2 个参数类型。</typeparam>
            <typeparam name="TArg3">构造函数的第 3 个参数类型。</typeparam>
            <param name="type">需要获取构造函数的类。</param>
            <returns>与构造函数对应的 <see cref="T:System.Reflection.ConstructorInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetConstructor``4(System.Type)">
            <summary>获取 <paramref name="type"/> 的公共构造函数。如不存在指定构造函数，返回 null。</summary>
            <typeparam name="TArg1">构造函数的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">构造函数的第 2 个参数类型。</typeparam>
            <typeparam name="TArg3">构造函数的第 3 个参数类型。</typeparam>
            <typeparam name="TArg4">构造函数的第 4 个参数类型。</typeparam>
            <param name="type">需要获取构造函数的类。</param>
            <returns>与构造函数对应的 <see cref="T:System.Reflection.ConstructorInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetConstructor``5(System.Type)">
            <summary>获取 <paramref name="type"/> 的公共构造函数。如不存在指定构造函数，返回 null。</summary>
            <typeparam name="TArg1">构造函数的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">构造函数的第 2 个参数类型。</typeparam>
            <typeparam name="TArg3">构造函数的第 3 个参数类型。</typeparam>
            <typeparam name="TArg4">构造函数的第 4 个参数类型。</typeparam>
            <typeparam name="TArg5">构造函数的第 5 个参数类型。</typeparam>
            <param name="type">需要获取构造函数的类。</param>
            <returns>与构造函数对应的 <see cref="T:System.Reflection.ConstructorInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod(System.Type,System.Predicate{System.Reflection.MethodInfo})">
            <summary>获取 <paramref name="type"/> 中第一个符合筛选条件 <paramref name="predicate"/> 的方法。如不存在指定方法，返回 null。</summary>
            <param name="type">需要获取参数的类。</param>
            <param name="predicate">指定返回方法需要满足的条件。如此参数为空，则不使用条件筛选。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod(System.Type,System.String,System.Predicate{System.Reflection.MethodInfo})">
            <summary>获取 <paramref name="type"/> 中第一个符合筛选条件 <paramref name="predicate"/>、名称为 <paramref name="methodName"/> 的公共方法。如不存在指定方法，返回 null。</summary>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">需要获取方法的名称。如此参数为空，则不按名称筛选方法。</param>
            <param name="predicate">指定返回方法需要满足的条件。如此参数为空，则不使用条件筛选。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod(System.Type,System.String,System.Reflection.BindingFlags,System.Predicate{System.Reflection.MethodInfo})">
            <summary>获取 <paramref name="type"/> 中第一个符合筛选条件 <paramref name="predicate"/>、名称为 <paramref name="methodName"/> 的方法。如不存在指定方法，返回 null。</summary>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">需要获取方法的名称。如此参数为空，则不按名称筛选方法。</param>
            <param name="bindingFlags">指定获取方法时使用的绑定约束。</param>
            <param name="predicate">指定返回方法需要满足的条件。如此参数为空，则不使用条件筛选。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod``1(System.Type,System.String)">
            <summary>获取 <paramref name="type"/> 中名称为 <paramref name="methodName"/> 的公共方法。如不存在指定方法，返回 null。</summary>
            <typeparam name="TArg">方法的第 1 个参数类型。</typeparam>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">方法的名称。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod``2(System.Type,System.String)">
            <summary>获取 <paramref name="type"/> 中名称为 <paramref name="methodName"/> 的公共方法。如不存在指定方法，返回 null。</summary>
            <typeparam name="TArg1">方法的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">方法的第 2 个参数类型。</typeparam>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">方法的名称。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod``3(System.Type,System.String)">
            <summary>获取 <paramref name="type"/> 中名称为 <paramref name="methodName"/> 的公共方法。如不存在指定方法，返回 null。</summary>
            <typeparam name="TArg1">方法的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">方法的第 2 个参数类型。</typeparam>
            <typeparam name="TArg3">方法的第 3 个参数类型。</typeparam>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">方法的名称。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod``4(System.Type,System.String)">
            <summary>获取 <paramref name="type"/> 中名称为 <paramref name="methodName"/> 的公共方法。如不存在指定方法，返回 null。</summary>
            <typeparam name="TArg1">方法的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">方法的第 2 个参数类型。</typeparam>
            <typeparam name="TArg3">方法的第 3 个参数类型。</typeparam>
            <typeparam name="TArg4">方法的第 4 个参数类型。</typeparam>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">方法的名称。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethod``5(System.Type,System.String)">
            <summary>获取 <paramref name="type"/> 中名称为 <paramref name="methodName"/> 的公共方法。如不存在指定方法，返回 null。</summary>
            <typeparam name="TArg1">方法的第 1 个参数类型。</typeparam>
            <typeparam name="TArg2">方法的第 2 个参数类型。</typeparam>
            <typeparam name="TArg3">方法的第 3 个参数类型。</typeparam>
            <typeparam name="TArg4">方法的第 4 个参数类型。</typeparam>
            <typeparam name="TArg5">方法的第 5 个参数类型。</typeparam>
            <param name="type">需要获取参数的类。</param>
            <param name="methodName">方法的名称。</param>
            <returns>与方法对应的 <see cref="T:System.Reflection.MethodInfo"/>。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethodLike(System.Type,System.String,System.Type[])">
            <summary>获取指定类型中名称、返回类型和参数类型最匹配的方法。如找不到匹配的方法，返回 null。</summary>
            <param name="type">包含方法的类。</param>
            <param name="methodName">方法名称。如方法名称为 null，不筛选方法名称。</param>
            <param name="parameterTypes">方法参数类型。如不提供参数，不筛选方法的参数类型。</param>
            <returns>返回指定类中最匹配返回类型和参数类型的方法。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetMethodLike(System.Type,System.String,System.Type,System.Reflection.BindingFlags,System.Type[])">
            <summary>获取指定类型中名称、返回类型和参数类型最匹配的方法。如找不到匹配的方法，返回 null。</summary>
            <param name="type">包含方法的类。</param>
            <param name="methodName">方法名称。如方法名称为 null，不筛选方法名称。</param>
            <param name="returnType">方法返回值类型。如参数为 null，不筛选方法的返回类型。</param>
            <param name="flags">方法的绑定约束。</param>
            <param name="parameterTypes">方法参数类型。如不提供参数，不筛选方法的参数类型。</param>
            <returns>返回指定类中最匹配返回类型和参数类型的方法。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetAttribute``1(System.Reflection.Assembly)">
            <summary>获取 <paramref name="assembly"/> 中类型为 <typeparamref name="TAttribute"/> 的 <see cref="T:System.Attribute"/>，如已定义的同类特性有多个，返回第一个。</summary>
            <typeparam name="TAttribute">需要获取的特性类型。</typeparam>
            <param name="assembly">需要获取特性的程序集。</param>
            <returns>返回特性。如未找到特性，返回 null。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetAttribute``1(System.Reflection.ParameterInfo)">
            <summary>获取 <paramref name="parameter"/> 中类型为 <typeparamref name="TAttribute"/> 的 <see cref="T:System.Attribute"/>，如已定义的同类特性有多个，返回第一个。</summary>
            <typeparam name="TAttribute">需要获取的特性类型。</typeparam>
            <param name="parameter">需要获取特性的类型。</param>
            <returns>返回找到的 <see cref="T:System.Attribute"/>。如未找到对应的特性，返回 null。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取 <paramref name="member"/> 中类型为 <typeparamref name="TAttribute"/> 的 <see cref="T:System.Attribute"/>，如已定义的同类特性有多个，返回第一个。</summary>
            <typeparam name="TAttribute">需要获取的特性类型。</typeparam>
            <param name="member">需要获取特性的类型。</param>
            <param name="inherit">是否从基类检索该特性。</param>
            <returns>返回找到的 <see cref="T:System.Attribute"/>。如未找到对应的特性，返回 null。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>获取 <paramref name="member"/> 中类型为 <typeparamref name="TAttribute"/> 的 <see cref="T:System.Attribute"/>，如已定义的同类特性有多个，返回第一个。如没有找到指定的属性，返回 0 长度的数组。</summary>
            <typeparam name="TAttribute">需要获取的特性类型。</typeparam>
            <param name="member">需要获取特性的类型。</param>
            <param name="inherit">是否从基类检索该特性。</param>
            <returns>返回找到的 <see cref="T:System.Attribute"/> 数组。如未找到对应的特性，返回空集合。</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="member"/> 为空。</exception>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetDescription(System.Reflection.MemberInfo)">
            <summary>获取成员的 <see cref="T:System.ComponentModel.DescriptionAttribute"/> 值。如该特性未定义，返回 null。</summary>
            <param name="member">需要获取说明的成员。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetDisplayName(System.Reflection.MemberInfo)">
            <summary>获取成员的 <see cref="T:System.ComponentModel.DisplayNameAttribute"/> 值。如该特性未定义，返回 null。</summary>
            <param name="member">需要获取显示名称的成员。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.IsPublic(System.Reflection.MemberInfo)">
            <summary>返回指定的 <see cref="T:System.Reflection.MemberInfo"/> 的是否为公共可访问。此方法仅检查当前成员的可访问性，不检查其所属类型层次结构的可访问性。</summary>
            <param name="member">需要检查返回类型的 <see cref="T:System.Reflection.MemberInfo"/>。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.HasReturnType(System.Reflection.MethodInfo)">
            <summary>返回指定的 <see cref="T:System.Reflection.MethodInfo"/> 是否有返回值。</summary>
            <param name="method">需要检查返回类型的 <see cref="T:System.Reflection.MethodInfo"/>。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetReturnType(System.Reflection.MemberInfo)">
            <summary>返回指定的 <see cref="T:System.Reflection.MemberInfo"/> 的返回类型，如属性类型、字段类型、方法返回类型、构造函数所属类型。对于无返回值的方法或事件，返回空引用。</summary>
            <param name="member">需要检查返回类型的 <see cref="T:System.Reflection.MemberInfo"/>。</param>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.GetFullName(System.Reflection.MemberInfo)">
            <summary>获取指定成员的全名。</summary>
            <param name="member">需要获取全名的成员。</param>
            <returns>返回成员的全名。</returns>
        </member>
        <member name="M:AppHelpers.ReflectionHelper.ResolveEnumType(System.Type)">
            <summary>如 <paramref name="type"/> 为枚举类型，返回该类型的基础类型，否则返回原类型。</summary>
            <param name="type">枚举类型。</param>
            <returns>枚举类型的基础类型。</returns>
        </member>
        <member name="P:AppHelpers.DynamicAssemblyHelper.StrongNameKeyPair">
            <summary>获取用于签名动态程序集的默认强名称键对。</summary>
        </member>
        <member name="T:AppHelpers.MsSqlBuilder`1">
            <summary>
            获取 Microsoft SQL Server 访问帮助类的入口类。
            </summary>
            <typeparam name="TEntity">需要访问的实体类。</typeparam>
        </member>
        <member name="P:AppHelpers.MsSqlBuilder`1.Instance">
            <summary>
            获取由类 <typeparamref name="TEntity"/> 映射成的 Microsoft SQL Server 数据库 SQL 生成器实例。
            </summary>
            <returns>可用于存储指定类型对应表的 <see cref="T:AppHelpers.SqlBuilder`1"/> 实例。</returns>
        </member>
        <member name="T:AppHelpers.OracleBuilder`1">
            <summary>
            获取 Oracle 访问帮助类的入口类。
            </summary>
            <typeparam name="TEntity">需要访问的实体类。</typeparam>
        </member>
        <member name="P:AppHelpers.OracleBuilder`1.Instance">
            <summary>
            获取由类 <typeparamref name="TEntity"/> 映射成的 Oracle 数据库 SQL 生成器实例。
            </summary>
            <returns>可用于存储指定类型对应表的 <see cref="T:AppHelpers.SqlBuilder`1"/> 实例。</returns>
        </member>
        <member name="T:AppHelpers.MySqlBuilder`1">
            <summary>
            获取 MySQL 访问帮助类的入口类。
            </summary>
            <typeparam name="TEntity">需要访问的实体类。</typeparam>
        </member>
        <member name="P:AppHelpers.MySqlBuilder`1.Instance">
            <summary>
            获取由类 <typeparamref name="TEntity"/> 映射成的 MySQL 数据库 SQL 生成器实例。
            </summary>
            <returns>可用于存储指定类型对应表的 <see cref="T:AppHelpers.SqlBuilder`1"/> 实例。</returns>
        </member>
        <member name="M:AppHelpers.SqlBuilder.Create``1(AppHelpers.DbProduct,System.Int32)">
            <summary>
            创建用于生成指定数据库产品和生成编号的 <see cref="T:AppHelpers.SqlBuilder`1"/> 实例。
            <note type="note">此方法内部使用反射。为获得最佳的性能，应避免在程序中反复调用此方法，并将创建的 <see cref="T:AppHelpers.SqlBuilder`1"/> 缓存为静态实例。</note>
            </summary>
            <param name="product">指定目标数据库产品。</param>
            <param name="buildId">生成时读取 <see cref="T:AppHelpers.DbSqlBuilderAttribute"/> 时所需匹配的生成编号。</param>
            <returns>对应数据库和生成编号的 <see cref="T:AppHelpers.SqlBuilder`1"/> 实例。</returns>
        </member>
        <member name="T:AppHelpers.SqlBuilder`1">
            <summary>
            用于为类型生成 SQL 访问语句的帮助类。
            </summary>
            <typeparam name="TEntity">需要访问的实体类。</typeparam>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.Delete">
            <summary>
            返回根据主键删除数据的 SQL 语句。
            </summary>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.GetIdentity">
            <summary>
            返回获取自动递增值的 SQL 语句。
            </summary>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.Insert">
            <summary>
            返回插入数据的 SQL 语句。
            </summary>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.Select">
            <summary>
            返回根据主键选择的 SQL 语句。
            </summary>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.SelectAll">
            <summary>
            返回选择所有项的 SQL 语句。
            </summary>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.TableName">
            <summary>
            返回当前 <see cref="T:AppHelpers.SqlBuilder`1"/> 对应的表名称。
            </summary>
        </member>
        <member name="P:AppHelpers.SqlBuilder`1.Update">
            <summary>
            返回根据主键更新数据的 SQL 语句。
            </summary>
        </member>
        <member name="T:AppHelpers.EndianBitConverter">
            <summary>
            类似于 <see cref="T:System.BitConverter"/>，但支持两种尾序方式的字节转换器。
            </summary>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:AppHelpers.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:AppHelpers.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:AppHelpers.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:AppHelpers.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:AppHelpers.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:AppHelpers.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:AppHelpers.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:AppHelpers.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:AppHelpers.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:AppHelpers.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:AppHelpers.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:AppHelpers.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:AppHelpers.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:AppHelpers.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:AppHelpers.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:AppHelpers.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:AppHelpers.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:AppHelpers.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:AppHelpers.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:AppHelpers.Endianness">
            <summary>
            用于指定字节尾序方式。
            </summary>
        </member>
        <member name="F:AppHelpers.Endianness.BigEndian">
            <summary>
            大尾序编码（高位在前，低位在后）
            </summary>
        </member>
        <member name="F:AppHelpers.Endianness.LittleEndian">
            <summary>
            小尾序编码（高位在后，低位在前）
            </summary>
        </member>
        <member name="T:AppHelpers.InteropHelper">
            <summary>
            用于帮助处理互操作的类。
            </summary>
        </member>
        <member name="M:AppHelpers.InteropHelper.TryDispose``1(``0)">
            <summary>在 <see cref="T:System.IDisposable"/> 对象不为空时调用其 <see cref="M:System.IDisposable.Dispose"/> 方法。在出现调用过程中如出现异常，则忽略异常并将其记录到日志。</summary>
            <typeparam name="TDisposable">实现 <see cref="T:System.IDisposable"/> 接口的类型。</typeparam>
            <param name="disposable">实现 <see cref="T:System.IDisposable"/> 接口的对象。</param>
            <returns>返回原 <paramref name="disposable"/>。</returns>
        </member>
        <member name="M:AppHelpers.InteropHelper.DisposeAll``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            按顺序释放 <paramref name="disposableItems"/> 中所有的 <see cref="T:System.IDisposable"/> 对象。
            </summary>
            <param name="disposableItems">需要释放的对象。</param>
            <returns>返回包含释放过程中遇到异常的集合。如无异常，则返回空集合。</returns>
            <typeparam name="TDisposable">需要释放资源的类。</typeparam>
        </member>
        <member name="M:AppHelpers.InteropHelper.DisposeAll(System.IDisposable[])">
            <summary>
            释放所有 <see cref="T:System.IDisposable"/> 对象。释放过程从最后一个参数开始，直到第一个参数。
            </summary>
            <param name="list">需要释放的对象。</param>
            <returns>返回包含释放过程中遇到异常的集合。如无异常，则返回空集合。</returns>
        </member>
        <member name="M:AppHelpers.InteropHelper.MarshalAs``1(System.IntPtr)">
            <summary>
            将 <see cref="T:System.IntPtr"/> 指向的对象转换为 struct。
            </summary>
            <typeparam name="TStruct">转换后的结构类型。</typeparam>
            <param name="ptr">需要转换的指针。</param>
            <returns>转换后的对象。</returns>
        </member>
        <member name="T:AppHelpers.NetHelper">
            <summary>用于帮助处理网络通讯的类。</summary>
        </member>
        <member name="M:AppHelpers.NetHelper.GetLocalIP(System.Boolean)">
            <summary>获取本机的 IP 地址（不含回环地址）。</summary>
            <param name="withIPv6">是否包含 IP V6 地址。</param>
            <returns>IP 地址集合。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.Get``1(System.Uri,System.Func{System.Net.WebResponse,System.IO.Stream,``0})">
            <summary>向 <paramref name="uri"/> 发起请求，并通过委托 <paramref name="contentReader"/> 读取响应内容。</summary>
            <typeparam name="TResult">读取内容后返回的数据。</typeparam>
            <param name="uri">需要发起请求读取响应内容的 <see cref="T:System.Uri"/>。</param>
            <param name="contentReader">用于读取内容的委托，传入的 <see cref="T:System.Net.WebResponse"/> 是与 <paramref name="uri"/> 请求对应的响应，<see cref="T:System.IO.Stream"/> 是该响应对应的内容流。</param>
            <returns>返回 <paramref name="contentReader"/> 的返回值。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.Get``1(System.Net.WebRequest,System.Func{System.Net.WebResponse,System.IO.Stream,``0})">
            <summary>使用 <paramref name="request"/> 发起请求，并通过委托 <paramref name="contentReader"/> 读取响应内容。</summary>
            <typeparam name="TResult">读取内容后返回的数据。</typeparam>
            <param name="request">需要发起请求读取响应内容的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="contentReader">用于读取内容的委托，传入的 <see cref="T:System.Net.WebResponse"/> 是与 <paramref name="request"/> 请求对应的响应，<see cref="T:System.IO.Stream"/> 是该响应对应的内容流。</param>
            <returns>返回 <paramref name="contentReader"/> 的返回值。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.HttpPost``1(System.Uri,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Func{System.Net.WebResponse,System.IO.Stream,``0})">
            <summary>使用 HTTP Post 将 <paramref name="parameters"/> 包含的表单数据提交到 <paramref name="uri"/> 指向的位置，并使用 <paramref name="contentReader"/> 读取响应内容。</summary>
            <typeparam name="TResult">读取内容后返回的数据。</typeparam>
            <param name="uri">需要发起请求读取响应内容的 <see cref="T:System.Uri"/>。</param>
            <param name="parameters">需要作为表单数据提交的参数。</param>
            <param name="contentReader">用于读取内容的委托，传入的 <see cref="T:System.Net.WebResponse"/> 是与 <paramref name="uri"/> 请求对应的响应，<see cref="T:System.IO.Stream"/> 是该响应对应的内容流。</param>
            <returns>返回 <paramref name="contentReader"/> 的返回值。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.HttpPost``1(System.Net.WebRequest,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Func{System.Net.WebResponse,System.IO.Stream,``0})">
            <summary>使用 HTTP Post 将 <paramref name="parameters"/> 包含的表单数据提交到 <paramref name="request"/> 指向的位置，并使用 <paramref name="contentReader"/> 读取响应内容。</summary>
            <typeparam name="TResult">读取内容后返回的数据。</typeparam>
            <param name="request">需要发起请求读取响应内容的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="parameters">需要作为表单数据提交的参数。</param>
            <param name="contentReader">用于读取内容的委托，传入的 <see cref="T:System.Net.WebResponse"/> 是与 <paramref name="request"/> 请求对应的响应，<see cref="T:System.IO.Stream"/> 是该响应对应的内容流。</param>
            <returns>返回 <paramref name="contentReader"/> 的返回值。</returns>
            <exception cref="T:AppHelpers.ValidationException`1"><paramref name="request"/> 为空或不是 <see cref="T:System.Net.HttpWebRequest"/>。</exception>
        </member>
        <member name="M:AppHelpers.NetHelper.HttpPost``1(System.Net.WebRequest,System.Byte[],System.Func{System.Net.WebResponse,System.IO.Stream,``0})">
            <summary>使用 HTTP Post 将 <paramref name="content"/> 提交到 <paramref name="request"/> 指向的位置，并使用 <paramref name="contentReader"/> 读取响应内容。</summary>
            <typeparam name="TResult">读取内容后返回的数据。</typeparam>
            <param name="request">需要发起请求读取响应内容的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="content">需要写入请求正文的内容。</param>
            <param name="contentReader">用于读取内容的委托，传入的 <see cref="T:System.Net.WebResponse"/> 是与 <paramref name="request"/> 请求对应的响应，<see cref="T:System.IO.Stream"/> 是该响应对应的内容流。</param>
            <returns>返回 <paramref name="contentReader"/> 的返回值。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.HttpPost(System.Net.WebRequest,System.Byte[])">
            <summary>将二进制数据 <paramref name="content"/> 提交到 <paramref name="request"/> 指向的位置。</summary>
            <param name="request">需要写入请求正文的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="content">需要写入请求正文的内容。</param>
            <returns>发送请求后返回的 <see cref="T:System.Net.WebResponse"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1"><paramref name="request"/> 为空或不是 <see cref="T:System.Net.HttpWebRequest"/>。</exception>
        </member>
        <member name="M:AppHelpers.NetHelper.HttpPost(System.Net.WebRequest,System.String,System.Boolean)">
            <summary>将文本数据发送到 <see cref="T:System.Net.WebRequest"/>。</summary>
            <param name="request">需要写入请求正文的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="content">需要写入请求正文的内容。</param>
            <param name="applyUrlEncode">是否使用 x-www-form-urlencoded 内容标头并将文本以 URL 编码。如不采用 URL 编码，则 <paramref name="content"/> 将使用 UTF-8 编码。</param>
            <returns>发送请求后返回的 <see cref="T:System.Net.WebResponse"/>。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.IsTcpPortAvailable(System.Int32)">
            <summary>检查指定的本地 TCP 端口 <paramref name="port"/> 是否可用。</summary>
            <param name="port">需要检查的 TCP 端口。</param>
            <returns>如本地端口已被占用，返回 false，否则返回 true。</returns>
            <seealso cref="M:AppHelpers.NetHelper.IsTcpPortAvailable(System.Net.IPEndPoint)"/>
        </member>
        <member name="M:AppHelpers.NetHelper.IsTcpPortAvailable(System.Net.IPEndPoint)">
            <summary>检查指定 IP 地址上的本地 TCP 端口是否可用。</summary>
            <param name="endPoint">需要检查的 IP 结点。</param>
            <returns>如本地端口已被占用，返回 false，否则返回 true。</returns>
            <seealso cref="M:AppHelpers.NetHelper.IsTcpPortAvailable(System.Int32)"/>
        </member>
        <member name="M:AppHelpers.NetHelper.ReadContent(System.Net.WebResponse)">
            <summary>根据编码方式读取 <see cref="T:System.Net.WebResponse"/> 的响应内容。如 <paramref name="response"/> 为 <see cref="T:System.Net.HttpWebResponse"/>，将根据 <see cref="P:System.Net.HttpWebResponse.ContentEncoding"/> 设置解码方式，否则使用 UTF-8 解码。</summary>
            <param name="response">需要读取响应内容的 <see cref="T:System.Net.WebResponse"/>。</param>
            <returns>响应内容的文本。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.ReadContent(System.Net.WebResponse,System.Text.Encoding)">
            <summary>根据编码方式读取 <see cref="T:System.Net.WebResponse"/> 的响应内容。</summary>
            <param name="response">需要读取响应内容的 <see cref="T:System.Net.WebResponse"/>。</param>
            <param name="encoding">用于解码相应内容的 <see cref="T:System.Text.Encoding"/>。如此值为 null，而 <paramref name="response"/> 为 <see cref="T:System.Net.HttpWebResponse"/>，将根据 <see cref="P:System.Net.HttpWebResponse.ContentEncoding"/> 设置解码方式，否则使用 UTF-8 解码。</param>
            <returns>响应内容的文本。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.ReadString(System.Uri)">
            <summary>使用 HTTP Get 方法读取指定 <paramref name="uri"/> 返回的文本内容。</summary>
            <param name="uri">需要远程访问的 <see cref="T:System.Uri"/>。</param>
            <returns>响应内容的文本。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.ReadString(System.Net.WebRequest)">
            <summary>发起请求并读取响应内容。如响应为 <see cref="T:System.Net.HttpWebResponse"/>，将根据 <see cref="P:System.Net.HttpWebResponse.ContentEncoding"/> 设置解码方式，否则使用 UTF-8 解码。</summary>
            <param name="request">需要发起请求读取响应内容的 <see cref="T:System.Net.WebRequest"/>。</param>
            <returns>响应内容的文本。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.ReadString(System.Net.WebRequest,System.Text.Encoding)">
            <summary>发起请求并根据编码方式读取响应内容。</summary>
            <param name="request">需要发起请求读取响应内容的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="encoding">用于解码相应内容的 <see cref="T:System.Text.Encoding"/>。如此值为 null，且请求的响应为 <see cref="T:System.Net.HttpWebResponse"/>，将根据 <see cref="P:System.Net.HttpWebResponse.ContentEncoding"/> 设置解码方式，否则使用 UTF-8 解码。</param>
            <returns>响应内容的文本。</returns>
        </member>
        <member name="M:AppHelpers.NetHelper.ResolveEndPoint(System.String)">
            <summary>将文本解析为 <see cref="T:System.Net.IPEndPoint"/>。<paramref name="endPoint"/> 可为 IP 地址或域名。</summary>
            <param name="endPoint">需要解析的地址和端口号。</param>
            <remarks>此重载仅返回 IP V4 地址。</remarks>
        </member>
        <member name="M:AppHelpers.NetHelper.ResolveEndPoint(System.String,System.Int32,System.Boolean)">
            <summary>将文本解析为 <see cref="T:System.Net.IPEndPoint"/>。<paramref name="endPoint"/> 可为 IP 地址或域名。</summary>
            <param name="endPoint">需要解析的地址和端口号。</param>
            <param name="defaultPort">指定当 <paramref name="endPoint"/> 不包含端口号时的默认端口号。</param>
            <param name="useIPv6">是否使用 IP V6 地址。</param>
        </member>
        <member name="M:AppHelpers.NetHelper.SetHeader(System.Net.WebRequest,System.Net.HttpRequestHeader,System.String)">
            <summary>设置 <see cref="T:System.Net.WebRequest"/> 所用的标头。</summary>
            <param name="request">需要设置标头的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="header">标头。</param>
            <param name="headerContent">标头内容。</param>
        </member>
        <member name="M:AppHelpers.NetHelper.SetKeepAlive(System.Net.WebRequest,System.Boolean)">
            <summary>设置 <see cref="T:System.Net.WebRequest"/> 是否应使用 Keep-Alive 技术持续连接。</summary>
            <param name="request">需要使用 Keep-Alive 保持连接的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="useKeepAlive">是否使用 Keep-Alive。</param>
        </member>
        <member name="M:AppHelpers.NetHelper.SetReferrer(System.Net.WebRequest,System.String)">
            <summary>设置 <see cref="T:System.Net.WebRequest"/> 的引用来源。</summary>
            <param name="request">需要设置引用来源的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="referrer">设置 HTTP 请求的引用来源。</param>
        </member>
        <member name="M:AppHelpers.NetHelper.SetTimeout(System.Net.WebRequest,System.Int32)">
            <summary>设置 <see cref="T:System.Net.WebRequest"/> 的连接和读写超时秒数（<see cref="P:System.Net.WebRequest.Timeout"/>）。如 <paramref name="request"/> 为 <see cref="T:System.Net.HttpWebRequest"/> 或 <see cref="T:System.Net.FtpWebRequest"/>，还将设置其 <see cref="P:System.Net.HttpWebRequest.ReadWriteTimeout"/> 属性。</summary>
            <param name="request">需要设置超时秒数的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="timeoutSeconds">设置连接和读写超时秒数。</param>
        </member>
        <member name="M:AppHelpers.NetHelper.SetUserAgent(System.Net.WebRequest,System.String)">
            <summary>设置 <see cref="T:System.Net.WebRequest"/> 所用的用户代理字符串。</summary>
            <param name="request">需要设置用户代理字符串的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="userAgent">用户代理字符串。</param>
        </member>
        <member name="M:AppHelpers.NetHelper.WriteAsFormPostParameters(System.Net.WebRequest,System.String)">
            <summary>将 <paramref name="content"/> 的内容作为 HTTP 表单提交数据写入 <see cref="T:System.Net.WebRequest"/>。此方法将 <paramref name="request"/> 的 Method 属性置为“POST”，并将 ContentType 置为“application/x-www-form-urlencoded”，在写出内容前， <paramref name="content"/> 的内容将被 URL 编码。</summary>
            <param name="request">需要写入请求参数的 <see cref="T:System.Net.WebRequest"/>。</param>
            <param name="content">需要写入的内容。</param>
        </member>
        <member name="T:AppHelpers.ValidationHelper">
            <summary>用于帮助处理验证数据的类。</summary>
            <remarks>此类可从源代码级别引用。</remarks>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIf``1(``0,System.Predicate{``0},System.String)">
            <summary>在 <paramref name="value"/> 满足 <paramref name="condition"/> 时抛出异常，否则返回原始值。</summary>
            <typeparam name="TValue">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="condition">抛出异常的条件。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIf``1(``0,System.Predicate{``0},System.Func{System.Exception})">
            <summary>在 <paramref name="value"/> 满足 <paramref name="condition"/> 时抛出异常，否则返回原始值。</summary>
            <typeparam name="TValue">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="condition">抛出异常的条件。</param>
            <param name="exceptionGenerator">生成 Exception 的 <see cref="T:System.Func`1"/>。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:System.NullReferenceException"><paramref name="exceptionGenerator"/> 为空。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIf``1(System.Boolean,System.String)">
            <summary>在 <paramref name="condition"/> 为 true 时抛出 <typeparamref name="TException"/> 类型的异常。</summary>
            <param name="condition">抛出异常的条件。</param>
            <param name="message">与异常关联的消息。</param>
            <typeparam name="TException">抛出的异常类型。</typeparam>
            <exception cref="T:System.Exception"><paramref name="condition"/> 为 true 时抛出 <typeparamref name="TException"/> 类型的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfNot``1(``0,System.Predicate{``0},System.String)">
            <summary>在 <paramref name="value"/> 不满足 <paramref name="condition"/> 时抛出异常，否则返回原始值。</summary>
            <typeparam name="TValue">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="condition">不抛出异常的条件。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfNot``1(System.Boolean,System.String)">
            <summary>在不满足 <paramref name="condition"/> 时抛出 <typeparamref name="TException"/> 类型的异常。</summary>
            <param name="condition">不抛出异常的条件。</param>
            <param name="message">与异常关联的消息。</param>
            <typeparam name="TException">抛出的异常类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfNull``1(``0,System.String)">
            <summary>在 <paramref name="value"/> 为默认值（default(T)）时，抛出异常，否则返回原始值。</summary>
            <typeparam name="TValue">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfContains(System.String,System.String,System.String)">
            <summary>在 <paramref name="value"/> 包含（不区分大小写） <paramref name="text"/> 时抛出异常，否则返回原字符串。</summary>
            <param name="value">要检查的字符串。</param>
            <param name="text">不应该包含的字符串。</param>
            <param name="message">异常说明。</param>
            <returns>返回源字符串。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>在 <paramref name="value"/> 符合正则表达式 <paramref name="expression"/> 时抛出异常，否则返回原字符串。</summary>
            <param name="value">要检查的字符串。</param>
            <param name="expression">抛出异常的条件。</param>
            <param name="message">异常说明。</param>
            <returns>返回源字符串。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>在 <paramref name="value"/> 不符合正则表达式 <paramref name="expression"/> 时抛出异常，否则返回原字符串。</summary>
            <param name="value">要检查的字符串。</param>
            <param name="expression">不抛出异常的条件。</param>
            <param name="message">异常说明。</param>
            <returns>返回源字符串。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfDefault``1(``0,System.String)">
            <summary>在 <paramref name="value"/> 为默认值（default(T)）时，抛出异常，否则返回原始值。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfEmpty``1(``0,System.String)">
            <summary>在集合为空或不包含内容时抛出异常，否则返回原集合。</summary>
            <typeparam name="TCollection">集合的类型。</typeparam>
            <param name="collection">要检查的集合。</param>
            <param name="message">异常说明。</param>
            <returns>返回原集合。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfLongerThan``1(``0,System.Int32,System.String)">
            <summary>在集合项超过指定数量时抛出异常，否则返回原集合。</summary>
            <typeparam name="TCollection">集合的类型。</typeparam>
            <param name="collection">要检查的集合。</param>
            <param name="maxLength">集合允许的最大项数。</param>
            <param name="message">异常说明。</param>
            <returns>返回原集合。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfLongerThan(System.String,System.Int32,System.String)">
            <summary>在字符串长度超过指定值时抛出异常，否则返回原字符串。</summary>
            <param name="text">要检查的字符串。</param>
            <param name="maxLength">字符串的最大长度。</param>
            <param name="message">异常说明。</param>
            <returns>返回原字符串。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfEqual``1(``0,``0,System.String)">
            <summary>在 <paramref name="value"/> 为 <paramref name="invalidValue"/> 时，抛出异常，否则返回原始值。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="invalidValue">非法值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfNotEqual``1(``0,``0,System.String)">
            <summary>在 <paramref name="value"/> 不为 <paramref name="expectedValue"/> 时，抛出异常，否则返回原始值。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="expectedValue">有效值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfLessThan``1(``0,``0,System.String)">
            <summary>在 <paramref name="value"/> 小于 <paramref name="validValue"/> 时，抛出异常，否则返回原始值。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="validValue">合法范围起始值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfGreaterThan``1(``0,``0,System.String)">
            <summary>在 <paramref name="value"/> 大于 <paramref name="validValue"/> 时，抛出异常，否则返回原始值。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="validValue">合法范围起始值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfNotInRange``1(``0,``0,``0,System.String)">
            <summary>在 <paramref name="value"/> 不处于 <paramref name="start"/> 和 <paramref name="end"/> 范围时，抛出异常，否则返回原始值。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="start">合法范围起始值。</param>
            <param name="end">合法范围结束值。</param>
            <param name="message">异常说明。</param>
            <returns>返回 <paramref name="value"/>。</returns>
            <exception cref="T:AppHelpers.ValidationException`1">抛出的异常。</exception>
        </member>
        <member name="M:AppHelpers.ValidationHelper.MatchFlags(System.Int32,System.Int32)">
            <summary>类似于枚举类型 <see cref="T:System.Enum"/>.HasFlags 的方法。 <paramref name="value"/> 与 <paramref name="flags"/> 的位运算结果为后者时返回 true。</summary>
            <param name="value">要检查的值。</param>
            <param name="flags">应被包含的值。</param>
            <returns><paramref name="value"/> 与 <paramref name="flags"/> 的位运算结果为后者时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.ValidationHelper.MatchFlags``1(``0,``0)">
            <summary>类似于枚举类型 <see cref="T:System.Enum"/>.HasFlags 的方法，但支持非相同类型枚举值的比较，也可用于整形值。 <paramref name="value"/> 与 <paramref name="flags"/> 的位运算结果为后者时返回 true。</summary>
            <typeparam name="TEnum">枚举类型（或整形）。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="flags">应被包含的值。</param>
            <returns><paramref name="value"/> 与 <paramref name="flags"/> 的位运算结果为后者时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.ValidationHelper.SetFlags``1(``0,``0,System.Boolean)">
            <summary>设置枚举类型的位标识值。当 <paramref name="setValue"/> 为 true 时，设置 <paramref name="value"/> 对应 <paramref name="flags"/> 位标识的值；否则，清除对应 <paramref name="flags"/> 位标识的值。</summary>
            <typeparam name="TEnum">枚举类型（或整形）。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="flags">要设置或清除的位标识值。</param>
            <param name="setValue">设定清除或设置位标识。</param>
            <returns><paramref name="value"/> 与 <paramref name="flags"/> 的位运算结果。</returns>
        </member>
        <member name="M:AppHelpers.ValidationHelper.LimitInRange``1(``0,``0,``0)">
            <summary>限制 <paramref name="value"/> 的值范围。当其处于 <paramref name="minValue"/> 和 <paramref name="maxValue"/> 区间范围之内时，返回原值；当其处于范围之外时，返回 <paramref name="minValue"/> 或 <paramref name="maxValue"/>。</summary>
            <typeparam name="T">要检查的数据类型。</typeparam>
            <param name="value">要检查的值。</param>
            <param name="minValue">合法范围起始值。</param>
            <param name="maxValue">合法范围结束值。</param>
            <returns>返回 <paramref name="value"/> 或极限值。</returns>
        </member>
        <member name="M:AppHelpers.ValidationHelper.AboutEquals(System.Single,System.Single,System.Single)">
            <summary>比较两个浮点数值是否在大致范围内相等。</summary>
            <param name="value">第一个值。</param>
            <param name="other">第二个值。</param>
            <param name="epsilon">两个值之差的绝对值小于此值时，视为两值相等。此值应大于 <see cref="F:System.Single.Epsilon"/>。</param>
            <returns><paramref name="value"/> 和 <paramref name="other"/> 差值的绝对值小于 <paramref name="epsilon"/> 时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.ValidationHelper.AboutEquals(System.Double,System.Double,System.Double)">
            <summary>比较两个浮点数值是否在大致范围内相等。</summary>
            <param name="value">第一个值。</param>
            <param name="other">第二个值。</param>
            <param name="epsilon">两个值之差的绝对值小于此值时，视为两值相等。此值应大于 <see cref="F:System.Double.Epsilon"/>。</param>
            <returns><paramref name="value"/> 和 <paramref name="other"/> 差值的绝对值小于 <paramref name="epsilon"/> 时返回 true。</returns>
        </member>
        <member name="M:AppHelpers.ValidationHelper.ThrowIfParamNull``1(``0,System.String)">
            <summary>在参数为空时抛出异常。</summary>
            <typeparam name="TParam">The type of the parameter.</typeparam>
            <param name="param">The parameter.</param>
            <param name="paramName">Name of the parameter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="param"/> 为空。</exception>
        </member>
        <member name="T:AppHelpers.ValidationException">
            <summary>表示验证数据过程中出现的异常抽象类。</summary>
            <seealso cref="T:System.ArgumentException"/>
            <seealso cref="T:AppHelpers.ValidationException`1"/>
        </member>
        <member name="M:AppHelpers.ValidationException.#ctor">
            <summary>创建默认的 <see cref="T:AppHelpers.ValidationException"/> 实例。</summary>
        </member>
        <member name="M:AppHelpers.ValidationException.#ctor(System.String)">
            <summary>创建仅包含消息的 <see cref="T:AppHelpers.ValidationException"/> 实例。</summary>
            <param name="message">异常的说明信息。</param>
        </member>
        <member name="M:AppHelpers.ValidationException.#ctor(System.String,System.Exception)">
            <summary>创建包含消息和内部异常的 <see cref="T:AppHelpers.ValidationException"/> 实例。</summary>
            <param name="message">异常的说明信息。</param>
            <param name="inner">引发此异常的内部异常。</param>
        </member>
        <member name="M:AppHelpers.ValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>从序列化上下文信息生成 <see cref="T:AppHelpers.ValidationException"/> 实例。</summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="M:AppHelpers.ValidationException.Create``1(``0,System.String)">
            <summary>创建上下文为 <typeparamref name="TValue"/> 类型的验证异常。</summary>
            <typeparam name="TValue">验证异常的上下文数据的类型。</typeparam>
            <param name="value">验证异常的上下文数据。</param>
            <param name="message">异常消息。</param>
            <returns>新的 <see cref="T:AppHelpers.ValidationException`1"/> 异常，其 <see cref="P:AppHelpers.ValidationException`1.AssociatedValue"/> 为传入的 <paramref name="value"/>。</returns>
        </member>
        <member name="T:AppHelpers.ValidationException`1">
            <summary>与数据验证相关的异常。</summary>
            <typeparam name="TValue">参与验证并抛出异常的数据类型。</typeparam>
        </member>
        <member name="M:AppHelpers.ValidationException`1.#ctor(`0,System.String)">
            <summary>创建包含相关值和消息的 <see cref="T:AppHelpers.ValidationException`1"/> 实例。</summary>
            <param name="associatedValue">参与验证导致抛出异常相关的值。</param>
            <param name="message">相关的提示信息。</param>
        </member>
        <member name="M:AppHelpers.ValidationException`1.#ctor">
            <summary>创建默认的 <see cref="T:AppHelpers.ValidationException`1"/> 实例。</summary>
        </member>
        <member name="M:AppHelpers.ValidationException`1.#ctor(System.String)">
            <summary>创建仅包含消息的 <see cref="T:AppHelpers.ValidationException`1"/> 实例。</summary>
            <param name="message">异常的说明信息。</param>
        </member>
        <member name="M:AppHelpers.ValidationException`1.#ctor(System.String,System.Exception)">
            <summary>创建包含消息和内部异常的 <see cref="T:AppHelpers.ValidationException`1"/> 实例。</summary>
            <param name="message">异常的说明信息。</param>
            <param name="inner">引发此异常的内部异常。</param>
        </member>
        <member name="P:AppHelpers.ValidationException`1.AssociatedValue">
            <summary>获取参与验证导致抛出异常相关的值。</summary>
        </member>
        <member name="T:AppHelpers.SecurityHelper">
            <summary>用于进行数据的加密、解密、散列计算、随机化的帮助类。</summary>
        </member>
        <member name="P:AppHelpers.SecurityHelper.IsRunningAsAdministrator">
            <summary>检查当前进程是否以系统管理员身份运行。</summary>
        </member>
        <member name="M:AppHelpers.SecurityHelper.ConfigureAlgorithm``1(System.Byte[],System.Byte[])">
            <summary>配置用于 <see cref="M:AppHelpers.SecurityHelper.Encrypt``1(System.String)"/> 和 <see cref="M:AppHelpers.SecurityHelper.Decrypt``1(System.String)"/> 对应算法的默认密钥和初始向量。</summary>
            <typeparam name="TSymmetricAlgorithm">需要配置的加密算法。</typeparam>
            <param name="defaultKey">默认的密钥。</param>
            <param name="defaultIv">默认的初始向量。</param>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Encode(System.String)">
            <summary>将传入的字符串进行随机化编码。</summary>
            <param name="source">要编码的字符串。</param>
            <returns>编码后的字符串。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Decode(System.String)"/>
            <seealso cref="M:AppHelpers.SecurityHelper.Encrypt``1(System.String)"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Encode(System.String,System.Int32)">
            <summary>将传入的字符串进行随机化编码。</summary>
            <param name="source">要编码的字符串。</param>
            <param name="randomKey">用于计算随机化的数值。</param>
            <returns>编码后的字符串。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Decode(System.String,System.Int32)"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Encode(System.String,System.Int32,System.Converter{System.Byte[],System.String})">
            <summary>将传入的字符串进行随机化编码。</summary>
            <param name="source">要编码的字符串。</param>
            <param name="randomKey">用于计算随机化的数值。</param>
            <param name="binaryConverter">用于将编码字节数组转换为字符串的编码方式。如此委托为 null，使用 <see cref="M:System.Convert.ToBase64String(System.Byte[])"/> 将编码后的字节数组转换为字符串。</param>
            <returns>编码后的字符串。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Decode(System.String,System.Int32,System.Converter{System.String,System.Byte[]})"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Decode(System.String)">
            <summary>将传入的随机化编码字符串解码。</summary>
            <param name="source">要解码的字符串。</param>
            <returns>解码后所得的原始字符串。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Encode(System.String)"/>
            <seealso cref="M:AppHelpers.SecurityHelper.Decrypt``1(System.String)"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Decode(System.String,System.Int32)">
            <summary>将传入的随机化编码字符串解码。</summary>
            <param name="source">要解码的字符串。</param>
            <param name="randomKey">用于计算随机化的数值，此数值应与之前执行 <see cref="M:AppHelpers.SecurityHelper.Encode(System.String,System.Int32)"/> 方法时提供的值匹配。</param>
            <returns>解码后所得的原始字符串。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Encode(System.String,System.Int32)"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Decode(System.String,System.Int32,System.Converter{System.String,System.Byte[]})">
            <summary>将传入的随机化编码字符串解码。</summary>
            <param name="source">要解码的字符串。</param>
            <param name="randomKey">用于计算随机化的数值，此数值应与之前执行 <see cref="M:AppHelpers.SecurityHelper.Encode(System.String,System.Int32)"/> 方法时提供的值匹配。</param>
            <param name="binaryConverter">用于将编码字符串转换为字节数组解码方式。如此委托为 null，使用 <see cref="M:System.Convert.FromBase64String(System.String)"/> 将编码后的字节数组转换为字符串。</param>
            <returns>解码后所得的原始字符串。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Encode(System.String,System.Int32,System.Converter{System.Byte[],System.String})"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.FillRandomBytes(System.Byte[])">
            <summary>使用随机数据填充字节数组。</summary>
            <param name="source">需要随机填充的数组。</param>
            <returns>被随机字节填充的数组。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Hash``1(System.Byte[])">
            <summary>使用指定的散列算法计算字符串的散列值。</summary>
            <typeparam name="THash">散列算法。</typeparam>
            <param name="source">需要计算散列值的字节数组。</param>
            <returns>散列值。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Hash``1(System.IO.Stream)">
            <summary>使用指定的散列算法计算字符串的散列值。</summary>
            <typeparam name="THash">散列算法。</typeparam>
            <param name="source">需要计算散列值的流。</param>
            <returns>散列值。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Hash``1(System.String)">
            <summary>使用指定的散列算法计算字符串的散列值。</summary>
            <typeparam name="THash">散列算法。</typeparam>
            <param name="source">需要计算散列值的字符串。</param>
            <returns>散列值。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashMD5(System.String)">
            <summary>计算传入字符串以 UTF-8 编码所成字节数组的 MD5 散列值。</summary>
            <param name="source">需要计算散列值的字符串。</param>
            <returns>字符串的散列数组。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashMD5(System.Byte[])">
            <summary>计算传入字节数组的 MD5 散列值。</summary>
            <param name="source">需要计算散列值的字节数组。</param>
            <returns>字节数组的散列数组。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashSHA1(System.String)">
            <summary>计算传入字符串以 UTF-8 编码所成字节数组的 SHA-1 散列值。</summary>
            <param name="source">需要计算散列值的字符串。</param>
            <returns>字符串的散列数组。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashSHA1(System.Byte[])">
            <summary>计算传入字节数组的 SHA-1 散列值。</summary>
            <param name="source">需要计算散列值的字节数组。</param>
            <returns>字节数组的散列数组。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashSHA512(System.String)">
            <summary>计算传入字符串以 UTF-8 编码所成字节数组的 SHA-512 散列值。</summary>
            <param name="source">需要计算散列值的字符串。</param>
            <returns>字符串的散列数组。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashMurmur3(System.Byte[])">
            <summary>使用 Murmur3 算法计算字节数组的 32 位散列值。</summary>
            <param name="source">需要计算散列值的字节数组。</param>
            <returns>字节数组的散列值。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.HashFNV1a32(System.Byte[])">
            <summary>使用 Fowler–Noll–Vo 算法计算字节数组的 32 位散列值。</summary>
            <param name="source">需要计算散列值的字节数组。</param>
            <returns>字节数组的散列值。</returns>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Encrypt``1(System.String)">
            <summary>使用指定的对称加密算法、默认的密钥和初始向量加密指定的字符串。</summary>
            <typeparam name="TSymmetricAlgorithm">用于加密字符串的加密算法。</typeparam>
            <param name="source">需要加密的字符串。</param>
            <returns>加密后的字节数组。</returns>
            <see cref="M:AppHelpers.SecurityHelper.ConfigureAlgorithm``1(System.Byte[],System.Byte[])"/>
            <seealso cref="M:AppHelpers.SecurityHelper.Decrypt``1(System.String)"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Encrypt``1(System.Byte[],System.Byte[],System.Byte[])">
            <summary>使用指定的对称加密算法、加密密钥和向量加密指定的字节数组。</summary>
            <typeparam name="TSymmetricAlgorithm">用于加密字节数组的加密算法。</typeparam>
            <param name="source">需要加密的字节数组。</param>
            <param name="key">加密密钥。</param>
            <param name="iv">加密向量。</param>
            <returns>加密后的字节数组。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Decrypt``1(System.Byte[],System.Byte[],System.Byte[])"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Decrypt``1(System.String)">
            <summary>使用指定的对称加密算法、默认的密钥和初始向量解密指定的字符串。</summary>
            <typeparam name="TSymmetricAlgorithm">用于解密字符串的加密算法。</typeparam>
            <param name="source">需要解密的字符串。</param>
            <returns>解密后的字符串。</returns>
            <see cref="M:AppHelpers.SecurityHelper.ConfigureAlgorithm``1(System.Byte[],System.Byte[])"/>
            <seealso cref="M:AppHelpers.SecurityHelper.Encrypt``1(System.Byte[],System.Byte[],System.Byte[])"/>
        </member>
        <member name="M:AppHelpers.SecurityHelper.Decrypt``1(System.Byte[],System.Byte[],System.Byte[])">
            <summary>使用指定的对称加密算法、加密密钥和向量解密指定的字节数组。</summary>
            <typeparam name="TSymmetricAlgorithm">用于解密字节数组的加密算法。</typeparam>
            <param name="source">需要解密的字节数组。</param>
            <param name="key">加密密钥。</param>
            <param name="iv">加密向量。</param>
            <returns>解密后的字节数组。</returns>
            <seealso cref="M:AppHelpers.SecurityHelper.Encrypt``1(System.Byte[],System.Byte[],System.Byte[])"/>
        </member>
        <member name="T:AppHelpers.DbObjectType">
            <summary>表示数据库中的对象类型。</summary>
        </member>
    </members>
</doc>
